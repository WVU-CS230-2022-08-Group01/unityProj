ê
NF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SelectionBoxSubscriber.cs
	namespace 	

MaterialUI
 
{ 
public 
class "
SelectionBoxSubscriber $
:% &
MonoBehaviour' 4
{ 
SelectionBoxConfig 
config 
; 
void 
OnEnable 
( 
) 
{ 
config 	
=
 

gameObject 
. 
GetComponent #
<# $
SelectionBoxConfig$ 6
>6 7
(8 9
)9 :
;: ;
config 	
.	 


ItemPicked
 
+= 
DoThing 
;  
} 
void 
	OnDisable 
( 
) 
{ 
config 	
.	 


ItemPicked
 
-= 
DoThing 
;  
} 
void   
DoThing   
(   
int   
id   
)   
{!! 
Debug"" 
."" 	
Log""	 
("" 
$str"" 
+"" 
config"" 
."" 
	listItems"" $
[""$ %
id""% '
]""' (
+"") *
$str""+ ;
+""< =
id""> @
)""@ A
;""A B
}## 
}$$ 
}%% ◊
HF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SnapButtonToText.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
( 
) 
] 
public 
class 
SnapButtonToText 
:  
MonoBehaviour! .
{ 
[ 
SerializeField 
] 
private 
RectTransform (
buttonRectTransform) <
;< =
public 
bool	 
snapEveryFrame 
= 
true #
;# $
private 	
RectTransform
 
thisRectTransform )
;) *
private 	
Vector2
 
textSize 
; 
[ 
SerializeField 
] 
private 
Vector2 "
basePadding# .
=/ 0
new1 4
Vector25 <
(< =
$num= @
,@ A
$numB E
)E F
;F G
private 	
Vector2
 

buttonSize 
; 
[ 
SerializeField 
] 
private 
Vector2 "
buttonPadding# 0
=1 2
new3 6
Vector27 >
(> ?
$num? B
,B C
$numD G
)G H
;H I
private 	
Vector2
 
	finalSize 
; 
void 
OnEnable 
( 
) 
{   
thisRectTransform!! 
=!! 

gameObject!! !
.!!! "
GetComponent!!" .
<!!. /
RectTransform!!/ <
>!!< =
(!!= >
)!!> ?
;!!? @
}"" 
public$$ 
void$$	 
Update$$ 
($$ 
)$$ 
{%% 
if&& 
(&& 
!&& 
snapEveryFrame&& 
)&& 
return&& 
;&& 
if(( 
((( 
thisRectTransform(( 
.(( 
	sizeDelta(( "
!=((# %
textSize((& .
)((. /
{)) 
textSize** 
=** 
thisRectTransform**  
.**  !
	sizeDelta**! *
;*** +
Snap++ 
(++ 	
)++	 

;++
 
},, 
}-- 
public// 
void//	 
Snap// 
(// 
)// 
{00 

buttonSize11 
=11 
textSize11 
+11 
basePadding11 &
;11& '
	finalSize33 
=33 

buttonSize33 
+33 
buttonPadding33 )
;33) *
if55 
(55 
	finalSize55 
.55 
x55 
<55 
$num55 
)55 
	finalSize66 
.66 
x66 
=66 
$num66 
;66 
buttonRectTransform88 
.88 
	sizeDelta88  
=88! "
	finalSize88# ,
;88, -
}99 
}:: 
};; ü
[F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\SkewTextExample.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
SkewTextExample  
:! "
MonoBehaviour# 0
{		 
private 
TMP_Text 
m_TextComponent (
;( )
public 
AnimationCurve 
VertexCurve )
=* +
new, /
AnimationCurve0 >
(> ?
new? B
KeyframeC K
(K L
$numL M
,M N
$numO P
)P Q
,Q R
newS V
KeyframeW _
(_ `
$num` e
,e f
$numg k
)k l
,l m
newn q
Keyframer z
(z {
$num{ 
,	 Ä
$num
Å Ç
)
Ç É
,
É Ñ
new
Ö à
Keyframe
â ë
(
ë í
$num
í ó
,
ó ò
$num
ô ù
)
ù û
,
û ü
new
† £
Keyframe
§ ¨
(
¨ ≠
$num
≠ Æ
,
Æ Ø
$num
∞ ≤
)
≤ ≥
)
≥ ¥
;
¥ µ
public 
float 

CurveScale 
=  !
$num" &
;& '
public 
float 
ShearAmount  
=! "
$num# '
;' (
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 

gameObject (
.( )
GetComponent) 5
<5 6
TMP_Text6 >
>> ?
(? @
)@ A
;A B
} 	
void 
Start 
( 
) 
{ 	
StartCoroutine 
( 
WarpText #
(# $
)$ %
)% &
;& '
} 	
private 
AnimationCurve 
CopyAnimationCurve 1
(1 2
AnimationCurve2 @
curveA F
)F G
{   	
AnimationCurve!! 
newCurve!! #
=!!$ %
new!!& )
AnimationCurve!!* 8
(!!8 9
)!!9 :
;!!: ;
newCurve## 
.## 
keys## 
=## 
curve## !
.##! "
keys##" &
;##& '
return%% 
newCurve%% 
;%% 
}&& 	
IEnumerator.. 
WarpText.. 
(.. 
).. 
{// 	
VertexCurve00 
.00 
preWrapMode00 #
=00$ %
WrapMode00& .
.00. /
Clamp00/ 4
;004 5
VertexCurve11 
.11 
postWrapMode11 $
=11% &
WrapMode11' /
.11/ 0
Clamp110 5
;115 6
Vector355 
[55 
]55 
vertices55 
;55 
	Matrix4x466 
matrix66 
;66 
m_TextComponent88 
.88 !
havePropertiesChanged88 1
=882 3
true884 8
;888 9

CurveScale99 
*=99 
$num99 
;99 
float:: 
old_CurveScale::  
=::! "

CurveScale::# -
;::- .
float;; 
old_ShearValue;;  
=;;! "
ShearAmount;;# .
;;;. /
AnimationCurve<< 
	old_curve<< $
=<<% &
CopyAnimationCurve<<' 9
(<<9 :
VertexCurve<<: E
)<<E F
;<<F G
while>> 
(>> 
true>> 
)>> 
{?? 
if@@ 
(@@ 
!@@ 
m_TextComponent@@ $
.@@$ %!
havePropertiesChanged@@% :
&&@@; =
old_CurveScale@@> L
==@@M O

CurveScale@@P Z
&&@@[ ]
	old_curve@@^ g
.@@g h
keys@@h l
[@@l m
$num@@m n
]@@n o
.@@o p
value@@p u
==@@v x
VertexCurve	@@y Ñ
.
@@Ñ Ö
keys
@@Ö â
[
@@â ä
$num
@@ä ã
]
@@ã å
.
@@å ç
value
@@ç í
&&
@@ì ï
old_ShearValue
@@ñ §
==
@@• ß
ShearAmount
@@® ≥
)
@@≥ ¥
{AA 
yieldBB 
returnBB  
nullBB! %
;BB% &
continueCC 
;CC 
}DD 
old_CurveScaleFF 
=FF  

CurveScaleFF! +
;FF+ ,
	old_curveGG 
=GG 
CopyAnimationCurveGG .
(GG. /
VertexCurveGG/ :
)GG: ;
;GG; <
old_ShearValueHH 
=HH  
ShearAmountHH! ,
;HH, -
m_TextComponentJJ 
.JJ  
ForceMeshUpdateJJ  /
(JJ/ 0
)JJ0 1
;JJ1 2
TMP_TextInfoLL 
textInfoLL %
=LL& '
m_TextComponentLL( 7
.LL7 8
textInfoLL8 @
;LL@ A
intMM 
characterCountMM "
=MM# $
textInfoMM% -
.MM- .
characterCountMM. <
;MM< =
ifPP 
(PP 
characterCountPP "
==PP# %
$numPP& '
)PP' (
continuePP) 1
;PP1 2
floatUU 

boundsMinXUU  
=UU! "
m_TextComponentUU# 2
.UU2 3
boundsUU3 9
.UU9 :
minUU: =
.UU= >
xUU> ?
;UU? @
floatVV 

boundsMaxXVV  
=VV! "
m_TextComponentVV# 2
.VV2 3
boundsVV3 9
.VV9 :
maxVV: =
.VV= >
xVV> ?
;VV? @
forZZ 
(ZZ 
intZZ 
iZZ 
=ZZ 
$numZZ 
;ZZ 
iZZ  !
<ZZ" #
characterCountZZ$ 2
;ZZ2 3
iZZ4 5
++ZZ5 7
)ZZ7 8
{[[ 
if\\ 
(\\ 
!\\ 
textInfo\\ !
.\\! "
characterInfo\\" /
[\\/ 0
i\\0 1
]\\1 2
.\\2 3
	isVisible\\3 <
)\\< =
continue]]  
;]]  !
int__ 
vertexIndex__ #
=__$ %
textInfo__& .
.__. /
characterInfo__/ <
[__< =
i__= >
]__> ?
.__? @
vertexIndex__@ K
;__K L
intbb 
materialIndexbb %
=bb& '
textInfobb( 0
.bb0 1
characterInfobb1 >
[bb> ?
ibb? @
]bb@ A
.bbA B"
materialReferenceIndexbbB X
;bbX Y
verticesdd 
=dd 
textInfodd '
.dd' (
meshInfodd( 0
[dd0 1
materialIndexdd1 >
]dd> ?
.dd? @
verticesdd@ H
;ddH I
Vector3gg 
offsetToMidBaselinegg /
=gg0 1
newgg2 5
Vector2gg6 =
(gg= >
(gg> ?
verticesgg? G
[ggG H
vertexIndexggH S
+ggT U
$numggV W
]ggW X
.ggX Y
xggY Z
+gg[ \
verticesgg] e
[gge f
vertexIndexggf q
+ggr s
$numggt u
]ggu v
.ggv w
xggw x
)ggx y
/ggz {
$numgg| }
,gg} ~
textInfo	gg á
.
ggá à
characterInfo
ggà ï
[
ggï ñ
i
ggñ ó
]
ggó ò
.
ggò ô
baseLine
ggô °
)
gg° ¢
;
gg¢ £
verticeskk 
[kk 
vertexIndexkk (
+kk) *
$numkk+ ,
]kk, -
+=kk. 0
-kk1 2
offsetToMidBaselinekk2 E
;kkE F
verticesll 
[ll 
vertexIndexll (
+ll) *
$numll+ ,
]ll, -
+=ll. 0
-ll1 2
offsetToMidBaselinell2 E
;llE F
verticesmm 
[mm 
vertexIndexmm (
+mm) *
$nummm+ ,
]mm, -
+=mm. 0
-mm1 2
offsetToMidBaselinemm2 E
;mmE F
verticesnn 
[nn 
vertexIndexnn (
+nn) *
$numnn+ ,
]nn, -
+=nn. 0
-nn1 2
offsetToMidBaselinenn2 E
;nnE F
floatqq 
shear_valueqq %
=qq& '
ShearAmountqq( 3
*qq4 5
$numqq6 ;
;qq; <
Vector3rr 
topShearrr $
=rr% &
newrr' *
Vector3rr+ 2
(rr2 3
shear_valuerr3 >
*rr? @
(rrA B
textInforrB J
.rrJ K
characterInforrK X
[rrX Y
irrY Z
]rrZ [
.rr[ \
topRightrr\ d
.rrd e
yrre f
-rrg h
textInforri q
.rrq r
characterInforrr 
[	rr Ä
i
rrÄ Å
]
rrÅ Ç
.
rrÇ É
baseLine
rrÉ ã
)
rrã å
,
rrå ç
$num
rré è
,
rrè ê
$num
rrë í
)
rrí ì
;
rrì î
Vector3ss 
bottomShearss '
=ss( )
newss* -
Vector3ss. 5
(ss5 6
shear_valuess6 A
*ssB C
(ssD E
textInfossE M
.ssM N
characterInfossN [
[ss[ \
iss\ ]
]ss] ^
.ss^ _
baseLiness_ g
-ssh i
textInfossj r
.ssr s
characterInfo	sss Ä
[
ssÄ Å
i
ssÅ Ç
]
ssÇ É
.
ssÉ Ñ
bottomRight
ssÑ è
.
ssè ê
y
ssê ë
)
ssë í
,
ssí ì
$num
ssî ï
,
ssï ñ
$num
ssó ò
)
ssò ô
;
ssô ö
verticesuu 
[uu 
vertexIndexuu (
+uu) *
$numuu+ ,
]uu, -
+=uu. 0
-uu1 2
bottomShearuu2 =
;uu= >
verticesvv 
[vv 
vertexIndexvv (
+vv) *
$numvv+ ,
]vv, -
+=vv. 0
topShearvv1 9
;vv9 :
verticesww 
[ww 
vertexIndexww (
+ww) *
$numww+ ,
]ww, -
+=ww. 0
topShearww1 9
;ww9 :
verticesxx 
[xx 
vertexIndexxx (
+xx) *
$numxx+ ,
]xx, -
+=xx. 0
-xx1 2
bottomShearxx2 =
;xx= >
float|| 
x0|| 
=|| 
(||  
offsetToMidBaseline||  3
.||3 4
x||4 5
-||6 7

boundsMinX||8 B
)||B C
/||D E
(||F G

boundsMaxX||G Q
-||R S

boundsMinX||T ^
)||^ _
;||_ `
float}} 
x1}} 
=}} 
x0}} !
+}}" #
$num}}$ +
;}}+ ,
float~~ 
y0~~ 
=~~ 
VertexCurve~~ *
.~~* +
Evaluate~~+ 3
(~~3 4
x0~~4 6
)~~6 7
*~~8 9

CurveScale~~: D
;~~D E
float 
y1 
= 
VertexCurve *
.* +
Evaluate+ 3
(3 4
x14 6
)6 7
*8 9

CurveScale: D
;D E
Vector3
ÅÅ 

horizontal
ÅÅ &
=
ÅÅ' (
new
ÅÅ) ,
Vector3
ÅÅ- 4
(
ÅÅ4 5
$num
ÅÅ5 6
,
ÅÅ6 7
$num
ÅÅ8 9
,
ÅÅ9 :
$num
ÅÅ; <
)
ÅÅ< =
;
ÅÅ= >
Vector3
ÉÉ 
tangent
ÉÉ #
=
ÉÉ$ %
new
ÉÉ& )
Vector3
ÉÉ* 1
(
ÉÉ1 2
x1
ÉÉ2 4
*
ÉÉ5 6
(
ÉÉ7 8

boundsMaxX
ÉÉ8 B
-
ÉÉC D

boundsMinX
ÉÉE O
)
ÉÉO P
+
ÉÉQ R

boundsMinX
ÉÉS ]
,
ÉÉ] ^
y1
ÉÉ_ a
)
ÉÉa b
-
ÉÉc d
new
ÉÉe h
Vector3
ÉÉi p
(
ÉÉp q"
offsetToMidBaselineÉÉq Ñ
.ÉÉÑ Ö
xÉÉÖ Ü
,ÉÉÜ á
y0ÉÉà ä
)ÉÉä ã
;ÉÉã å
float
ÖÖ 
dot
ÖÖ 
=
ÖÖ 
Mathf
ÖÖ  %
.
ÖÖ% &
Acos
ÖÖ& *
(
ÖÖ* +
Vector3
ÖÖ+ 2
.
ÖÖ2 3
Dot
ÖÖ3 6
(
ÖÖ6 7

horizontal
ÖÖ7 A
,
ÖÖA B
tangent
ÖÖC J
.
ÖÖJ K

normalized
ÖÖK U
)
ÖÖU V
)
ÖÖV W
*
ÖÖX Y
$num
ÖÖZ e
;
ÖÖe f
Vector3
ÜÜ 
cross
ÜÜ !
=
ÜÜ" #
Vector3
ÜÜ$ +
.
ÜÜ+ ,
Cross
ÜÜ, 1
(
ÜÜ1 2

horizontal
ÜÜ2 <
,
ÜÜ< =
tangent
ÜÜ> E
)
ÜÜE F
;
ÜÜF G
float
áá 
angle
áá 
=
áá  !
cross
áá" '
.
áá' (
z
áá( )
>
áá* +
$num
áá, -
?
áá. /
dot
áá0 3
:
áá4 5
$num
áá6 9
-
áá: ;
dot
áá< ?
;
áá? @
matrix
ââ 
=
ââ 
	Matrix4x4
ââ &
.
ââ& '
TRS
ââ' *
(
ââ* +
new
ââ+ .
Vector3
ââ/ 6
(
ââ6 7
$num
ââ7 8
,
ââ8 9
y0
ââ: <
,
ââ< =
$num
ââ> ?
)
ââ? @
,
ââ@ A

Quaternion
ââB L
.
ââL M
Euler
ââM R
(
ââR S
$num
ââS T
,
ââT U
$num
ââV W
,
ââW X
angle
ââY ^
)
ââ^ _
,
ââ_ `
Vector3
ââa h
.
ââh i
one
ââi l
)
ââl m
;
ââm n
vertices
ãã 
[
ãã 
vertexIndex
ãã (
+
ãã) *
$num
ãã+ ,
]
ãã, -
=
ãã. /
matrix
ãã0 6
.
ãã6 7
MultiplyPoint3x4
ãã7 G
(
ããG H
vertices
ããH P
[
ããP Q
vertexIndex
ããQ \
+
ãã] ^
$num
ãã_ `
]
ãã` a
)
ããa b
;
ããb c
vertices
åå 
[
åå 
vertexIndex
åå (
+
åå) *
$num
åå+ ,
]
åå, -
=
åå. /
matrix
åå0 6
.
åå6 7
MultiplyPoint3x4
åå7 G
(
ååG H
vertices
ååH P
[
ååP Q
vertexIndex
ååQ \
+
åå] ^
$num
åå_ `
]
åå` a
)
ååa b
;
ååb c
vertices
çç 
[
çç 
vertexIndex
çç (
+
çç) *
$num
çç+ ,
]
çç, -
=
çç. /
matrix
çç0 6
.
çç6 7
MultiplyPoint3x4
çç7 G
(
ççG H
vertices
ççH P
[
ççP Q
vertexIndex
ççQ \
+
çç] ^
$num
çç_ `
]
çç` a
)
çça b
;
ççb c
vertices
éé 
[
éé 
vertexIndex
éé (
+
éé) *
$num
éé+ ,
]
éé, -
=
éé. /
matrix
éé0 6
.
éé6 7
MultiplyPoint3x4
éé7 G
(
ééG H
vertices
ééH P
[
ééP Q
vertexIndex
ééQ \
+
éé] ^
$num
éé_ `
]
éé` a
)
ééa b
;
ééb c
vertices
êê 
[
êê 
vertexIndex
êê (
+
êê) *
$num
êê+ ,
]
êê, -
+=
êê. 0!
offsetToMidBaseline
êê1 D
;
êêD E
vertices
ëë 
[
ëë 
vertexIndex
ëë (
+
ëë) *
$num
ëë+ ,
]
ëë, -
+=
ëë. 0!
offsetToMidBaseline
ëë1 D
;
ëëD E
vertices
íí 
[
íí 
vertexIndex
íí (
+
íí) *
$num
íí+ ,
]
íí, -
+=
íí. 0!
offsetToMidBaseline
íí1 D
;
ííD E
vertices
ìì 
[
ìì 
vertexIndex
ìì (
+
ìì) *
$num
ìì+ ,
]
ìì, -
+=
ìì. 0!
offsetToMidBaseline
ìì1 D
;
ììD E
}
îî 
m_TextComponent
òò 
.
òò  
UpdateVertexData
òò  0
(
òò0 1
)
òò1 2
;
òò2 3
yield
öö 
return
öö 
null
öö !
;
öö! "
}
õõ 
}
úú 	
}
ùù 
}ûû Ú
<F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\StudyUrl.cs
public 
class 
StudyUrl 
: 
MonoBehaviour %
{ 
public		 

void		 
OpenURL		 
(		 
)		 
{

 
UnityEngine 
. 
Application 
.  
OpenURL  '
(' (
$str( v
)v w
;w x
UnityEngine 
. 
Debug 
. 
Log 
( 
$str 0
)0 1
;1 2
} 
} ‹
XF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\SimpleScript.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
SimpleScript 
: 
MonoBehaviour  -
{		 
private 
TextMeshPro 
m_textMeshPro )
;) *
private 
const 
string 
label "
=# $
$str% K
;K L
private 
float 
m_frame 
; 
void 
Start 
( 
) 
{ 	
m_textMeshPro 
= 

gameObject &
.& '
AddComponent' 3
<3 4
TextMeshPro4 ?
>? @
(@ A
)A B
;B C
m_textMeshPro 
. !
autoSizeTextContainer /
=0 1
true2 6
;6 7
m_textMeshPro"" 
."" 
fontSize"" "
=""# $
$num""% '
;""' (
m_textMeshPro$$ 
.$$ 
	alignment$$ #
=$$$ % 
TextAlignmentOptions$$& :
.$$: ;
Center$$; A
;$$A B
m_textMeshPro-- 
.-- 
enableWordWrapping-- ,
=--- .
false--/ 4
;--4 5
}00 	
void33 
Update33 
(33 
)33 
{44 	
m_textMeshPro55 
.55 
SetText55 !
(55! "
label55" '
,55' (
m_frame55) 0
%551 2
$num553 7
)557 8
;558 9
m_frame66 
+=66 
$num66 
*66 
Time66 
.66  
	deltaTime66  )
;66) *
}77 	
}99 
}:: å9
EF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\TextInputLine.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
TextInputLine 
: 
MonoBehaviour +
{ 
public 
Color	 
	lineColor 
; 
RectTransform 
thisRect 
; 
Image 
thisIm 
; 
public 
Text	 
placeholderText 
; 
public 
RectTransform	 
textInputRect $
;$ %
float 
animStartTime 
; 
float 
animDeltaTime 
; 
float 
animPosX 
; 
int   
mode   

=   
$num   
;   
void"" 
Start"" 
("" 
)"" 
{## 
thisRect$$ 
=$$ 

gameObject$$ 
.$$ 
GetComponent$$ %
<$$% &
RectTransform$$& 3
>$$3 4
($$5 6
)$$6 7
;$$7 8
thisIm%% 	
=%%
 

gameObject%% 
.%% 
GetComponent%% #
<%%# $
Image%%$ )
>%%) *
(%%+ ,
)%%, -
;%%- .
thisRect'' 
.'' 
	sizeDelta'' 
='' 
new'' 
Vector2'' #
(''$ %
textInputRect''% 2
.''2 3
	sizeDelta''3 <
.''< =
x''= >
,''> ?
$num''@ B
)''B C
;''C D
thisRect(( 
.(( 

localScale(( 
=(( 
new(( 
Vector3(( $
(((% &
$num((& (
,((( )
$num((* ,
,((, -
$num((. 0
)((0 1
;((1 2
})) 
public++ 
void++	 
Activate++ 
(++ 
)++ 
{,, 
thisRect-- 
.-- 
position-- 
=-- 
Input-- 
.-- 
mousePosition-- *
;--* +
thisRect.. 
... 
anchoredPosition.. 
=.. 
new.. "
Vector2..# *
(..+ ,
thisRect.., 4
...4 5
anchoredPosition..5 E
...E F
x..F G
,..G H
-..I J
$num..J L
)..L M
;..M N
thisIm// 	
.//	 

color//
 
=// 
	lineColor// 
;// 
thisRect00 
.00 

localScale00 
=00 
new00 
Vector300 $
(00% &
$num00& (
,00( )
$num00* ,
,00, -
$num00. 0
)000 1
;001 2
animPosX11 
=11 
thisRect11 
.11 
anchoredPosition11 '
.11' (
x11( )
;11) *
animStartTime22 
=22 
Time22 
.22  
realtimeSinceStartup22 ,
;22, -
mode44 
=44 	
$num44
 
;44 
}55 
public77 
void77	 

Deactivate77 
(77 
)77 
{88 
animStartTime99 
=99 
Time99 
.99  
realtimeSinceStartup99 ,
;99, -
mode:: 
=:: 	
$num::
 
;:: 
};; 
void== 
Update== 
(== 
)== 
{>> 
animDeltaTime?? 
=?? 
Time?? 
.??  
realtimeSinceStartup?? ,
-??- .
animStartTime??/ <
;??< =
ifAA 
(AA 
modeAA 
==AA 
$numAA 
)AA 
{BB 
ifCC 
(CC 
animDeltaTimeCC 
<=CC 
$numCC 
)CC 
{DD 
Vector2EE 
tempVec2EE 
;EE 
tempVec2FF 
=FF 
thisRectFF 
.FF 
anchoredPositionFF )
;FF) *
tempVec2GG 
.GG 
xGG 
=GG 
AnimGG 
.GG 
QuintGG 
.GG 
OutGG  
(GG! "
animPosXGG" *
,GG* +
$numGG, .
,GG. /
animDeltaTimeGG0 =
,GG= >
$numGG? C
)GGC D
;GGD E
thisRectHH 
.HH 
anchoredPositionHH 
=HH  
tempVec2HH! )
;HH) *
Vector3JJ 
tempVec3JJ 
;JJ 
tempVec3KK 
=KK 
thisRectKK 
.KK 

localScaleKK #
;KK# $
tempVec3LL 
.LL 
xLL 
=LL 
AnimLL 
.LL 
QuintLL 
.LL 
OutLL  
(LL! "
$numLL" $
,LL$ %
$numLL& (
,LL( )
animDeltaTimeLL* 7
,LL7 8
$numLL9 =
)LL= >
;LL> ?
thisRectMM 
.MM 

localScaleMM 
=MM 
tempVec3MM #
;MM# $
placeholderTextOO 
.OO 
colorOO 
=OO 
ColorOO "
.OO" #
LerpOO# '
(OO' (
newOO) ,
ColorOO- 2
(OO3 4
$numOO4 6
,OO6 7
$numOO8 :
,OO: ;
$numOO< >
,OO> ?
$numOO@ G
)OOG H
,OOH I
	lineColorOOJ S
,OOS T
animDeltaTimeOOU b
*OOc d
$numOOe g
)OOg h
;OOh i
}PP 
elseQQ 
{RR 
modeSS 	
=SS
 
$numSS 
;SS 
}TT 
}UU 
elseVV 
ifVV 

(VV 
modeVV 
==VV 
$numVV 
)VV 
{WW 
ifXX 
(XX 
animDeltaTimeXX 
<=XX 
$numXX 
)XX 
{YY 
ColorZZ 

tempColZZ 
;ZZ 
tempCol[[ 
=[[ 
thisIm[[ 
.[[ 
color[[ 
;[[ 
tempCol\\ 
.\\ 
a\\ 
=\\ 
Anim\\ 
.\\ 
Quint\\ 
.\\ 
Out\\ 
(\\  !
$num\\! #
,\\# $
$num\\% '
,\\' (
animDeltaTime\\) 6
,\\6 7
$num\\8 <
)\\< =
;\\= >
thisIm]] 
.]] 
color]] 
=]] 
tempCol]] 
;]] 
placeholderText__ 
.__ 
color__ 
=__ 
Color__ "
.__" #
Lerp__# '
(__' (
	lineColor__( 1
,__1 2
new__3 6
Color__7 <
(__= >
$num__> @
,__@ A
$num__B D
,__D E
$num__F H
,__H I
$num__J Q
)__Q R
,__R S
animDeltaTime__T a
*__b c
$num__d f
)__f g
;__g h
}`` 
elseaa 
{bb 
modecc 	
=cc
 
$numcc 
;cc 
}dd 
}ee 
}ff 
}gg 
}hh ˘Ñ
BF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\RippleAnim.cs
	namespace 	

MaterialUI
 
{ 
[ 
RequireComponent 
( 
typeof 
( 
Image !
)! "
)" #
]# $
public 
class 

RippleAnim 
: 
MonoBehaviour (
{ 
public 
Sprite	 
im64px 
; 
public 
Sprite	 
im128px 
; 
public 
Sprite	 
im256px 
; 
public 
Sprite	 
im384px 
; 
public 
Sprite	 
im512px 
; 
public 
Sprite	 
im640px 
; 
public 
Sprite	 
im768px 
; 
public 
Sprite	 
im896px 
; 
public 
Sprite	 
im1024px 
; 
private 	
float
 
animationSpeed 
; 
private   	
Image  
 
	thisImage   
;   
private!! 	
RectTransform!!
 
thisRect!!  
;!!  !
private## 	
Vector3##
 
tempRect## 
;## 
private$$ 	
Color$$
 
	tempColor$$ 
;$$ 
private&& 	
float&&
 
startColorAlpha&& 
;&&  
private'' 	
float''
 
endColorAlpha'' 
;'' 
private)) 	
float))
 
animStartTime)) 
;)) 
private** 	
float**
 
animFirstStartTime** "
;**" #
private++ 	
float++
 
animDeltaTime++ 
;++ 
private,, 	
float,,
 
animFirstDeltaTime,, "
;,," #
private.. 	
float..
 
clearInkSize.. 
;.. 
private// 	
float//
 
clearInkAlpha// 
;// 
private11 	
Vector311
 
startPos11 
;11 
private22 	
Vector322
 
endPos22 
;22 
private33 	
bool33
 
moveTowardCenter33 
;33  
private44 	
float44
 
endScale44 
;44 
private66 	
int66
 

scaledSize66 
;66 
private88 	
int88
 
state88 
;88 
public:: 
void::	 

MakeRipple:: 
(:: 
int:: 
size:: "
,::" #
float::$ )
	animSpeed::* 3
,::3 4
float::5 :

startAlpha::; E
,::E F
float::G L
endAlpha::M U
,::U V
Color::W \
color::] b
,::b c
Vector3::d k
endPosition::l w
)::w x
{;; 
	thisImage== 
=== 

gameObject== 
.== 
GetComponent== &
<==& '
Image==' ,
>==, -
(==. /
)==/ 0
;==0 1
thisRect>> 
=>> 

gameObject>> 
.>> 
GetComponent>> %
<>>% &
RectTransform>>& 3
>>>3 4
(>>5 6
)>>6 7
;>>7 8
thisRectAA 
.AA 
SetAsFirstSiblingAA 
(AA 
)AA  
;AA  !
thisRectCC 
.CC 
	sizeDeltaCC 
=CC 
newCC 
Vector2CC #
(CC$ %
sizeCC% )
*CC* +
$numCC, 0
,CC0 1
sizeCC2 6
*CC7 8
$numCC9 =
)CC= >
;CC> ?
thisRectDD 
.DD 

localScaleDD 
=DD 
newDD 
Vector3DD $
(DD$ %
$numDD% '
,DD' (
$numDD) +
,DD+ ,
$numDD- /
)DD/ 0
;DD0 1
ifFF 
(FF 

gameObjectFF 
.FF  
GetComponentInParentFF &
<FF& '
MaterialUIScalerFF' 7
>FF7 8
(FF9 :
)FF: ;
)FF; <

scaledSizeGG 
=GG 
MathfGG 
.GG 

RoundToIntGG !
(GG! "

gameObjectGG" ,
.GG, - 
GetComponentInParentGG- A
<GGA B
MaterialUIScalerGGB R
>GGR S
(GGS T
)GGT U
.GGU V
scaleFactorGGV a
*GGb c
sizeGGd h
)GGh i
;GGi j
elseHH 

scaledSizeII 
=II 
sizeII 
;II 
ifKK 
(KK 

scaledSizeKK 
<=KK 
$numKK 
&&KK 
im64pxKK !
)KK! "
	thisImageLL 
.LL 
spriteLL 
=LL 
im64pxLL 
;LL 
elseMM 
ifMM 

(MM 

scaledSizeMM 
<=MM 
$numMM 
&&MM  
im128pxMM! (
)MM( )
	thisImageNN 
.NN 
spriteNN 
=NN 
im128pxNN 
;NN 
elseOO 
ifOO 

(OO 

scaledSizeOO 
<=OO 
$numOO 
&&OO  
im256pxOO! (
)OO( )
	thisImagePP 
.PP 
spritePP 
=PP 
im256pxPP 
;PP 
elseQQ 
ifQQ 

(QQ 

scaledSizeQQ 
<=QQ 
$numQQ 
&&QQ  
im384pxQQ! (
)QQ( )
	thisImageRR 
.RR 
spriteRR 
=RR 
im384pxRR 
;RR 
elseSS 
ifSS 

(SS 

scaledSizeSS 
<=SS 
$numSS 
&&SS  
im512pxSS! (
)SS( )
	thisImageTT 
.TT 
spriteTT 
=TT 
im512pxTT 
;TT 
elseUU 
ifUU 

(UU 

scaledSizeUU 
<=UU 
$numUU 
&&UU  
im640pxUU! (
)UU( )
	thisImageVV 
.VV 
spriteVV 
=VV 
im640pxVV 
;VV 
elseWW 
ifWW 

(WW 

scaledSizeWW 
<=WW 
$numWW 
&&WW  
im768pxWW! (
)WW( )
	thisImageXX 
.XX 
spriteXX 
=XX 
im768pxXX 
;XX 
elseYY 
ifYY 

(YY 

scaledSizeYY 
<=YY 
$numYY 
&&YY  
im896pxYY! (
)YY( )
	thisImageZZ 
.ZZ 
spriteZZ 
=ZZ 
im896pxZZ 
;ZZ 
else[[ 
if[[ 

([[ 
im1024px[[ 
)[[ 
	thisImage\\ 
.\\ 
sprite\\ 
=\\ 
im1024px\\ 
;\\  
	tempColor^^ 
=^^ 
color^^ 
;^^ 
	tempColor__ 
.__ 
a__ 
=__ 

startAlpha__ 
;__ 
	thisImage`` 
.`` 
color`` 
=`` 
	tempColor`` 
;`` 
ifbb 
(bb 
endPositionbb 
!=bb 
newbb 
Vector3bb !
(bb" #
$numbb# $
,bb$ %
$numbb& '
,bb' (
$numbb) *
)bb* +
)bb+ ,
{cc 
moveTowardCenterdd 
=dd 
truedd 
;dd 
endPosee 

=ee 
endPositionee 
;ee 
}ff 
startPosjj 
=jj 
thisRectjj 
.jj 
positionjj 
;jj  
startColorAlphall 
=ll 

startAlphall 
;ll  
endColorAlphamm 
=mm 
endAlphamm 
;mm 
animationSpeednn 
=nn 
	animSpeednn 
;nn 
statepp 
=pp	 

$numpp 
;pp 
animStartTimeqq 
=qq 
Timeqq 
.qq  
realtimeSinceStartupqq ,
;qq, -
animFirstStartTimerr 
=rr 
animStartTimerr %
;rr% &
}ss 
publicuu 
voiduu	 
ClearRippleuu 
(uu 
)uu 
{vv 
stateww 
=ww	 

$numww 
;ww 
animStartTimexx 
=xx 
Timexx 
.xx  
realtimeSinceStartupxx ,
;xx, -
clearInkSizeyy 
=yy 
thisRectyy 
.yy 

localScaleyy %
.yy% &
xyy& '
;yy' (
clearInkAlphazz 
=zz 
	thisImagezz 
.zz 
colorzz "
.zz" #
azz# $
;zz$ %
if|| 
(|| 
moveTowardCenter|| 
)|| 
endScale}} 
=}} 
$num}} 
;}} 
else~~ 
endScale 
= 
$num 
; 
}
ÄÄ 
void
ÇÇ 
Update
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
animDeltaTime
ÑÑ 
=
ÑÑ 
Time
ÑÑ 
.
ÑÑ "
realtimeSinceStartup
ÑÑ ,
-
ÑÑ- .
animStartTime
ÑÑ/ <
;
ÑÑ< =
if
ÜÜ 
(
ÜÜ 
state
ÜÜ 
==
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
{
áá 
if
àà 
(
àà 
thisRect
àà 
.
àà 

localScale
àà 
.
àà 
x
àà 
<
àà 
$num
àà  "
)
àà" #
{
ââ 
tempRect
ãã 
=
ãã 
thisRect
ãã 
.
ãã 

localScale
ãã #
;
ãã# $
tempRect
åå 
.
åå 
x
åå 
=
åå 
Anim
åå 
.
åå 
Quint
åå 
.
åå 
Out
åå  
(
åå  !
$num
åå! #
,
åå# $
$num
åå% '
,
åå' (
animDeltaTime
åå) 6
,
åå6 7
$num
åå8 9
/
åå: ;
animationSpeed
åå< J
)
ååJ K
;
ååK L
tempRect
çç 
.
çç 
y
çç 
=
çç 
tempRect
çç 
.
çç 
x
çç 
;
çç 
tempRect
éé 
.
éé 
z
éé 
=
éé 
$num
éé 
;
éé 
thisRect
èè 
.
èè 

localScale
èè 
=
èè 
tempRect
èè #
;
èè# $
	tempColor
íí 
=
íí 
	thisImage
íí 
.
íí 
color
íí  
;
íí  !
	tempColor
ìì 
.
ìì 
a
ìì 
=
ìì 
Anim
ìì 
.
ìì 
Quint
ìì 
.
ìì 
Out
ìì !
(
ìì! "
startColorAlpha
ìì" 1
,
ìì1 2
endColorAlpha
ìì3 @
,
ìì@ A
animDeltaTime
ììB O
,
ììO P
$num
ììQ R
/
ììS T
animationSpeed
ììU c
)
ììc d
;
ììd e
	thisImage
îî 
.
îî 
color
îî 
=
îî 
	tempColor
îî  
;
îî  !
if
óó 
(
óó 	
moveTowardCenter
óó	 
)
óó 
{
òò 
Vector3
ôô 
tempVec3
ôô 
=
ôô 
thisRect
ôô !
.
ôô! "
position
ôô" *
;
ôô* +
tempVec3
öö 
.
öö 
x
öö 
=
öö 
Anim
öö 
.
öö 
Quint
öö 
.
öö 
Out
öö !
(
öö! "
startPos
öö" *
.
öö* +
x
öö+ ,
,
öö, -
endPos
öö. 4
.
öö4 5
x
öö5 6
,
öö6 7
animDeltaTime
öö8 E
,
ööE F
$num
ööG H
/
ööI J
animationSpeed
ööK Y
)
ööY Z
;
ööZ [
tempVec3
õõ 
.
õõ 
y
õõ 
=
õõ 
Anim
õõ 
.
õõ 
Quint
õõ 
.
õõ 
Out
õõ !
(
õõ! "
startPos
õõ" *
.
õõ* +
y
õõ+ ,
,
õõ, -
endPos
õõ. 4
.
õõ4 5
y
õõ5 6
,
õõ6 7
animDeltaTime
õõ8 E
,
õõE F
$num
õõG H
/
õõI J
animationSpeed
õõK Y
)
õõY Z
;
õõZ [
thisRect
úú 
.
úú 
position
úú 
=
úú 
tempVec3
úú "
;
úú" #
}
ùù 
}
ûû 
else
üü 
{
†† 
	tempColor
°° 
=
°° 
	thisImage
°° 
.
°° 
color
°°  
;
°°  !
	tempColor
¢¢ 
.
¢¢ 
a
¢¢ 
=
¢¢ 
endColorAlpha
¢¢  
;
¢¢  !
	thisImage
££ 
.
££ 
color
££ 
=
££ 
	tempColor
££  
;
££  !
}
§§ 
}
•• 
else
¶¶ 
if
¶¶ 

(
¶¶ 
state
¶¶ 
==
¶¶ 
$num
¶¶ 
)
¶¶ 
{
ßß 
if
®® 
(
®® 
	thisImage
®® 
.
®® 
color
®® 
.
®® 
a
®® 
>
®® 
$num
®® 
)
®® 
{
©©  
animFirstDeltaTime
™™ 
=
™™ 
Time
™™ 
.
™™ "
realtimeSinceStartup
™™ 3
-
™™4 5 
animFirstStartTime
™™6 H
;
™™H I
tempRect
≠≠ 
=
≠≠ 
thisRect
≠≠ 
.
≠≠ 

localScale
≠≠ #
;
≠≠# $
tempRect
ÆÆ 
.
ÆÆ 
x
ÆÆ 
=
ÆÆ 
Anim
ÆÆ 
.
ÆÆ 
Quint
ÆÆ 
.
ÆÆ 
Out
ÆÆ  
(
ÆÆ  !
clearInkSize
ÆÆ! -
,
ÆÆ- .
endScale
ÆÆ/ 7
,
ÆÆ7 8
animDeltaTime
ÆÆ9 F
,
ÆÆF G
$num
ÆÆH I
/
ÆÆJ K
animationSpeed
ÆÆL Z
)
ÆÆZ [
;
ÆÆ[ \
tempRect
ØØ 
.
ØØ 
y
ØØ 
=
ØØ 
tempRect
ØØ 
.
ØØ 
x
ØØ 
;
ØØ 
tempRect
∞∞ 
.
∞∞ 
z
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞ 
thisRect
±± 
.
±± 

localScale
±± 
=
±± 
tempRect
±± #
;
±±# $
	tempColor
¥¥ 
=
¥¥ 
	thisImage
¥¥ 
.
¥¥ 
color
¥¥  
;
¥¥  !
	tempColor
µµ 
.
µµ 
a
µµ 
=
µµ 
Anim
µµ 
.
µµ 
Quint
µµ 
.
µµ 
Out
µµ !
(
µµ! "
clearInkAlpha
µµ" /
,
µµ/ 0
$num
µµ1 3
,
µµ3 4
animDeltaTime
µµ5 B
,
µµB C
$num
µµD E
/
µµF G
animationSpeed
µµH V
)
µµV W
;
µµW X
	thisImage
∂∂ 
.
∂∂ 
color
∂∂ 
=
∂∂ 
	tempColor
∂∂  
;
∂∂  !
if
ππ 
(
ππ 	
moveTowardCenter
ππ	 
)
ππ 
{
∫∫ 
Vector3
ªª 
tempVec3
ªª 
=
ªª 
thisRect
ªª !
.
ªª! "
position
ªª" *
;
ªª* +
tempVec3
ºº 
.
ºº 
x
ºº 
=
ºº 
Anim
ºº 
.
ºº 
Quint
ºº 
.
ºº 
Out
ºº !
(
ºº! "
startPos
ºº" *
.
ºº* +
x
ºº+ ,
,
ºº, -
endPos
ºº. 4
.
ºº4 5
x
ºº5 6
,
ºº6 7 
animFirstDeltaTime
ºº8 J
,
ººJ K
$num
ººL M
/
ººN O
animationSpeed
ººP ^
)
ºº^ _
;
ºº_ `
tempVec3
ΩΩ 
.
ΩΩ 
y
ΩΩ 
=
ΩΩ 
Anim
ΩΩ 
.
ΩΩ 
Quint
ΩΩ 
.
ΩΩ 
Out
ΩΩ !
(
ΩΩ! "
startPos
ΩΩ" *
.
ΩΩ* +
y
ΩΩ+ ,
,
ΩΩ, -
endPos
ΩΩ. 4
.
ΩΩ4 5
y
ΩΩ5 6
,
ΩΩ6 7 
animFirstDeltaTime
ΩΩ8 J
,
ΩΩJ K
$num
ΩΩL M
/
ΩΩN O
animationSpeed
ΩΩP ^
)
ΩΩ^ _
;
ΩΩ_ `
thisRect
ææ 
.
ææ 
position
ææ 
=
ææ 
tempVec3
ææ "
;
ææ" #
}
øø 
}
¿¿ 
else
¡¡ 
{
¬¬ 
Destroy
√√ 
(
√√ 

gameObject
√√ 
)
√√ 
;
√√ 
}
ƒƒ 
}
≈≈ 
}
∆∆ 
}
«« 
}»» ⁄
EF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ScreenManager.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
ScreenManager 
: 
MonoBehaviour +
{ 
public 
ScreenConfig	 
[ 
] 
screens 
;  
[ 
HideInInspector 
] 
public 
ScreenConfig	 
currentScreen #
;# $
[ 
HideInInspector 
] 
public 
ScreenConfig	 

lastScreen  
;  !
public 
void	 
Set 
( 
int 
index 
) 
{ 
screens 

[
 
index 
] 
. 
	transform 
. 
SetAsLastSibling ,
(, -
)- .
;. /
screens 

[
 
index 
] 
. 
Show 
( 
currentScreen $
)$ %
;% &

lastScreen 
= 
currentScreen 
; 
currentScreen 
= 
screens 
[ 
index  
]  !
;! "
} 
public!! 
void!!	 
Set!! 
(!! 
string!! 
name!! 
)!! 
{"" 
for## 
(## 
int## 
i## 
=## 
$num## 
;## 
i## 
<## 
screens## 
.## 
Length## %
;##% &
i##' (
++##( *
)##* +
{$$ 
if%% 
(%% 
screens%% 
[%% 
i%% 
]%% 
.%% 

screenName%% 
==%%  
name%%! %
)%%% &
{&& 
Set'' 
('' 	
i''	 

)''
 
;'' 
return(( 
;(( 
})) 
}** 
}++ 
public-- 
void--	 
Back-- 
(-- 
)-- 
{.. 

lastScreen// 
.// !
ShowWithoutTransition// #
(//# $
)//$ %
;//% &
currentScreen00 
.00 
Hide00 
(00 
)00 
;00 
ScreenConfig11 
temp11 
=11 
currentScreen11 $
;11$ %
currentScreen22 
=22 

lastScreen22 
;22 

lastScreen33 
=33 
temp33 
;33 
}44 
}55 
}66 ‰
EF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SpriteSwapper.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 

class 
SpriteSwapper 
:  
MonoBehaviour! .
{ 
public 
Sprite	 
sprite1x 
; 
public 
Sprite 
sprite2x 
; 
public 
Sprite 
sprite4x 
; 
private 
float 
scaleFactor !
;! "
private 
Image 
	thisImage 
;  
private 	
MaterialUIScaler
 
scaler !
;! "
void 	
Update
 
( 
) 
{ 
if   
(  	 

!  
 
	thisImage   
)   
{!! 
	thisImage"" 
="" 

gameObject"" 
."" 
GetComponent"" *
<""* +
Image""+ 0
>""0 1
(""1 2
)""2 3
;""3 4
}## 
if%% 
(%%	 

!%%
 
scaler%% 
)%% 
{&& 
scaler'' 
='' 

gameObject'' 
.''  
GetComponentInParent'' /
<''/ 0
Canvas''0 6
>''6 7
(''7 8
)''8 9
.''9 :
GetComponent'': F
<''F G
MaterialUIScaler''G W
>''W X
(''X Y
)''Y Z
;''Z [
}(( 
else)) 

{** 
if++ 
(++ 
scaleFactor++ 
!=++ 
scaler++ 
.++ 
scaleFactor++ )
)++) *
{,, 
scaleFactor-- 
=-- 
scaler-- 
.-- 
scaleFactor-- %
;--% &
if// 

(// 
scaleFactor// 
>// 
$num// 
&&// 
sprite4x//  (
)//( )
	thisImage00	 
.00 
sprite00 
=00 
sprite4x00 $
;00$ %
else11 
if11 
(11 
scaleFactor11 
>11 
$num11 !
&&11" $
sprite2x11% -
)11- .
	thisImage22	 
.22 
sprite22 
=22 
sprite2x22 $
;22$ %
else33 
	thisImage44	 
.44 
sprite44 
=44 
sprite1x44 $
;44$ %
}55 
}66 
}77 	
}88 
}99 ‹≥
FF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\CheckboxConfig.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 
class 
CheckboxConfig 
: 
MonoBehaviour ,
{ 
[ 
HideInInspector 
] 
public 
float	 
animationDuration  
=! "
$num# '
;' (
[ 
HideInInspector 
] 
public 
Color	 
onColor 
; 
[ 
HideInInspector 
] 
public 
Color	 
offColor 
; 
[ 
HideInInspector 
] 
public 
Color	 
disabledColor 
; 
[ 
HideInInspector 
] 
public 
bool	 
changeTextColor 
; 
[   
HideInInspector   
]   
public!! 
Color!!	 
textNormalColor!! 
;!! 
["" 
HideInInspector"" 
]"" 
public## 
Color##	 
textDisabledColor##  
;##  !
[%% 
HideInInspector%% 
]%% 
public&& 
bool&&	 
changeRippleColor&& 
;&&  
[)) 
HideInInspector)) 
])) 
[** 
SerializeField** 
]** 
private** 
Image**  

checkImage**! +
;**+ ,
[++ 
HideInInspector++ 
]++ 
[,, 
SerializeField,, 
],, 
private,, 
Image,,  

frameImage,,! +
;,,+ ,
[-- 
HideInInspector-- 
]-- 
[.. 
SerializeField.. 
].. 
private.. 
Text.. 
text..  $
;..$ %
private00 	
RectTransform00
 
checkRectTransform00 *
;00* +
private11 	
CanvasGroup11
 
frameCanvasGroup11 &
;11& '
private22 	
CheckBoxToggler22
 
checkBoxToggler22 )
;22) *
private33 	
RippleConfig33
 
rippleConfig33 #
;33# $
Toggle55 
toggle55	 
;55 
private77 	
bool77
 '
lastToggleInteractableState77 *
;77* +
private88 	
bool88
 
lastToggleState88 
;88 
private:: 	
float::
 
currentCheckSize::  
;::  !
private;; 	
Color;;
 
currentColor;; 
;;; 
private<< 	
Color<<
 
currentTextColor<<  
;<<  !
private== 	
float==
 
currentFrameAlpha== !
;==! "
private?? 	
Vector3??
 
tempVector3?? 
;?? 
private@@ 	
Color@@
 
	tempColor@@ 
;@@ 
privateBB 	
intBB
 
stateBB 
;BB 
privateCC 	
floatCC
 
animStartTimeCC 
;CC 
privateDD 	
floatDD
 
animDeltaTimeDD 
;DD 
voidFF 
OnEnableFF 
(FF 
)FF 
{GG 
toggleII 	
=II
 

gameObjectII 
.II 
GetComponentII #
<II# $
ToggleII$ *
>II* +
(II+ ,
)II, -
;II- .
checkRectTransformJJ 
=JJ 

checkImageJJ "
.JJ" #
GetComponentJJ# /
<JJ/ 0
RectTransformJJ0 =
>JJ= >
(JJ> ?
)JJ? @
;JJ@ A
frameCanvasGroupKK 
=KK 

frameImageKK  
.KK  !
GetComponentKK! -
<KK- .
CanvasGroupKK. 9
>KK9 :
(KK: ;
)KK; <
;KK< =
checkBoxTogglerLL 
=LL 
textLL 
.LL 
GetComponentLL &
<LL& '
CheckBoxTogglerLL' 6
>LL6 7
(LL7 8
)LL8 9
;LL9 :
rippleConfigMM 
=MM 

gameObjectMM 
.MM 
GetComponentMM )
<MM) *
RippleConfigMM* 6
>MM6 7
(MM7 8
)MM8 9
;MM9 :
}NN 
voidPP 
StartPP 
(PP 
)PP 
{QQ '
lastToggleInteractableStateRR 
=RR  
toggleRR! '
.RR' (
interactableRR( 4
;RR4 5
ifTT 
(TT '
lastToggleInteractableStateTT "
)TT" #
{UU 
ifVV 
(VV 
lastToggleStateVV 
!=VV 
toggleVV !
.VV! "
isOnVV" &
)VV& '
{WW 
lastToggleStateXX 
=XX 
toggleXX 
.XX 
isOnXX "
;XX" #
ifZZ 
(ZZ 	
lastToggleStateZZ	 
)ZZ 
TurnOnSilent[[ 
([[ 
)[[ 
;[[ 
else\\ 	
TurnOffSilent]] 
(]] 
)]] 
;]] 
}^^ 
}__ 
ifaa 
(aa 
changeRippleColoraa 
)aa 
rippleConfigbb 
.bb 
rippleColorbb 
=bb 

frameImagebb )
.bb) *
colorbb* /
;bb/ 0
}cc 
publicee 
voidee	 
ToggleCheckboxee 
(ee 
)ee 
{ff 
ifgg 
(gg 
togglegg 
.gg 
isOngg 
)gg 
TurnOnhh 

(hh 
)hh 
;hh 
elseii 
TurnOffjj 
(jj 
)jj 
;jj 
}kk 
publicmm 
voidmm	 
TurnOnmm 
(mm 
)mm 
{nn 

checkImageoo 
.oo 
enabledoo 
=oo 
trueoo 
;oo 
currentCheckSizeqq 
=qq 
checkRectTransformqq (
.qq( )

localScaleqq) 3
.qq3 4
xqq4 5
;qq5 6
currentColorrr 
=rr 

frameImagerr 
.rr 
colorrr "
;rr" #
currentTextColorss 
=ss 
textss 
.ss 
colorss  
;ss  !
currentFrameAlphatt 
=tt 
frameCanvasGrouptt '
.tt' (
alphatt( -
;tt- .
animStartTimevv 
=vv 
Timevv 
.vv  
realtimeSinceStartupvv ,
;vv, -
stateww 
=ww	 

$numww 
;ww 
}xx 
privatezz 	
voidzz
 
TurnOnSilentzz 
(zz 
)zz 
{{{ 

checkImage|| 
.|| 
enabled|| 
=|| 
true|| 
;|| 
if}} 
(}} 
checkRectTransform}} 
.}} 

localScale}} $
!=}}% '
new}}( +
Vector3}}, 3
(}}3 4
$num}}4 6
,}}6 7
$num}}8 :
,}}: ;
$num}}< >
)}}> ?
)}}? @
checkRectTransform~~ 
.~~ 

localScale~~ !
=~~" #
new~~$ '
Vector3~~( /
(~~/ 0
$num~~0 2
,~~2 3
$num~~4 6
,~~6 7
$num~~8 :
)~~: ;
;~~; <
frameCanvasGroup
ÄÄ 
.
ÄÄ 
alpha
ÄÄ 
=
ÄÄ 
$num
ÄÄ 
;
ÄÄ 
if
ÇÇ 
(
ÇÇ )
lastToggleInteractableState
ÇÇ "
)
ÇÇ" #
{
ÉÉ 

frameImage
ÖÖ 
.
ÖÖ 
color
ÖÖ 
=
ÖÖ 
onColor
ÖÖ 
;
ÖÖ 
if
ÜÜ 
(
ÜÜ 
changeTextColor
ÜÜ 
)
ÜÜ 
text
áá 	
.
áá	 

color
áá
 
=
áá 
onColor
áá 
;
áá 
if
ââ 
(
ââ 
changeRippleColor
ââ 
)
ââ 
rippleConfig
ää 
.
ää 
rippleColor
ää 
=
ää 
onColor
ää  '
;
ää' (
}
ãã 

frameImage
çç 
.
çç 
enabled
çç 
=
çç 
false
çç 
;
çç 
}
éé 
public
êê 
void
êê	 
TurnOff
êê 
(
êê 
)
êê 
{
ëë 

frameImage
íí 
.
íí 
enabled
íí 
=
íí 
true
íí 
;
íí 
currentCheckSize
îî 
=
îî  
checkRectTransform
îî (
.
îî( )

localScale
îî) 3
.
îî3 4
x
îî4 5
;
îî5 6
currentColor
ïï 
=
ïï 

frameImage
ïï 
.
ïï 
color
ïï "
;
ïï" #
currentTextColor
ññ 
=
ññ 
text
ññ 
.
ññ 
color
ññ  
;
ññ  !
currentFrameAlpha
óó 
=
óó 
frameCanvasGroup
óó '
.
óó' (
alpha
óó( -
;
óó- .
animStartTime
ôô 
=
ôô 
Time
ôô 
.
ôô "
realtimeSinceStartup
ôô ,
;
ôô, -
state
öö 
=
öö	 

$num
öö 
;
öö 
}
õõ 
private
ùù 	
void
ùù
 
TurnOffSilent
ùù 
(
ùù 
)
ùù 
{
ûû 

frameImage
üü 
.
üü 
enabled
üü 
=
üü 
true
üü 
;
üü 
if
†† 
(
††  
checkRectTransform
†† 
.
†† 

localScale
†† $
!=
††% '
new
††( +
Vector3
††, 3
(
††3 4
$num
††4 6
,
††6 7
$num
††8 :
,
††: ;
$num
††< >
)
††> ?
)
††? @ 
checkRectTransform
°° 
.
°° 

localScale
°° !
=
°°" #
new
°°$ '
Vector3
°°( /
(
°°/ 0
$num
°°0 2
,
°°2 3
$num
°°4 6
,
°°6 7
$num
°°8 :
)
°°: ;
;
°°; <
frameCanvasGroup
££ 
.
££ 
alpha
££ 
=
££ 
$num
££ 
;
££ 
if
•• 
(
•• )
lastToggleInteractableState
•• "
)
••" #
{
¶¶ 

frameImage
ßß 
.
ßß 
color
ßß 
=
ßß 
offColor
ßß 
;
ßß  
if
®® 
(
®® 
changeTextColor
®® 
)
®® 
text
©© 	
.
©©	 

color
©©
 
=
©© 
textNormalColor
©© !
;
©©! "
if
´´ 
(
´´ 
changeRippleColor
´´ 
)
´´ 
rippleConfig
¨¨ 
.
¨¨ 
rippleColor
¨¨ 
=
¨¨ 
offColor
¨¨  (
;
¨¨( )
}
≠≠ 

checkImage
ØØ 
.
ØØ 
enabled
ØØ 
=
ØØ 
false
ØØ 
;
ØØ 
}
∞∞ 
private
≤≤ 	
void
≤≤
 
EnableCheckbox
≤≤ 
(
≤≤ 
)
≤≤ 
{
≥≥ 
if
¥¥ 
(
¥¥ 
toggle
¥¥ 
.
¥¥ 
isOn
¥¥ 
)
¥¥ 
{
µµ 

frameImage
∂∂ 
.
∂∂ 
color
∂∂ 
=
∂∂ 
onColor
∂∂ 
;
∂∂ 
if
∑∑ 
(
∑∑ 
changeTextColor
∑∑ 
)
∑∑ 
text
∏∏ 	
.
∏∏	 

color
∏∏
 
=
∏∏ 
onColor
∏∏ 
;
∏∏ 
else
ππ 
text
∫∫ 	
.
∫∫	 

color
∫∫
 
=
∫∫ 
textNormalColor
∫∫ !
;
∫∫! "
}
ªª 
else
ºº 
{
ΩΩ 

frameImage
ææ 
.
ææ 
color
ææ 
=
ææ 
offColor
ææ 
;
ææ  
text
øø 
.
øø 	
color
øø	 
=
øø 
textNormalColor
øø  
;
øø  !
}
¿¿ 
checkBoxToggler
¬¬ 
.
¬¬ 
enabled
¬¬ 
=
¬¬ 
true
¬¬ !
;
¬¬! "
rippleConfig
√√ 
.
√√ 
enabled
√√ 
=
√√ 
true
√√ 
;
√√ 
}
ƒƒ 
private
∆∆ 	
void
∆∆
 
DisableCheckbox
∆∆ 
(
∆∆ 
)
∆∆  
{
«« 

frameImage
»» 
.
»» 
color
»» 
=
»» 
disabledColor
»» #
;
»»# $
text
…… 
.
…… 
color
…… 
=
…… 
disabledColor
…… 
;
…… 
checkBoxToggler
ÀÀ 
.
ÀÀ 
enabled
ÀÀ 
=
ÀÀ 
false
ÀÀ "
;
ÀÀ" #
rippleConfig
ÃÃ 
.
ÃÃ 
enabled
ÃÃ 
=
ÃÃ 
false
ÃÃ 
;
ÃÃ  
}
ÕÕ 
void
œœ 
Update
œœ 
(
œœ 
)
œœ 
{
–– 
animDeltaTime
—— 
=
—— 
Time
—— 
.
—— "
realtimeSinceStartup
—— ,
-
——- .
animStartTime
——/ <
;
——< =
if
”” 
(
”” 
state
”” 
==
”” 
$num
”” 
)
”” 
{
‘‘ 
if
’’ 
(
’’ 
animDeltaTime
’’ 
<=
’’ 
animationDuration
’’ *
)
’’* +
{
÷÷  
checkRectTransform
◊◊ 
.
◊◊ 

localScale
◊◊ "
=
◊◊# $
Anim
◊◊% )
.
◊◊) *
	Overshoot
◊◊* 3
(
◊◊3 4
new
◊◊4 7
Vector3
◊◊8 ?
(
◊◊? @
currentCheckSize
◊◊@ P
,
◊◊P Q
currentCheckSize
◊◊R b
,
◊◊b c
$num
◊◊d f
)
◊◊f g
,
◊◊g h
new
◊◊i l
Vector3
◊◊m t
(
◊◊t u
$num
◊◊u w
,
◊◊w x
$num
◊◊y {
,
◊◊{ |
$num
◊◊} 
)◊◊ Ä
,◊◊Ä Å
animDeltaTime◊◊Ç è
,◊◊è ê!
animationDuration◊◊ë ¢
)◊◊¢ £
;◊◊£ §

frameImage
ÿÿ 
.
ÿÿ 
color
ÿÿ 
=
ÿÿ 
Anim
ÿÿ 
.
ÿÿ 
Quint
ÿÿ "
.
ÿÿ" #
SoftOut
ÿÿ# *
(
ÿÿ* +
currentColor
ÿÿ+ 7
,
ÿÿ7 8
onColor
ÿÿ9 @
,
ÿÿ@ A
animDeltaTime
ÿÿB O
,
ÿÿO P
animationDuration
ÿÿQ b
)
ÿÿb c
;
ÿÿc d
frameCanvasGroup
ŸŸ 
.
ŸŸ 
alpha
ŸŸ 
=
ŸŸ 
Anim
ŸŸ "
.
ŸŸ" #
Cube
ŸŸ# '
.
ŸŸ' (
SoftOut
ŸŸ( /
(
ŸŸ/ 0
currentFrameAlpha
ŸŸ0 A
,
ŸŸA B
$num
ŸŸC E
,
ŸŸE F
animDeltaTime
ŸŸG T
,
ŸŸT U
animationDuration
ŸŸV g
)
ŸŸg h
;
ŸŸh i
if
€€ 
(
€€ 	
changeTextColor
€€	 
)
€€ 
text
‹‹ 

.
‹‹
 
color
‹‹ 
=
‹‹ 
Anim
‹‹ 
.
‹‹ 
Quint
‹‹ 
.
‹‹ 
SoftOut
‹‹ %
(
‹‹% &
currentTextColor
‹‹& 6
,
‹‹6 7
onColor
‹‹8 ?
,
‹‹? @
animDeltaTime
‹‹A N
,
‹‹N O
animationDuration
‹‹P a
)
‹‹a b
;
‹‹b c
if
ﬁﬁ 
(
ﬁﬁ 	
changeRippleColor
ﬁﬁ	 
)
ﬁﬁ 
rippleConfig
ﬂﬂ 
.
ﬂﬂ 
rippleColor
ﬂﬂ 
=
ﬂﬂ  

frameImage
ﬂﬂ! +
.
ﬂﬂ+ ,
color
ﬂﬂ, 1
;
ﬂﬂ1 2
}
‡‡ 
else
·· 
{
‚‚  
checkRectTransform
„„ 
.
„„ 

localScale
„„ "
=
„„# $
new
„„% (
Vector3
„„) 0
(
„„0 1
$num
„„1 3
,
„„3 4
$num
„„5 7
,
„„7 8
$num
„„9 ;
)
„„; <
;
„„< =

frameImage
‰‰ 
.
‰‰ 
color
‰‰ 
=
‰‰ 
onColor
‰‰ 
;
‰‰  
frameCanvasGroup
ÂÂ 
.
ÂÂ 
alpha
ÂÂ 
=
ÂÂ 
$num
ÂÂ  
;
ÂÂ  !
if
ÁÁ 
(
ÁÁ 	
changeTextColor
ÁÁ	 
)
ÁÁ 
text
ËË 

.
ËË
 
color
ËË 
=
ËË 
onColor
ËË 
;
ËË 
if
ÍÍ 
(
ÍÍ 	
changeRippleColor
ÍÍ	 
)
ÍÍ 
rippleConfig
ÎÎ 
.
ÎÎ 
rippleColor
ÎÎ 
=
ÎÎ  
onColor
ÎÎ! (
;
ÎÎ( )

frameImage
ÌÌ 
.
ÌÌ 
enabled
ÌÌ 
=
ÌÌ 
false
ÌÌ 
;
ÌÌ  
state
ÓÓ 

=
ÓÓ 
$num
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}
 
else
ÒÒ 
if
ÒÒ 

(
ÒÒ 
state
ÒÒ 
==
ÒÒ 
$num
ÒÒ 
)
ÒÒ 
{
ÚÚ 
if
ÛÛ 
(
ÛÛ 
animDeltaTime
ÛÛ 
<=
ÛÛ 
animationDuration
ÛÛ *
*
ÛÛ+ ,
$num
ÛÛ- 2
)
ÛÛ2 3
{
ÙÙ  
checkRectTransform
ıı 
.
ıı 

localScale
ıı "
=
ıı# $
Anim
ıı% )
.
ıı) *
Sept
ıı* .
.
ıı. /
InOut
ıı/ 4
(
ıı4 5
new
ıı5 8
Vector3
ıı9 @
(
ıı@ A
currentCheckSize
ııA Q
,
ııQ R
currentCheckSize
ııS c
,
ııc d
$num
ııe g
)
ııg h
,
ııh i
new
ııj m
Vector3
ıın u
(
ııu v
$num
ııv x
,
ııx y
$num
ıız |
,
ıı| }
$numıı~ Ä
)ııÄ Å
,ııÅ Ç
animDeltaTimeııÉ ê
,ııê ë!
animationDurationııí £
*ıı§ •
$numıı¶ ´
)ıı´ ¨
;ıı¨ ≠

frameImage
ˆˆ 
.
ˆˆ 
color
ˆˆ 
=
ˆˆ 
Anim
ˆˆ 
.
ˆˆ 
Sept
ˆˆ !
.
ˆˆ! "
InOut
ˆˆ" '
(
ˆˆ' (
currentColor
ˆˆ( 4
,
ˆˆ4 5
offColor
ˆˆ6 >
,
ˆˆ> ?
animDeltaTime
ˆˆ@ M
,
ˆˆM N
animationDuration
ˆˆO `
*
ˆˆa b
$num
ˆˆc h
)
ˆˆh i
;
ˆˆi j
frameCanvasGroup
˜˜ 
.
˜˜ 
alpha
˜˜ 
=
˜˜ 
Anim
˜˜ "
.
˜˜" #
Sept
˜˜# '
.
˜˜' (
InOut
˜˜( -
(
˜˜- .
currentFrameAlpha
˜˜. ?
,
˜˜? @
$num
˜˜A C
,
˜˜C D
animDeltaTime
˜˜E R
,
˜˜R S
animationDuration
˜˜T e
*
˜˜f g
$num
˜˜h m
)
˜˜m n
;
˜˜n o
if
˘˘ 
(
˘˘ 	
changeTextColor
˘˘	 
)
˘˘ 
text
˙˙ 

.
˙˙
 
color
˙˙ 
=
˙˙ 
Anim
˙˙ 
.
˙˙ 
Quint
˙˙ 
.
˙˙ 
SoftOut
˙˙ %
(
˙˙% &
currentTextColor
˙˙& 6
,
˙˙6 7
textNormalColor
˙˙8 G
,
˙˙G H
animDeltaTime
˙˙I V
,
˙˙V W
animationDuration
˙˙X i
*
˙˙j k
$num
˙˙l q
)
˙˙q r
;
˙˙r s
if
¸¸ 
(
¸¸ 	
changeRippleColor
¸¸	 
)
¸¸ 
rippleConfig
˝˝ 
.
˝˝ 
rippleColor
˝˝ 
=
˝˝  

frameImage
˝˝! +
.
˝˝+ ,
color
˝˝, 1
;
˝˝1 2
}
˛˛ 
else
ˇˇ 
{
ÄÄ  
checkRectTransform
ÅÅ 
.
ÅÅ 

localScale
ÅÅ "
=
ÅÅ# $
new
ÅÅ% (
Vector3
ÅÅ) 0
(
ÅÅ0 1
$num
ÅÅ1 3
,
ÅÅ3 4
$num
ÅÅ5 7
,
ÅÅ7 8
$num
ÅÅ9 ;
)
ÅÅ; <
;
ÅÅ< =

frameImage
ÇÇ 
.
ÇÇ 
color
ÇÇ 
=
ÇÇ 
offColor
ÇÇ  
;
ÇÇ  !
frameCanvasGroup
ÉÉ 
.
ÉÉ 
alpha
ÉÉ 
=
ÉÉ 
$num
ÉÉ  
;
ÉÉ  !
if
ÖÖ 
(
ÖÖ 	
changeTextColor
ÖÖ	 
)
ÖÖ 
text
ÜÜ 

.
ÜÜ
 
color
ÜÜ 
=
ÜÜ 
textNormalColor
ÜÜ "
;
ÜÜ" #
if
àà 
(
àà 	
changeRippleColor
àà	 
)
àà 
rippleConfig
ââ 
.
ââ 
rippleColor
ââ 
=
ââ  
offColor
ââ! )
;
ââ) *

checkImage
ãã 
.
ãã 
enabled
ãã 
=
ãã 
false
ãã 
;
ãã  
state
åå 

=
åå 
$num
åå 
;
åå 
}
çç 
}
éé 
if
êê 
(
êê )
lastToggleInteractableState
êê "
!=
êê# %
toggle
êê& ,
.
êê, -
interactable
êê- 9
)
êê9 :
{
ëë )
lastToggleInteractableState
íí 
=
íí  !
toggle
íí" (
.
íí( )
interactable
íí) 5
;
íí5 6
if
îî 
(
îî )
lastToggleInteractableState
îî #
)
îî# $
EnableCheckbox
ïï 
(
ïï 
)
ïï 
;
ïï 
else
ññ 
DisableCheckbox
óó 
(
óó 
)
óó 
;
óó 
}
òò 
if
öö 
(
öö 
!
öö 
Application
öö 
.
öö 
	isPlaying
öö 
)
öö 
{
õõ 
if
úú 
(
úú 
lastToggleState
úú 
!=
úú 
toggle
úú !
.
úú! "
isOn
úú" &
)
úú& '
{
ùù 
lastToggleState
ûû 
=
ûû 
toggle
ûû 
.
ûû 
isOn
ûû "
;
ûû" #
if
†† 
(
†† 	
lastToggleState
††	 
)
†† 
TurnOnSilent
°° 
(
°° 
)
°° 
;
°° 
else
¢¢ 	
TurnOffSilent
££ 
(
££ 
)
££ 
;
££ 
}
§§ 
if
¶¶ 
(
¶¶ 
changeRippleColor
¶¶ 
)
¶¶ 
rippleConfig
ßß 
.
ßß 
rippleColor
ßß 
=
ßß 

frameImage
ßß  *
.
ßß* +
color
ßß+ 0
;
ßß0 1
}
®® 
}
©© 
}
™™ 
}´´ —î
<F:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\Anim.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
Anim 
: 
MonoBehaviour "
{ 
public 
static	 
float 
Linear 
( 
float "

startValue# -
,- .
float/ 4
endValue5 =
,= >
float? D
timeE I
,I J
floatK P
durationQ Y
)Y Z
{ 
float 
differenceValue	 
= 
endValue #
-$ %

startValue& 0
;0 1
time 
= 	
Mathf
 
. 
Clamp 
( 
time 
, 
$num 
, 
duration  (
)( )
;) *
time 
/= 

duration 
; 
if 
( 
time 
== 
$num 
) 
return 


startValue 
; 
if 
( 
time 
== 
$num 
) 
return 

endValue 
; 
return 	
differenceValue
 
* 
time  
+! "

startValue# -
;- .
} 
public   
static  	 
Vector2   
Linear   
(   
Vector2   &

startValue  ' 1
,  1 2
Vector2  3 :
endValue  ; C
,  C D
float  E J
time  K O
,  O P
float  Q V
duration  W _
)  _ `
{!! 
Vector2"" 

tempVector2"" 
="" 

startValue"" #
;""# $
tempVector2## 
.## 
x## 
=## 
Linear## 
(## 

startValue## $
.##$ %
x##% &
,##& '
endValue##( 0
.##0 1
x##1 2
,##2 3
time##4 8
,##8 9
duration##: B
)##B C
;##C D
tempVector2$$ 
.$$ 
y$$ 
=$$ 
Linear$$ 
($$ 

startValue$$ $
.$$$ %
y$$% &
,$$& '
endValue$$( 0
.$$0 1
y$$1 2
,$$2 3
time$$4 8
,$$8 9
duration$$: B
)$$B C
;$$C D
return%% 	
tempVector2%%
 
;%% 
}&& 
public(( 
static((	 
Vector3(( 
Linear(( 
((( 
Vector3(( &

startValue((' 1
,((1 2
Vector3((3 :
endValue((; C
,((C D
float((E J
time((K O
,((O P
float((Q V
duration((W _
)((_ `
{)) 
Vector3** 

tempVector3** 
=** 

startValue** #
;**# $
tempVector3++ 
.++ 
x++ 
=++ 
Linear++ 
(++ 

startValue++ $
.++$ %
x++% &
,++& '
endValue++( 0
.++0 1
x++1 2
,++2 3
time++4 8
,++8 9
duration++: B
)++B C
;++C D
tempVector3,, 
.,, 
y,, 
=,, 
Linear,, 
(,, 

startValue,, $
.,,$ %
y,,% &
,,,& '
endValue,,( 0
.,,0 1
y,,1 2
,,,2 3
time,,4 8
,,,8 9
duration,,: B
),,B C
;,,C D
tempVector3-- 
.-- 
z-- 
=-- 
Linear-- 
(-- 

startValue-- $
.--$ %
z--% &
,--& '
endValue--( 0
.--0 1
z--1 2
,--2 3
time--4 8
,--8 9
duration--: B
)--B C
;--C D
return.. 	
tempVector3..
 
;.. 
}// 
public11 
static11	 
Color11 
Linear11 
(11 
Color11 "

startValue11# -
,11- .
Color11/ 4
endValue115 =
,11= >
float11? D
time11E I
,11I J
float11K P
duration11Q Y
)11Y Z
{22 
Color33 
	tempColor33	 
=33 

startValue33 
;33  
	tempColor44 
.44 
r44 
=44 
Linear44 
(44 

startValue44 "
.44" #
r44# $
,44$ %
endValue44& .
.44. /
r44/ 0
,440 1
time442 6
,446 7
duration448 @
)44@ A
;44A B
	tempColor55 
.55 
g55 
=55 
Linear55 
(55 

startValue55 "
.55" #
g55# $
,55$ %
endValue55& .
.55. /
g55/ 0
,550 1
time552 6
,556 7
duration558 @
)55@ A
;55A B
	tempColor66 
.66 
b66 
=66 
Linear66 
(66 

startValue66 "
.66" #
b66# $
,66$ %
endValue66& .
.66. /
b66/ 0
,660 1
time662 6
,666 7
duration668 @
)66@ A
;66A B
	tempColor77 
.77 
a77 
=77 
Linear77 
(77 

startValue77 "
.77" #
a77# $
,77$ %
endValue77& .
.77. /
a77/ 0
,770 1
time772 6
,776 7
duration778 @
)77@ A
;77A B
return88 	
	tempColor88
 
;88 
}99 
public<< 
static<<	 
float<< 
Sin<< 
(<< 
float<< 

startValue<<  *
,<<* +
float<<, 1
	amplitude<<2 ;
,<<; <
float<<= B
time<<C G
,<<G H
float<<I N
duration<<O W
)<<W X
{== 
time>> 
/=>> 

duration>> 
;>> 
return?? 	
Mathf??
 
.?? 
Cos?? 
(?? 
Mathf?? 
.?? 
PI?? 
*?? 
time?? #
)??# $
*??% &
	amplitude??' 0
+??1 2

startValue??3 =
;??= >
}@@ 
publicBB 
staticBB	 
Vector2BB 
SinBB 
(BB 
Vector2BB #

startValueBB$ .
,BB. /
Vector2BB0 7
endValueBB8 @
,BB@ A
floatBBB G
timeBBH L
,BBL M
floatBBN S
durationBBT \
)BB\ ]
{CC 
Vector2DD 

tempVector2DD 
=DD 

startValueDD #
;DD# $
tempVector2EE 
.EE 
xEE 
=EE 
SinEE 
(EE 

startValueEE !
.EE! "
xEE" #
,EE# $
endValueEE% -
.EE- .
xEE. /
,EE/ 0
timeEE1 5
,EE5 6
durationEE7 ?
)EE? @
;EE@ A
tempVector2FF 
.FF 
yFF 
=FF 
SinFF 
(FF 

startValueFF !
.FF! "
yFF" #
,FF# $
endValueFF% -
.FF- .
yFF. /
,FF/ 0
timeFF1 5
,FF5 6
durationFF7 ?
)FF? @
;FF@ A
returnGG 	
tempVector2GG
 
;GG 
}HH 
publicJJ 
staticJJ	 
Vector3JJ 
SinJJ 
(JJ 
Vector3JJ #

startValueJJ$ .
,JJ. /
Vector3JJ0 7
	amplitudeJJ8 A
,JJA B
floatJJC H
timeJJI M
,JJM N
floatJJO T
durationJJU ]
)JJ] ^
{KK 
Vector3LL 

tempVector3LL 
=LL 

startValueLL #
;LL# $
tempVector3MM 
.MM 
xMM 
=MM 
SinMM 
(MM 

startValueMM !
.MM! "
xMM" #
,MM# $
	amplitudeMM% .
.MM. /
xMM/ 0
,MM0 1
timeMM2 6
,MM6 7
durationMM8 @
)MM@ A
;MMA B
tempVector3NN 
.NN 
yNN 
=NN 
SinNN 
(NN 

startValueNN !
.NN! "
yNN" #
,NN# $
	amplitudeNN% .
.NN. /
yNN/ 0
,NN0 1
timeNN2 6
,NN6 7
durationNN8 @
)NN@ A
;NNA B
tempVector3OO 
.OO 
zOO 
=OO 
SinOO 
(OO 

startValueOO !
.OO! "
zOO" #
,OO# $
	amplitudeOO% .
.OO. /
zOO/ 0
,OO0 1
timeOO2 6
,OO6 7
durationOO8 @
)OO@ A
;OOA B
returnPP 	
tempVector3PP
 
;PP 
}QQ 
publicSS 
staticSS	 
ColorSS 
SinSS 
(SS 
ColorSS 

startValueSS  *
,SS* +
ColorSS, 1
	amplitudeSS2 ;
,SS; <
floatSS= B
timeSSC G
,SSG H
floatSSI N
durationSSO W
)SSW X
{TT 
ColorUU 
	tempColorUU	 
=UU 

startValueUU 
;UU  
	tempColorVV 
.VV 
rVV 
=VV 
SinVV 
(VV 

startValueVV 
.VV  
rVV  !
,VV! "
	amplitudeVV# ,
.VV, -
rVV- .
,VV. /
timeVV0 4
,VV4 5
durationVV6 >
)VV> ?
;VV? @
	tempColorWW 
.WW 
gWW 
=WW 
SinWW 
(WW 

startValueWW 
.WW  
gWW  !
,WW! "
	amplitudeWW# ,
.WW, -
gWW- .
,WW. /
timeWW0 4
,WW4 5
durationWW6 >
)WW> ?
;WW? @
	tempColorXX 
.XX 
bXX 
=XX 
SinXX 
(XX 

startValueXX 
.XX  
bXX  !
,XX! "
	amplitudeXX# ,
.XX, -
bXX- .
,XX. /
timeXX0 4
,XX4 5
durationXX6 >
)XX> ?
;XX? @
	tempColorYY 
.YY 
aYY 
=YY 
SinYY 
(YY 

startValueYY 
.YY  
aYY  !
,YY! "
	amplitudeYY# ,
.YY, -
aYY- .
,YY. /
timeYY0 4
,YY4 5
durationYY6 >
)YY> ?
;YY? @
returnZZ 	
	tempColorZZ
 
;ZZ 
}[[ 
public^^ 
static^^	 
float^^ 
	Overshoot^^ 
(^^  
float^^  %

startValue^^& 0
,^^0 1
float^^2 7
endValue^^8 @
,^^@ A
float^^B G
time^^H L
,^^L M
float^^N S
duration^^T \
)^^\ ]
{__ 
float`` 
differenceValue``	 
=`` 
endValue`` #
-``$ %

startValue``& 0
;``0 1
timeaa 
=aa 	
Mathfaa
 
.aa 
Clampaa 
(aa 
timeaa 
,aa 
$numaa 
,aa 
durationaa  (
)aa( )
;aa) *
timebb 
/=bb 

durationbb 
;bb 
ifdd 
(dd 
timedd 
==dd 
$numdd 
)dd 
returnee 


startValueee 
;ee 
ifff 
(ff 
timeff 
==ff 
$numff 
)ff 
returngg 

endValuegg 
;gg 
ifii 
(ii 
timeii 
<ii 
$numii 
)ii 
returnjj 

differenceValuejj 
*jj 
(jj 
-jj 
(jj  
Mathfjj  %
.jj% &
Sinjj& )
(jj) *
$numjj* +
*jj, -
Mathfjj. 3
.jj3 4
PIjj4 6
*jj7 8
timejj9 =
*jj> ?
timejj@ D
)jjD E
)jjE F
/jjG H
(jjI J
$numjjJ K
*jjL M
MathfjjN S
.jjS T
PIjjT V
*jjW X
timejjY ]
*jj^ _
timejj` d
)jjd e
+jjf g
$numjjh i
)jji j
+jjk l

startValuejjm w
;jjw x
ifkk 
(kk 
timekk 
<kk 
$numkk 
)kk 
returnll 

differenceValuell 
*ll 
(ll 
-ll 
(ll  
$numll  $
*ll% &
(ll' (
Mathfll( -
.ll- .
Powll. 1
(ll1 2
timell2 6
-ll7 8
$numll9 @
,ll@ A
$numllB D
)llD E
)llE F
)llF G
+llH I
$numllJ N
)llN O
+llP Q

startValuellR \
;ll\ ]
returnnn 	
differenceValuenn
 
*nn 
(nn 
(nn 
$numnn 
*nn  !
Mathfnn" '
.nn' (
Pownn( +
(nn+ ,
timenn, 0
-nn1 2
$numnn3 5
,nn5 6
$numnn7 9
)nn9 :
)nn: ;
+nn< =
$numnn> ?
)nn? @
+nnA B

startValuennC M
;nnM N
}oo 
publicqq 
staticqq	 
Vector2qq 
	Overshootqq !
(qq! "
Vector2qq" )

startValueqq* 4
,qq4 5
Vector2qq6 =
endValueqq> F
,qqF G
floatqqH M
timeqqN R
,qqR S
floatqqT Y
durationqqZ b
)qqb c
{rr 
Vector2ss 

tempVector2ss 
=ss 

startValuess #
;ss# $
tempVector2tt 
.tt 
xtt 
=tt 
	Overshoottt 
(tt 

startValuett '
.tt' (
xtt( )
,tt) *
endValuett+ 3
.tt3 4
xtt4 5
,tt5 6
timett7 ;
,tt; <
durationtt= E
)ttE F
;ttF G
tempVector2uu 
.uu 
yuu 
=uu 
	Overshootuu 
(uu 

startValueuu '
.uu' (
yuu( )
,uu) *
endValueuu+ 3
.uu3 4
yuu4 5
,uu5 6
timeuu7 ;
,uu; <
durationuu= E
)uuE F
;uuF G
returnvv 	
tempVector2vv
 
;vv 
}ww 
publicyy 
staticyy	 
Vector3yy 
	Overshootyy !
(yy! "
Vector3yy" )

startValueyy* 4
,yy4 5
Vector3yy6 =
endValueyy> F
,yyF G
floatyyH M
timeyyN R
,yyR S
floatyyT Y
durationyyZ b
)yyb c
{zz 
Vector3{{ 

tempVector3{{ 
={{ 

startValue{{ #
;{{# $
tempVector3|| 
.|| 
x|| 
=|| 
	Overshoot|| 
(|| 

startValue|| '
.||' (
x||( )
,||) *
endValue||+ 3
.||3 4
x||4 5
,||5 6
time||7 ;
,||; <
duration||= E
)||E F
;||F G
tempVector3}} 
.}} 
y}} 
=}} 
	Overshoot}} 
(}} 

startValue}} '
.}}' (
y}}( )
,}}) *
endValue}}+ 3
.}}3 4
y}}4 5
,}}5 6
time}}7 ;
,}}; <
duration}}= E
)}}E F
;}}F G
tempVector3~~ 
.~~ 
z~~ 
=~~ 
	Overshoot~~ 
(~~ 

startValue~~ '
.~~' (
z~~( )
,~~) *
endValue~~+ 3
.~~3 4
z~~4 5
,~~5 6
time~~7 ;
,~~; <
duration~~= E
)~~E F
;~~F G
return 	
tempVector3
 
; 
}
ÄÄ 
public
ÇÇ 
static
ÇÇ	 
Color
ÇÇ 
	Overshoot
ÇÇ 
(
ÇÇ  
Color
ÇÇ  %

startValue
ÇÇ& 0
,
ÇÇ0 1
Color
ÇÇ2 7
endValue
ÇÇ8 @
,
ÇÇ@ A
float
ÇÇB G
time
ÇÇH L
,
ÇÇL M
float
ÇÇN S
duration
ÇÇT \
)
ÇÇ\ ]
{
ÉÉ 
Color
ÑÑ 
	tempColor
ÑÑ	 
=
ÑÑ 

startValue
ÑÑ 
;
ÑÑ  
	tempColor
ÖÖ 
.
ÖÖ 
r
ÖÖ 
=
ÖÖ 
	Overshoot
ÖÖ 
(
ÖÖ 

startValue
ÖÖ %
.
ÖÖ% &
r
ÖÖ& '
,
ÖÖ' (
endValue
ÖÖ) 1
.
ÖÖ1 2
r
ÖÖ2 3
,
ÖÖ3 4
time
ÖÖ5 9
,
ÖÖ9 :
duration
ÖÖ; C
)
ÖÖC D
;
ÖÖD E
	tempColor
ÜÜ 
.
ÜÜ 
g
ÜÜ 
=
ÜÜ 
	Overshoot
ÜÜ 
(
ÜÜ 

startValue
ÜÜ %
.
ÜÜ% &
g
ÜÜ& '
,
ÜÜ' (
endValue
ÜÜ) 1
.
ÜÜ1 2
g
ÜÜ2 3
,
ÜÜ3 4
time
ÜÜ5 9
,
ÜÜ9 :
duration
ÜÜ; C
)
ÜÜC D
;
ÜÜD E
	tempColor
áá 
.
áá 
b
áá 
=
áá 
	Overshoot
áá 
(
áá 

startValue
áá %
.
áá% &
b
áá& '
,
áá' (
endValue
áá) 1
.
áá1 2
b
áá2 3
,
áá3 4
time
áá5 9
,
áá9 :
duration
áá; C
)
ááC D
;
ááD E
	tempColor
àà 
.
àà 
a
àà 
=
àà 
	Overshoot
àà 
(
àà 

startValue
àà %
.
àà% &
a
àà& '
,
àà' (
endValue
àà) 1
.
àà1 2
a
àà2 3
,
àà3 4
time
àà5 9
,
àà9 :
duration
àà; C
)
ààC D
;
ààD E
return
ââ 	
	tempColor
ââ
 
;
ââ 
}
ää 
public
çç 
static
çç	 
float
çç 
Bounce
çç 
(
çç 
float
çç "

startValue
çç# -
,
çç- .
float
çç/ 4
endValue
çç5 =
,
çç= >
float
çç? D
time
ççE I
,
ççI J
float
ççK P
duration
ççQ Y
)
ççY Z
{
éé 
float
èè 
differenceValue
èè	 
=
èè 
endValue
èè #
-
èè$ %

startValue
èè& 0
;
èè0 1
time
êê 
=
êê 	
Mathf
êê
 
.
êê 
Clamp
êê 
(
êê 
time
êê 
,
êê 
$num
êê 
,
êê 
duration
êê  (
)
êê( )
;
êê) *
time
ëë 
/=
ëë 

duration
ëë 
;
ëë 
if
ìì 
(
ìì 
time
ìì 
==
ìì 
$num
ìì 
)
ìì 
return
îî 


startValue
îî 
;
îî 
if
ïï 
(
ïï 
time
ïï 
==
ïï 
$num
ïï 
)
ïï 
return
ññ 

endValue
ññ 
;
ññ 
if
òò 
(
òò 
time
òò 
<
òò 
$num
òò 
)
òò 
return
ôô 

differenceValue
ôô 
*
ôô 
(
ôô 
$num
ôô #
*
ôô$ %
time
ôô& *
*
ôô+ ,
time
ôô- 1
*
ôô2 3
time
ôô4 8
*
ôô9 :
time
ôô; ?
)
ôô? @
+
ôôA B

startValue
ôôC M
;
ôôM N
return
õõ 	
differenceValue
õõ
 
*
õõ 
(
õõ 
(
õõ 
$num
õõ 
*
õõ  !
Mathf
õõ" '
.
õõ' (
Pow
õõ( +
(
õõ+ ,
time
õõ, 0
-
õõ1 2
$num
õõ3 9
,
õõ9 :
$num
õõ; =
)
õõ= >
)
õõ> ?
+
õõ@ A
$num
õõB H
)
õõH I
+
õõJ K

startValue
õõL V
;
õõV W
}
úú 
public
ûû 
static
ûû	 
Vector2
ûû 
Bounce
ûû 
(
ûû 
Vector2
ûû &

startValue
ûû' 1
,
ûû1 2
Vector2
ûû3 :
endValue
ûû; C
,
ûûC D
float
ûûE J
time
ûûK O
,
ûûO P
float
ûûQ V
duration
ûûW _
)
ûû_ `
{
üü 
Vector2
†† 

tempVector2
†† 
=
†† 

startValue
†† #
;
††# $
tempVector2
°° 
.
°° 
x
°° 
=
°° 
Bounce
°° 
(
°° 

startValue
°° $
.
°°$ %
x
°°% &
,
°°& '
endValue
°°( 0
.
°°0 1
x
°°1 2
,
°°2 3
time
°°4 8
,
°°8 9
duration
°°: B
)
°°B C
;
°°C D
tempVector2
¢¢ 
.
¢¢ 
y
¢¢ 
=
¢¢ 
Bounce
¢¢ 
(
¢¢ 

startValue
¢¢ $
.
¢¢$ %
y
¢¢% &
,
¢¢& '
endValue
¢¢( 0
.
¢¢0 1
y
¢¢1 2
,
¢¢2 3
time
¢¢4 8
,
¢¢8 9
duration
¢¢: B
)
¢¢B C
;
¢¢C D
return
££ 	
tempVector2
££
 
;
££ 
}
§§ 
public
¶¶ 
static
¶¶	 
Vector3
¶¶ 
Bounce
¶¶ 
(
¶¶ 
Vector3
¶¶ &

startValue
¶¶' 1
,
¶¶1 2
Vector3
¶¶3 :
endValue
¶¶; C
,
¶¶C D
float
¶¶E J
time
¶¶K O
,
¶¶O P
float
¶¶Q V
duration
¶¶W _
)
¶¶_ `
{
ßß 
Vector3
®® 

tempVector3
®® 
=
®® 

startValue
®® #
;
®®# $
tempVector3
©© 
.
©© 
x
©© 
=
©© 
Bounce
©© 
(
©© 

startValue
©© $
.
©©$ %
x
©©% &
,
©©& '
endValue
©©( 0
.
©©0 1
x
©©1 2
,
©©2 3
time
©©4 8
,
©©8 9
duration
©©: B
)
©©B C
;
©©C D
tempVector3
™™ 
.
™™ 
y
™™ 
=
™™ 
Bounce
™™ 
(
™™ 

startValue
™™ $
.
™™$ %
y
™™% &
,
™™& '
endValue
™™( 0
.
™™0 1
y
™™1 2
,
™™2 3
time
™™4 8
,
™™8 9
duration
™™: B
)
™™B C
;
™™C D
tempVector3
´´ 
.
´´ 
z
´´ 
=
´´ 
Bounce
´´ 
(
´´ 

startValue
´´ $
.
´´$ %
z
´´% &
,
´´& '
endValue
´´( 0
.
´´0 1
z
´´1 2
,
´´2 3
time
´´4 8
,
´´8 9
duration
´´: B
)
´´B C
;
´´C D
return
¨¨ 	
tempVector3
¨¨
 
;
¨¨ 
}
≠≠ 
public
ØØ 
static
ØØ	 
Color
ØØ 
Bounce
ØØ 
(
ØØ 
Color
ØØ "

startValue
ØØ# -
,
ØØ- .
Color
ØØ/ 4
endValue
ØØ5 =
,
ØØ= >
float
ØØ? D
time
ØØE I
,
ØØI J
float
ØØK P
duration
ØØQ Y
)
ØØY Z
{
∞∞ 
Color
±± 
	tempColor
±±	 
=
±± 

startValue
±± 
;
±±  
	tempColor
≤≤ 
.
≤≤ 
r
≤≤ 
=
≤≤ 
Bounce
≤≤ 
(
≤≤ 

startValue
≤≤ "
.
≤≤" #
r
≤≤# $
,
≤≤$ %
endValue
≤≤& .
.
≤≤. /
r
≤≤/ 0
,
≤≤0 1
time
≤≤2 6
,
≤≤6 7
duration
≤≤8 @
)
≤≤@ A
;
≤≤A B
	tempColor
≥≥ 
.
≥≥ 
g
≥≥ 
=
≥≥ 
Bounce
≥≥ 
(
≥≥ 

startValue
≥≥ "
.
≥≥" #
g
≥≥# $
,
≥≥$ %
endValue
≥≥& .
.
≥≥. /
g
≥≥/ 0
,
≥≥0 1
time
≥≥2 6
,
≥≥6 7
duration
≥≥8 @
)
≥≥@ A
;
≥≥A B
	tempColor
¥¥ 
.
¥¥ 
b
¥¥ 
=
¥¥ 
Bounce
¥¥ 
(
¥¥ 

startValue
¥¥ "
.
¥¥" #
b
¥¥# $
,
¥¥$ %
endValue
¥¥& .
.
¥¥. /
b
¥¥/ 0
,
¥¥0 1
time
¥¥2 6
,
¥¥6 7
duration
¥¥8 @
)
¥¥@ A
;
¥¥A B
	tempColor
µµ 
.
µµ 
a
µµ 
=
µµ 
Bounce
µµ 
(
µµ 

startValue
µµ "
.
µµ" #
a
µµ# $
,
µµ$ %
endValue
µµ& .
.
µµ. /
a
µµ/ 0
,
µµ0 1
time
µµ2 6
,
µµ6 7
duration
µµ8 @
)
µµ@ A
;
µµA B
return
∂∂ 	
	tempColor
∂∂
 
;
∂∂ 
}
∑∑ 
public
ππ 
class
ππ	 
Cube
ππ 
{
∫∫ 
public
ΩΩ 	
static
ΩΩ
 
float
ΩΩ 
In
ΩΩ 
(
ΩΩ 
float
ΩΩ 

startValue
ΩΩ  *
,
ΩΩ* +
float
ΩΩ, 1
endValue
ΩΩ2 :
,
ΩΩ: ;
float
ΩΩ< A
time
ΩΩB F
,
ΩΩF G
float
ΩΩH M
duration
ΩΩN V
)
ΩΩV W
{
ææ 
float
øø 	
differenceValue
øø
 
=
øø 
endValue
øø $
-
øø% &

startValue
øø' 1
;
øø1 2
time
¿¿ 
=
¿¿	 

Mathf
¿¿ 
.
¿¿ 
Clamp
¿¿ 
(
¿¿ 
time
¿¿ 
,
¿¿ 
$num
¿¿ 
,
¿¿  
duration
¿¿! )
)
¿¿) *
;
¿¿* +
time
¡¡ 
/=
¡¡	 
duration
¡¡ 
;
¡¡ 
if
√√ 
(
√√ 
time
√√ 
==
√√ 
$num
√√ 
)
√√ 
return
ƒƒ 

startValue
ƒƒ 
;
ƒƒ 
if
≈≈ 
(
≈≈ 
time
≈≈ 
==
≈≈ 
$num
≈≈ 
)
≈≈ 
return
∆∆ 
endValue
∆∆ 
;
∆∆ 
return
»» 

differenceValue
»» 
*
»» 
time
»» !
*
»»" #
time
»»$ (
*
»») *
time
»»+ /
+
»»0 1

startValue
»»2 <
;
»»< =
}
…… 
public
ÀÀ 	
static
ÀÀ
 
Vector2
ÀÀ 
In
ÀÀ 
(
ÀÀ 
Vector2
ÀÀ #

startValue
ÀÀ$ .
,
ÀÀ. /
Vector2
ÀÀ0 7
endValue
ÀÀ8 @
,
ÀÀ@ A
float
ÀÀB G
time
ÀÀH L
,
ÀÀL M
float
ÀÀN S
duration
ÀÀT \
)
ÀÀ\ ]
{
ÃÃ 
Vector2
ÕÕ 
tempVector2
ÕÕ 
=
ÕÕ 

startValue
ÕÕ $
;
ÕÕ$ %
tempVector2
ŒŒ 
.
ŒŒ 
x
ŒŒ 
=
ŒŒ 
In
ŒŒ 
(
ŒŒ 

startValue
ŒŒ !
.
ŒŒ! "
x
ŒŒ" #
,
ŒŒ# $
endValue
ŒŒ% -
.
ŒŒ- .
x
ŒŒ. /
,
ŒŒ/ 0
time
ŒŒ1 5
,
ŒŒ5 6
duration
ŒŒ7 ?
)
ŒŒ? @
;
ŒŒ@ A
tempVector2
œœ 
.
œœ 
y
œœ 
=
œœ 
In
œœ 
(
œœ 

startValue
œœ !
.
œœ! "
y
œœ" #
,
œœ# $
endValue
œœ% -
.
œœ- .
y
œœ. /
,
œœ/ 0
time
œœ1 5
,
œœ5 6
duration
œœ7 ?
)
œœ? @
;
œœ@ A
return
–– 

tempVector2
–– 
;
–– 
}
—— 
public
”” 	
static
””
 
Vector3
”” 
In
”” 
(
”” 
Vector3
”” #

startValue
””$ .
,
””. /
Vector3
””0 7
endValue
””8 @
,
””@ A
float
””B G
time
””H L
,
””L M
float
””N S
duration
””T \
)
””\ ]
{
‘‘ 
Vector3
’’ 
tempVector3
’’ 
=
’’ 

startValue
’’ $
;
’’$ %
tempVector3
÷÷ 
.
÷÷ 
x
÷÷ 
=
÷÷ 
In
÷÷ 
(
÷÷ 

startValue
÷÷ !
.
÷÷! "
x
÷÷" #
,
÷÷# $
endValue
÷÷% -
.
÷÷- .
x
÷÷. /
,
÷÷/ 0
time
÷÷1 5
,
÷÷5 6
duration
÷÷7 ?
)
÷÷? @
;
÷÷@ A
tempVector3
◊◊ 
.
◊◊ 
y
◊◊ 
=
◊◊ 
In
◊◊ 
(
◊◊ 

startValue
◊◊ !
.
◊◊! "
y
◊◊" #
,
◊◊# $
endValue
◊◊% -
.
◊◊- .
y
◊◊. /
,
◊◊/ 0
time
◊◊1 5
,
◊◊5 6
duration
◊◊7 ?
)
◊◊? @
;
◊◊@ A
tempVector3
ÿÿ 
.
ÿÿ 
z
ÿÿ 
=
ÿÿ 
In
ÿÿ 
(
ÿÿ 

startValue
ÿÿ !
.
ÿÿ! "
z
ÿÿ" #
,
ÿÿ# $
endValue
ÿÿ% -
.
ÿÿ- .
z
ÿÿ. /
,
ÿÿ/ 0
time
ÿÿ1 5
,
ÿÿ5 6
duration
ÿÿ7 ?
)
ÿÿ? @
;
ÿÿ@ A
return
ŸŸ 

tempVector3
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
public
‹‹ 	
static
‹‹
 
Color
‹‹ 
In
‹‹ 
(
‹‹ 
Color
‹‹ 

startValue
‹‹  *
,
‹‹* +
Color
‹‹, 1
endValue
‹‹2 :
,
‹‹: ;
float
‹‹< A
time
‹‹B F
,
‹‹F G
float
‹‹H M
duration
‹‹N V
)
‹‹V W
{
›› 
Color
ﬁﬁ 	
	tempColor
ﬁﬁ
 
=
ﬁﬁ 

startValue
ﬁﬁ  
;
ﬁﬁ  !
	tempColor
ﬂﬂ 
.
ﬂﬂ 
r
ﬂﬂ 
=
ﬂﬂ 
In
ﬂﬂ 
(
ﬂﬂ 

startValue
ﬂﬂ 
.
ﬂﬂ  
r
ﬂﬂ  !
,
ﬂﬂ! "
endValue
ﬂﬂ# +
.
ﬂﬂ+ ,
r
ﬂﬂ, -
,
ﬂﬂ- .
time
ﬂﬂ/ 3
,
ﬂﬂ3 4
duration
ﬂﬂ5 =
)
ﬂﬂ= >
;
ﬂﬂ> ?
	tempColor
‡‡ 
.
‡‡ 
g
‡‡ 
=
‡‡ 
In
‡‡ 
(
‡‡ 

startValue
‡‡ 
.
‡‡  
g
‡‡  !
,
‡‡! "
endValue
‡‡# +
.
‡‡+ ,
g
‡‡, -
,
‡‡- .
time
‡‡/ 3
,
‡‡3 4
duration
‡‡5 =
)
‡‡= >
;
‡‡> ?
	tempColor
·· 
.
·· 
b
·· 
=
·· 
In
·· 
(
·· 

startValue
·· 
.
··  
b
··  !
,
··! "
endValue
··# +
.
··+ ,
b
··, -
,
··- .
time
··/ 3
,
··3 4
duration
··5 =
)
··= >
;
··> ?
	tempColor
‚‚ 
.
‚‚ 
a
‚‚ 
=
‚‚ 
In
‚‚ 
(
‚‚ 

startValue
‚‚ 
.
‚‚  
a
‚‚  !
,
‚‚! "
endValue
‚‚# +
.
‚‚+ ,
a
‚‚, -
,
‚‚- .
time
‚‚/ 3
,
‚‚3 4
duration
‚‚5 =
)
‚‚= >
;
‚‚> ?
return
„„ 

	tempColor
„„ 
;
„„ 
}
‰‰ 
public
ËË 	
static
ËË
 
float
ËË 
Out
ËË 
(
ËË 
float
ËË  

startValue
ËË! +
,
ËË+ ,
float
ËË- 2
endValue
ËË3 ;
,
ËË; <
float
ËË= B
time
ËËC G
,
ËËG H
float
ËËI N
duration
ËËO W
)
ËËW X
{
ÈÈ 
float
ÍÍ 	
differenceValue
ÍÍ
 
=
ÍÍ 
endValue
ÍÍ $
-
ÍÍ% &

startValue
ÍÍ' 1
;
ÍÍ1 2
time
ÎÎ 
=
ÎÎ	 

Mathf
ÎÎ 
.
ÎÎ 
Clamp
ÎÎ 
(
ÎÎ 
time
ÎÎ 
,
ÎÎ 
$num
ÎÎ 
,
ÎÎ  
duration
ÎÎ! )
)
ÎÎ) *
;
ÎÎ* +
time
ÏÏ 
/=
ÏÏ	 
duration
ÏÏ 
;
ÏÏ 
if
ÓÓ 
(
ÓÓ 
time
ÓÓ 
==
ÓÓ 
$num
ÓÓ 
)
ÓÓ 
return
ÔÔ 

startValue
ÔÔ 
;
ÔÔ 
if
 
(
 
time
 
==
 
$num
 
)
 
return
ÒÒ 
endValue
ÒÒ 
;
ÒÒ 
time
ÛÛ 
--
ÛÛ 

;
ÛÛ
 
return
ÙÙ 

differenceValue
ÙÙ 
*
ÙÙ 
(
ÙÙ 
time
ÙÙ "
*
ÙÙ# $
time
ÙÙ% )
*
ÙÙ* +
time
ÙÙ, 0
+
ÙÙ1 2
$num
ÙÙ3 4
)
ÙÙ4 5
+
ÙÙ6 7

startValue
ÙÙ8 B
;
ÙÙB C
}
ıı 
public
˜˜ 	
static
˜˜
 
Vector2
˜˜ 
Out
˜˜ 
(
˜˜ 
Vector2
˜˜ $

startValue
˜˜% /
,
˜˜/ 0
Vector2
˜˜1 8
endValue
˜˜9 A
,
˜˜A B
float
˜˜C H
time
˜˜I M
,
˜˜M N
float
˜˜O T
duration
˜˜U ]
)
˜˜] ^
{
¯¯ 
Vector2
˘˘ 
tempVector2
˘˘ 
=
˘˘ 

startValue
˘˘ $
;
˘˘$ %
tempVector2
˙˙ 
.
˙˙ 
x
˙˙ 
=
˙˙ 
Out
˙˙ 
(
˙˙ 

startValue
˙˙ "
.
˙˙" #
x
˙˙# $
,
˙˙$ %
endValue
˙˙& .
.
˙˙. /
x
˙˙/ 0
,
˙˙0 1
time
˙˙2 6
,
˙˙6 7
duration
˙˙8 @
)
˙˙@ A
;
˙˙A B
tempVector2
˚˚ 
.
˚˚ 
y
˚˚ 
=
˚˚ 
Out
˚˚ 
(
˚˚ 

startValue
˚˚ "
.
˚˚" #
y
˚˚# $
,
˚˚$ %
endValue
˚˚& .
.
˚˚. /
y
˚˚/ 0
,
˚˚0 1
time
˚˚2 6
,
˚˚6 7
duration
˚˚8 @
)
˚˚@ A
;
˚˚A B
return
¸¸ 

tempVector2
¸¸ 
;
¸¸ 
}
˝˝ 
public
ˇˇ 	
static
ˇˇ
 
Vector3
ˇˇ 
Out
ˇˇ 
(
ˇˇ 
Vector3
ˇˇ $

startValue
ˇˇ% /
,
ˇˇ/ 0
Vector3
ˇˇ1 8
endValue
ˇˇ9 A
,
ˇˇA B
float
ˇˇC H
time
ˇˇI M
,
ˇˇM N
float
ˇˇO T
duration
ˇˇU ]
)
ˇˇ] ^
{
ÄÄ 
Vector3
ÅÅ 
tempVector3
ÅÅ 
=
ÅÅ 

startValue
ÅÅ $
;
ÅÅ$ %
tempVector3
ÇÇ 
.
ÇÇ 
x
ÇÇ 
=
ÇÇ 
Out
ÇÇ 
(
ÇÇ 

startValue
ÇÇ "
.
ÇÇ" #
x
ÇÇ# $
,
ÇÇ$ %
endValue
ÇÇ& .
.
ÇÇ. /
x
ÇÇ/ 0
,
ÇÇ0 1
time
ÇÇ2 6
,
ÇÇ6 7
duration
ÇÇ8 @
)
ÇÇ@ A
;
ÇÇA B
tempVector3
ÉÉ 
.
ÉÉ 
y
ÉÉ 
=
ÉÉ 
Out
ÉÉ 
(
ÉÉ 

startValue
ÉÉ "
.
ÉÉ" #
y
ÉÉ# $
,
ÉÉ$ %
endValue
ÉÉ& .
.
ÉÉ. /
y
ÉÉ/ 0
,
ÉÉ0 1
time
ÉÉ2 6
,
ÉÉ6 7
duration
ÉÉ8 @
)
ÉÉ@ A
;
ÉÉA B
tempVector3
ÑÑ 
.
ÑÑ 
z
ÑÑ 
=
ÑÑ 
Out
ÑÑ 
(
ÑÑ 

startValue
ÑÑ "
.
ÑÑ" #
z
ÑÑ# $
,
ÑÑ$ %
endValue
ÑÑ& .
.
ÑÑ. /
z
ÑÑ/ 0
,
ÑÑ0 1
time
ÑÑ2 6
,
ÑÑ6 7
duration
ÑÑ8 @
)
ÑÑ@ A
;
ÑÑA B
return
ÖÖ 

tempVector3
ÖÖ 
;
ÖÖ 
}
ÜÜ 
public
àà 	
static
àà
 
Color
àà 
Out
àà 
(
àà 
Color
àà  

startValue
àà! +
,
àà+ ,
Color
àà- 2
endValue
àà3 ;
,
àà; <
float
àà= B
time
ààC G
,
ààG H
float
ààI N
duration
ààO W
)
ààW X
{
ââ 
Color
ää 	
	tempColor
ää
 
=
ää 

startValue
ää  
;
ää  !
	tempColor
ãã 
.
ãã 
r
ãã 
=
ãã 
Out
ãã 
(
ãã 

startValue
ãã  
.
ãã  !
r
ãã! "
,
ãã" #
endValue
ãã$ ,
.
ãã, -
r
ãã- .
,
ãã. /
time
ãã0 4
,
ãã4 5
duration
ãã6 >
)
ãã> ?
;
ãã? @
	tempColor
åå 
.
åå 
g
åå 
=
åå 
Out
åå 
(
åå 

startValue
åå  
.
åå  !
g
åå! "
,
åå" #
endValue
åå$ ,
.
åå, -
g
åå- .
,
åå. /
time
åå0 4
,
åå4 5
duration
åå6 >
)
åå> ?
;
åå? @
	tempColor
çç 
.
çç 
b
çç 
=
çç 
Out
çç 
(
çç 

startValue
çç  
.
çç  !
b
çç! "
,
çç" #
endValue
çç$ ,
.
çç, -
b
çç- .
,
çç. /
time
çç0 4
,
çç4 5
duration
çç6 >
)
çç> ?
;
çç? @
	tempColor
éé 
.
éé 
a
éé 
=
éé 
Out
éé 
(
éé 

startValue
éé  
.
éé  !
a
éé! "
,
éé" #
endValue
éé$ ,
.
éé, -
a
éé- .
,
éé. /
time
éé0 4
,
éé4 5
duration
éé6 >
)
éé> ?
;
éé? @
return
èè 

	tempColor
èè 
;
èè 
}
êê 
public
îî 	
static
îî
 
float
îî 
InOut
îî 
(
îî 
float
îî "

startValue
îî# -
,
îî- .
float
îî/ 4
endValue
îî5 =
,
îî= >
float
îî? D
time
îîE I
,
îîI J
float
îîK P
duration
îîQ Y
)
îîY Z
{
ïï 
float
ññ 	
differenceValue
ññ
 
=
ññ 
endValue
ññ $
-
ññ% &

startValue
ññ' 1
;
ññ1 2
time
óó 
=
óó	 

Mathf
óó 
.
óó 
Clamp
óó 
(
óó 
time
óó 
,
óó 
$num
óó 
,
óó  
duration
óó! )
)
óó) *
;
óó* +
time
ôô 
/=
ôô	 
duration
ôô 
/
ôô 
$num
ôô 
;
ôô 
if
õõ 
(
õõ 
time
õõ 
==
õõ 
$num
õõ 
)
õõ 
return
úú 

startValue
úú 
;
úú 
if
ùù 
(
ùù 
time
ùù 
==
ùù 
$num
ùù 
)
ùù 
return
ûû 
endValue
ûû 
;
ûû 
if
†† 
(
†† 
time
†† 
<
†† 
$num
†† 
)
†† 
{
°° 
return
¢¢ 
differenceValue
¢¢ 
/
¢¢ 
$num
¢¢ 
*
¢¢  !
time
¢¢" &
*
¢¢' (
time
¢¢) -
*
¢¢. /
time
¢¢0 4
+
¢¢5 6

startValue
¢¢7 A
;
¢¢A B
}
££ 
time
§§ 
-=
§§	 
$num
§§ 
;
§§ 
return
•• 

differenceValue
•• 
/
•• 
$num
•• 
*
••  
(
••! "
time
••" &
*
••' (
time
••) -
*
••. /
time
••0 4
+
••5 6
$num
••7 8
)
••8 9
+
••: ;

startValue
••< F
;
••F G
}
¶¶ 
public
®® 	
static
®®
 
Vector2
®® 
InOut
®® 
(
®® 
Vector2
®® &

startValue
®®' 1
,
®®1 2
Vector2
®®3 :
endValue
®®; C
,
®®C D
float
®®E J
time
®®K O
,
®®O P
float
®®Q V
duration
®®W _
)
®®_ `
{
©© 
Vector2
™™ 
tempVector2
™™ 
=
™™ 

startValue
™™ $
;
™™$ %
tempVector2
´´ 
.
´´ 
x
´´ 
=
´´ 
InOut
´´ 
(
´´ 

startValue
´´ $
.
´´$ %
x
´´% &
,
´´& '
endValue
´´( 0
.
´´0 1
x
´´1 2
,
´´2 3
time
´´4 8
,
´´8 9
duration
´´: B
)
´´B C
;
´´C D
tempVector2
¨¨ 
.
¨¨ 
y
¨¨ 
=
¨¨ 
InOut
¨¨ 
(
¨¨ 

startValue
¨¨ $
.
¨¨$ %
y
¨¨% &
,
¨¨& '
endValue
¨¨( 0
.
¨¨0 1
y
¨¨1 2
,
¨¨2 3
time
¨¨4 8
,
¨¨8 9
duration
¨¨: B
)
¨¨B C
;
¨¨C D
return
≠≠ 

tempVector2
≠≠ 
;
≠≠ 
}
ÆÆ 
public
∞∞ 	
static
∞∞
 
Vector3
∞∞ 
InOut
∞∞ 
(
∞∞ 
Vector3
∞∞ &

startValue
∞∞' 1
,
∞∞1 2
Vector3
∞∞3 :
endValue
∞∞; C
,
∞∞C D
float
∞∞E J
time
∞∞K O
,
∞∞O P
float
∞∞Q V
duration
∞∞W _
)
∞∞_ `
{
±± 
Vector3
≤≤ 
tempVector3
≤≤ 
=
≤≤ 

startValue
≤≤ $
;
≤≤$ %
tempVector3
≥≥ 
.
≥≥ 
x
≥≥ 
=
≥≥ 
InOut
≥≥ 
(
≥≥ 

startValue
≥≥ $
.
≥≥$ %
x
≥≥% &
,
≥≥& '
endValue
≥≥( 0
.
≥≥0 1
x
≥≥1 2
,
≥≥2 3
time
≥≥4 8
,
≥≥8 9
duration
≥≥: B
)
≥≥B C
;
≥≥C D
tempVector3
¥¥ 
.
¥¥ 
y
¥¥ 
=
¥¥ 
InOut
¥¥ 
(
¥¥ 

startValue
¥¥ $
.
¥¥$ %
y
¥¥% &
,
¥¥& '
endValue
¥¥( 0
.
¥¥0 1
y
¥¥1 2
,
¥¥2 3
time
¥¥4 8
,
¥¥8 9
duration
¥¥: B
)
¥¥B C
;
¥¥C D
tempVector3
µµ 
.
µµ 
z
µµ 
=
µµ 
InOut
µµ 
(
µµ 

startValue
µµ $
.
µµ$ %
z
µµ% &
,
µµ& '
endValue
µµ( 0
.
µµ0 1
z
µµ1 2
,
µµ2 3
time
µµ4 8
,
µµ8 9
duration
µµ: B
)
µµB C
;
µµC D
return
∂∂ 

tempVector3
∂∂ 
;
∂∂ 
}
∑∑ 
public
ππ 	
static
ππ
 
Color
ππ 
InOut
ππ 
(
ππ 
Color
ππ "

startValue
ππ# -
,
ππ- .
Color
ππ/ 4
endValue
ππ5 =
,
ππ= >
float
ππ? D
time
ππE I
,
ππI J
float
ππK P
duration
ππQ Y
)
ππY Z
{
∫∫ 
Color
ªª 	
	tempColor
ªª
 
=
ªª 

startValue
ªª  
;
ªª  !
	tempColor
ºº 
.
ºº 
r
ºº 
=
ºº 
InOut
ºº 
(
ºº 

startValue
ºº "
.
ºº" #
r
ºº# $
,
ºº$ %
endValue
ºº& .
.
ºº. /
r
ºº/ 0
,
ºº0 1
time
ºº2 6
,
ºº6 7
duration
ºº8 @
)
ºº@ A
;
ººA B
	tempColor
ΩΩ 
.
ΩΩ 
g
ΩΩ 
=
ΩΩ 
InOut
ΩΩ 
(
ΩΩ 

startValue
ΩΩ "
.
ΩΩ" #
g
ΩΩ# $
,
ΩΩ$ %
endValue
ΩΩ& .
.
ΩΩ. /
g
ΩΩ/ 0
,
ΩΩ0 1
time
ΩΩ2 6
,
ΩΩ6 7
duration
ΩΩ8 @
)
ΩΩ@ A
;
ΩΩA B
	tempColor
ææ 
.
ææ 
b
ææ 
=
ææ 
InOut
ææ 
(
ææ 

startValue
ææ "
.
ææ" #
b
ææ# $
,
ææ$ %
endValue
ææ& .
.
ææ. /
b
ææ/ 0
,
ææ0 1
time
ææ2 6
,
ææ6 7
duration
ææ8 @
)
ææ@ A
;
ææA B
	tempColor
øø 
.
øø 
a
øø 
=
øø 
InOut
øø 
(
øø 

startValue
øø "
.
øø" #
a
øø# $
,
øø$ %
endValue
øø& .
.
øø. /
a
øø/ 0
,
øø0 1
time
øø2 6
,
øø6 7
duration
øø8 @
)
øø@ A
;
øøA B
return
¿¿ 

	tempColor
¿¿ 
;
¿¿ 
}
¡¡ 
public
≈≈ 	
static
≈≈
 
float
≈≈ 
SoftOut
≈≈ 
(
≈≈ 
float
≈≈ $

startValue
≈≈% /
,
≈≈/ 0
float
≈≈1 6
endValue
≈≈7 ?
,
≈≈? @
float
≈≈A F
time
≈≈G K
,
≈≈K L
float
≈≈M R
duration
≈≈S [
)
≈≈[ \
{
∆∆ 
float
«« 	
differenceValue
««
 
=
«« 
endValue
«« $
-
««% &

startValue
««' 1
;
««1 2
time
»» 
=
»»	 

Mathf
»» 
.
»» 
Clamp
»» 
(
»» 
time
»» 
,
»» 
$num
»» 
,
»»  
duration
»»! )
)
»») *
;
»»* +
time
   
/=
  	 
duration
   
/
   
$num
   
;
   
if
ÃÃ 
(
ÃÃ 
time
ÃÃ 
==
ÃÃ 
$num
ÃÃ 
)
ÃÃ 
return
ÕÕ 

startValue
ÕÕ 
;
ÕÕ 
if
ŒŒ 
(
ŒŒ 
time
ŒŒ 
==
ŒŒ 
$num
ŒŒ 
)
ŒŒ 
return
œœ 
endValue
œœ 
;
œœ 
if
—— 
(
—— 
time
—— 
<
—— 
$num
—— 
)
—— 
{
““ 
return
”” 
differenceValue
”” 
/
”” 
$num
”” 
*
””  !
time
””" &
*
””' (
time
””) -
*
””. /
time
””0 4
*
””5 6
time
””7 ;
*
””< =
time
””> B
*
””C D
time
””E I
*
””J K
time
””L P
*
””Q R
$num
””S U
+
””V W

startValue
””X b
;
””b c
}
‘‘ 
time
’’ 
-=
’’	 
$num
’’ 
;
’’ 
return
÷÷ 

differenceValue
÷÷ 
/
÷÷ 
$num
÷÷ 
*
÷÷  
(
÷÷! "
time
÷÷" &
*
÷÷' (
time
÷÷) -
*
÷÷. /
time
÷÷0 4
*
÷÷5 6
$num
÷÷7 >
+
÷÷? @
$num
÷÷A B
)
÷÷B C
+
÷÷D E

startValue
÷÷F P
;
÷÷P Q
}
◊◊ 
public
ŸŸ 	
static
ŸŸ
 
Vector2
ŸŸ 
SoftOut
ŸŸ  
(
ŸŸ  !
Vector2
ŸŸ! (

startValue
ŸŸ) 3
,
ŸŸ3 4
Vector2
ŸŸ5 <
endValue
ŸŸ= E
,
ŸŸE F
float
ŸŸG L
time
ŸŸM Q
,
ŸŸQ R
float
ŸŸS X
duration
ŸŸY a
)
ŸŸa b
{
⁄⁄ 
Vector2
€€ 
tempVector2
€€ 
=
€€ 

startValue
€€ $
;
€€$ %
tempVector2
‹‹ 
.
‹‹ 
x
‹‹ 
=
‹‹ 
SoftOut
‹‹ 
(
‹‹ 

startValue
‹‹ &
.
‹‹& '
x
‹‹' (
,
‹‹( )
endValue
‹‹* 2
.
‹‹2 3
x
‹‹3 4
,
‹‹4 5
time
‹‹6 :
,
‹‹: ;
duration
‹‹< D
)
‹‹D E
;
‹‹E F
tempVector2
›› 
.
›› 
y
›› 
=
›› 
SoftOut
›› 
(
›› 

startValue
›› &
.
››& '
y
››' (
,
››( )
endValue
››* 2
.
››2 3
y
››3 4
,
››4 5
time
››6 :
,
››: ;
duration
››< D
)
››D E
;
››E F
return
ﬁﬁ 

tempVector2
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
public
·· 	
static
··
 
Vector3
·· 
SoftOut
··  
(
··  !
Vector3
··! (

startValue
··) 3
,
··3 4
Vector3
··5 <
endValue
··= E
,
··E F
float
··G L
time
··M Q
,
··Q R
float
··S X
duration
··Y a
)
··a b
{
‚‚ 
Vector3
„„ 
tempVector3
„„ 
=
„„ 

startValue
„„ $
;
„„$ %
tempVector3
‰‰ 
.
‰‰ 
x
‰‰ 
=
‰‰ 
SoftOut
‰‰ 
(
‰‰ 

startValue
‰‰ &
.
‰‰& '
x
‰‰' (
,
‰‰( )
endValue
‰‰* 2
.
‰‰2 3
x
‰‰3 4
,
‰‰4 5
time
‰‰6 :
,
‰‰: ;
duration
‰‰< D
)
‰‰D E
;
‰‰E F
tempVector3
ÂÂ 
.
ÂÂ 
y
ÂÂ 
=
ÂÂ 
SoftOut
ÂÂ 
(
ÂÂ 

startValue
ÂÂ &
.
ÂÂ& '
y
ÂÂ' (
,
ÂÂ( )
endValue
ÂÂ* 2
.
ÂÂ2 3
y
ÂÂ3 4
,
ÂÂ4 5
time
ÂÂ6 :
,
ÂÂ: ;
duration
ÂÂ< D
)
ÂÂD E
;
ÂÂE F
tempVector3
ÊÊ 
.
ÊÊ 
z
ÊÊ 
=
ÊÊ 
SoftOut
ÊÊ 
(
ÊÊ 

startValue
ÊÊ &
.
ÊÊ& '
z
ÊÊ' (
,
ÊÊ( )
endValue
ÊÊ* 2
.
ÊÊ2 3
z
ÊÊ3 4
,
ÊÊ4 5
time
ÊÊ6 :
,
ÊÊ: ;
duration
ÊÊ< D
)
ÊÊD E
;
ÊÊE F
return
ÁÁ 

tempVector3
ÁÁ 
;
ÁÁ 
}
ËË 
public
ÍÍ 	
static
ÍÍ
 
Color
ÍÍ 
SoftOut
ÍÍ 
(
ÍÍ 
Color
ÍÍ $

startValue
ÍÍ% /
,
ÍÍ/ 0
Color
ÍÍ1 6
endValue
ÍÍ7 ?
,
ÍÍ? @
float
ÍÍA F
time
ÍÍG K
,
ÍÍK L
float
ÍÍM R
duration
ÍÍS [
)
ÍÍ[ \
{
ÎÎ 
Color
ÏÏ 	
	tempColor
ÏÏ
 
=
ÏÏ 

startValue
ÏÏ  
;
ÏÏ  !
	tempColor
ÌÌ 
.
ÌÌ 
r
ÌÌ 
=
ÌÌ 
SoftOut
ÌÌ 
(
ÌÌ 

startValue
ÌÌ $
.
ÌÌ$ %
r
ÌÌ% &
,
ÌÌ& '
endValue
ÌÌ( 0
.
ÌÌ0 1
r
ÌÌ1 2
,
ÌÌ2 3
time
ÌÌ4 8
,
ÌÌ8 9
duration
ÌÌ: B
)
ÌÌB C
;
ÌÌC D
	tempColor
ÓÓ 
.
ÓÓ 
g
ÓÓ 
=
ÓÓ 
SoftOut
ÓÓ 
(
ÓÓ 

startValue
ÓÓ $
.
ÓÓ$ %
g
ÓÓ% &
,
ÓÓ& '
endValue
ÓÓ( 0
.
ÓÓ0 1
g
ÓÓ1 2
,
ÓÓ2 3
time
ÓÓ4 8
,
ÓÓ8 9
duration
ÓÓ: B
)
ÓÓB C
;
ÓÓC D
	tempColor
ÔÔ 
.
ÔÔ 
b
ÔÔ 
=
ÔÔ 
SoftOut
ÔÔ 
(
ÔÔ 

startValue
ÔÔ $
.
ÔÔ$ %
b
ÔÔ% &
,
ÔÔ& '
endValue
ÔÔ( 0
.
ÔÔ0 1
b
ÔÔ1 2
,
ÔÔ2 3
time
ÔÔ4 8
,
ÔÔ8 9
duration
ÔÔ: B
)
ÔÔB C
;
ÔÔC D
	tempColor
 
.
 
a
 
=
 
SoftOut
 
(
 

startValue
 $
.
$ %
a
% &
,
& '
endValue
( 0
.
0 1
a
1 2
,
2 3
time
4 8
,
8 9
duration
: B
)
B C
;
C D
return
ÒÒ 

	tempColor
ÒÒ 
;
ÒÒ 
}
ÚÚ 
}
ÛÛ 
public
ıı 
class
ıı	 
Quint
ıı 
{
ˆˆ 
public
˜˜ 	
static
˜˜
 
float
˜˜ 
In
˜˜ 
(
˜˜ 
float
˜˜ 

startValue
˜˜  *
,
˜˜* +
float
˜˜, 1
endValue
˜˜2 :
,
˜˜: ;
float
˜˜< A
time
˜˜B F
,
˜˜F G
float
˜˜H M
duration
˜˜N V
)
˜˜V W
{
¯¯ 
float
˘˘ 	
differenceValue
˘˘
 
=
˘˘ 
endValue
˘˘ $
-
˘˘% &

startValue
˘˘' 1
;
˘˘1 2
time
˙˙ 
=
˙˙	 

Mathf
˙˙ 
.
˙˙ 
Clamp
˙˙ 
(
˙˙ 
time
˙˙ 
,
˙˙ 
$num
˙˙ 
,
˙˙  
duration
˙˙! )
)
˙˙) *
;
˙˙* +
time
˚˚ 
/=
˚˚	 
duration
˚˚ 
;
˚˚ 
if
˝˝ 
(
˝˝ 
time
˝˝ 
==
˝˝ 
$num
˝˝ 
)
˝˝ 
return
˛˛ 

startValue
˛˛ 
;
˛˛ 
if
ˇˇ 
(
ˇˇ 
time
ˇˇ 
==
ˇˇ 
$num
ˇˇ 
)
ˇˇ 
return
ÄÄ 
endValue
ÄÄ 
;
ÄÄ 
return
ÇÇ 

differenceValue
ÇÇ 
*
ÇÇ 
time
ÇÇ !
*
ÇÇ" #
time
ÇÇ$ (
*
ÇÇ) *
time
ÇÇ+ /
*
ÇÇ0 1
time
ÇÇ2 6
*
ÇÇ7 8
time
ÇÇ9 =
+
ÇÇ> ?

startValue
ÇÇ@ J
;
ÇÇJ K
}
ÉÉ 
public
ÖÖ 	
static
ÖÖ
 
Vector2
ÖÖ 
In
ÖÖ 
(
ÖÖ 
Vector2
ÖÖ #

startValue
ÖÖ$ .
,
ÖÖ. /
Vector2
ÖÖ0 7
endValue
ÖÖ8 @
,
ÖÖ@ A
float
ÖÖB G
time
ÖÖH L
,
ÖÖL M
float
ÖÖN S
duration
ÖÖT \
)
ÖÖ\ ]
{
ÜÜ 
Vector2
áá 
tempVector2
áá 
=
áá 

startValue
áá $
;
áá$ %
tempVector2
àà 
.
àà 
x
àà 
=
àà 
In
àà 
(
àà 

startValue
àà !
.
àà! "
x
àà" #
,
àà# $
endValue
àà% -
.
àà- .
x
àà. /
,
àà/ 0
time
àà1 5
,
àà5 6
duration
àà7 ?
)
àà? @
;
àà@ A
tempVector2
ââ 
.
ââ 
y
ââ 
=
ââ 
In
ââ 
(
ââ 

startValue
ââ !
.
ââ! "
y
ââ" #
,
ââ# $
endValue
ââ% -
.
ââ- .
y
ââ. /
,
ââ/ 0
time
ââ1 5
,
ââ5 6
duration
ââ7 ?
)
ââ? @
;
ââ@ A
return
ää 

tempVector2
ää 
;
ää 
}
ãã 
public
çç 	
static
çç
 
Vector3
çç 
In
çç 
(
çç 
Vector3
çç #

startValue
çç$ .
,
çç. /
Vector3
çç0 7
endValue
çç8 @
,
çç@ A
float
ççB G
time
ççH L
,
ççL M
float
ççN S
duration
ççT \
)
çç\ ]
{
éé 
Vector3
èè 
tempVector3
èè 
=
èè 

startValue
èè $
;
èè$ %
tempVector3
êê 
.
êê 
x
êê 
=
êê 
In
êê 
(
êê 

startValue
êê !
.
êê! "
x
êê" #
,
êê# $
endValue
êê% -
.
êê- .
x
êê. /
,
êê/ 0
time
êê1 5
,
êê5 6
duration
êê7 ?
)
êê? @
;
êê@ A
tempVector3
ëë 
.
ëë 
y
ëë 
=
ëë 
In
ëë 
(
ëë 

startValue
ëë !
.
ëë! "
y
ëë" #
,
ëë# $
endValue
ëë% -
.
ëë- .
y
ëë. /
,
ëë/ 0
time
ëë1 5
,
ëë5 6
duration
ëë7 ?
)
ëë? @
;
ëë@ A
tempVector3
íí 
.
íí 
z
íí 
=
íí 
In
íí 
(
íí 

startValue
íí !
.
íí! "
z
íí" #
,
íí# $
endValue
íí% -
.
íí- .
z
íí. /
,
íí/ 0
time
íí1 5
,
íí5 6
duration
íí7 ?
)
íí? @
;
íí@ A
return
ìì 

tempVector3
ìì 
;
ìì 
}
îî 
public
ññ 	
static
ññ
 
Color
ññ 
In
ññ 
(
ññ 
Color
ññ 

startValue
ññ  *
,
ññ* +
Color
ññ, 1
endValue
ññ2 :
,
ññ: ;
float
ññ< A
time
ññB F
,
ññF G
float
ññH M
duration
ññN V
)
ññV W
{
óó 
Color
òò 	
	tempColor
òò
 
=
òò 

startValue
òò  
;
òò  !
	tempColor
ôô 
.
ôô 
r
ôô 
=
ôô 
In
ôô 
(
ôô 

startValue
ôô 
.
ôô  
r
ôô  !
,
ôô! "
endValue
ôô# +
.
ôô+ ,
r
ôô, -
,
ôô- .
time
ôô/ 3
,
ôô3 4
duration
ôô5 =
)
ôô= >
;
ôô> ?
	tempColor
öö 
.
öö 
g
öö 
=
öö 
In
öö 
(
öö 

startValue
öö 
.
öö  
g
öö  !
,
öö! "
endValue
öö# +
.
öö+ ,
g
öö, -
,
öö- .
time
öö/ 3
,
öö3 4
duration
öö5 =
)
öö= >
;
öö> ?
	tempColor
õõ 
.
õõ 
b
õõ 
=
õõ 
In
õõ 
(
õõ 

startValue
õõ 
.
õõ  
b
õõ  !
,
õõ! "
endValue
õõ# +
.
õõ+ ,
b
õõ, -
,
õõ- .
time
õõ/ 3
,
õõ3 4
duration
õõ5 =
)
õõ= >
;
õõ> ?
	tempColor
úú 
.
úú 
a
úú 
=
úú 
In
úú 
(
úú 

startValue
úú 
.
úú  
a
úú  !
,
úú! "
endValue
úú# +
.
úú+ ,
a
úú, -
,
úú- .
time
úú/ 3
,
úú3 4
duration
úú5 =
)
úú= >
;
úú> ?
return
ùù 

	tempColor
ùù 
;
ùù 
}
ûû 
public
†† 	
static
††
 
float
†† 
Out
†† 
(
†† 
float
††  

startValue
††! +
,
††+ ,
float
††- 2
endValue
††3 ;
,
††; <
float
††= B
time
††C G
,
††G H
float
††I N
duration
††O W
)
††W X
{
°° 
float
¢¢ 	
differenceValue
¢¢
 
=
¢¢ 
endValue
¢¢ $
-
¢¢% &

startValue
¢¢' 1
;
¢¢1 2
time
££ 
=
££	 

Mathf
££ 
.
££ 
Clamp
££ 
(
££ 
time
££ 
,
££ 
$num
££ 
,
££  
duration
££! )
)
££) *
;
££* +
time
§§ 
/=
§§	 
duration
§§ 
;
§§ 
if
¶¶ 
(
¶¶ 
time
¶¶ 
==
¶¶ 
$num
¶¶ 
)
¶¶ 
return
ßß 

startValue
ßß 
;
ßß 
if
®® 
(
®® 
time
®® 
==
®® 
$num
®® 
)
®® 
return
©© 
endValue
©© 
;
©© 
time
´´ 
--
´´ 

;
´´
 
return
¨¨ 

differenceValue
¨¨ 
*
¨¨ 
(
¨¨ 
time
¨¨ "
*
¨¨# $
time
¨¨% )
*
¨¨* +
time
¨¨, 0
*
¨¨1 2
time
¨¨3 7
*
¨¨8 9
time
¨¨: >
+
¨¨? @
$num
¨¨A B
)
¨¨B C
+
¨¨D E

startValue
¨¨F P
;
¨¨P Q
}
≠≠ 
public
ØØ 	
static
ØØ
 
Vector2
ØØ 
Out
ØØ 
(
ØØ 
Vector2
ØØ $

startValue
ØØ% /
,
ØØ/ 0
Vector2
ØØ1 8
endValue
ØØ9 A
,
ØØA B
float
ØØC H
time
ØØI M
,
ØØM N
float
ØØO T
duration
ØØU ]
)
ØØ] ^
{
∞∞ 
Vector2
±± 
tempVector2
±± 
=
±± 

startValue
±± $
;
±±$ %
tempVector2
≤≤ 
.
≤≤ 
x
≤≤ 
=
≤≤ 
Out
≤≤ 
(
≤≤ 

startValue
≤≤ "
.
≤≤" #
x
≤≤# $
,
≤≤$ %
endValue
≤≤& .
.
≤≤. /
x
≤≤/ 0
,
≤≤0 1
time
≤≤2 6
,
≤≤6 7
duration
≤≤8 @
)
≤≤@ A
;
≤≤A B
tempVector2
≥≥ 
.
≥≥ 
y
≥≥ 
=
≥≥ 
Out
≥≥ 
(
≥≥ 

startValue
≥≥ "
.
≥≥" #
y
≥≥# $
,
≥≥$ %
endValue
≥≥& .
.
≥≥. /
y
≥≥/ 0
,
≥≥0 1
time
≥≥2 6
,
≥≥6 7
duration
≥≥8 @
)
≥≥@ A
;
≥≥A B
return
¥¥ 

tempVector2
¥¥ 
;
¥¥ 
}
µµ 
public
∑∑ 	
static
∑∑
 
Vector3
∑∑ 
Out
∑∑ 
(
∑∑ 
Vector3
∑∑ $

startValue
∑∑% /
,
∑∑/ 0
Vector3
∑∑1 8
endValue
∑∑9 A
,
∑∑A B
float
∑∑C H
time
∑∑I M
,
∑∑M N
float
∑∑O T
duration
∑∑U ]
)
∑∑] ^
{
∏∏ 
Vector3
ππ 
tempVector3
ππ 
=
ππ 

startValue
ππ $
;
ππ$ %
tempVector3
∫∫ 
.
∫∫ 
x
∫∫ 
=
∫∫ 
Out
∫∫ 
(
∫∫ 

startValue
∫∫ "
.
∫∫" #
x
∫∫# $
,
∫∫$ %
endValue
∫∫& .
.
∫∫. /
x
∫∫/ 0
,
∫∫0 1
time
∫∫2 6
,
∫∫6 7
duration
∫∫8 @
)
∫∫@ A
;
∫∫A B
tempVector3
ªª 
.
ªª 
y
ªª 
=
ªª 
Out
ªª 
(
ªª 

startValue
ªª "
.
ªª" #
y
ªª# $
,
ªª$ %
endValue
ªª& .
.
ªª. /
y
ªª/ 0
,
ªª0 1
time
ªª2 6
,
ªª6 7
duration
ªª8 @
)
ªª@ A
;
ªªA B
tempVector3
ºº 
.
ºº 
z
ºº 
=
ºº 
Out
ºº 
(
ºº 

startValue
ºº "
.
ºº" #
z
ºº# $
,
ºº$ %
endValue
ºº& .
.
ºº. /
z
ºº/ 0
,
ºº0 1
time
ºº2 6
,
ºº6 7
duration
ºº8 @
)
ºº@ A
;
ººA B
return
ΩΩ 

tempVector3
ΩΩ 
;
ΩΩ 
}
ææ 
public
¿¿ 	
static
¿¿
 
Color
¿¿ 
Out
¿¿ 
(
¿¿ 
Color
¿¿  

startValue
¿¿! +
,
¿¿+ ,
Color
¿¿- 2
endValue
¿¿3 ;
,
¿¿; <
float
¿¿= B
time
¿¿C G
,
¿¿G H
float
¿¿I N
duration
¿¿O W
)
¿¿W X
{
¡¡ 
Color
¬¬ 	
	tempColor
¬¬
 
=
¬¬ 

startValue
¬¬  
;
¬¬  !
	tempColor
√√ 
.
√√ 
r
√√ 
=
√√ 
Out
√√ 
(
√√ 

startValue
√√  
.
√√  !
r
√√! "
,
√√" #
endValue
√√$ ,
.
√√, -
r
√√- .
,
√√. /
time
√√0 4
,
√√4 5
duration
√√6 >
)
√√> ?
;
√√? @
	tempColor
ƒƒ 
.
ƒƒ 
g
ƒƒ 
=
ƒƒ 
Out
ƒƒ 
(
ƒƒ 

startValue
ƒƒ  
.
ƒƒ  !
g
ƒƒ! "
,
ƒƒ" #
endValue
ƒƒ$ ,
.
ƒƒ, -
g
ƒƒ- .
,
ƒƒ. /
time
ƒƒ0 4
,
ƒƒ4 5
duration
ƒƒ6 >
)
ƒƒ> ?
;
ƒƒ? @
	tempColor
≈≈ 
.
≈≈ 
b
≈≈ 
=
≈≈ 
Out
≈≈ 
(
≈≈ 

startValue
≈≈  
.
≈≈  !
b
≈≈! "
,
≈≈" #
endValue
≈≈$ ,
.
≈≈, -
b
≈≈- .
,
≈≈. /
time
≈≈0 4
,
≈≈4 5
duration
≈≈6 >
)
≈≈> ?
;
≈≈? @
	tempColor
∆∆ 
.
∆∆ 
a
∆∆ 
=
∆∆ 
Out
∆∆ 
(
∆∆ 

startValue
∆∆  
.
∆∆  !
a
∆∆! "
,
∆∆" #
endValue
∆∆$ ,
.
∆∆, -
a
∆∆- .
,
∆∆. /
time
∆∆0 4
,
∆∆4 5
duration
∆∆6 >
)
∆∆> ?
;
∆∆? @
return
«« 

	tempColor
«« 
;
«« 
}
»» 
public
   	
static
  
 
float
   
InOut
   
(
   
float
   "

startValue
  # -
,
  - .
float
  / 4
endValue
  5 =
,
  = >
float
  ? D
time
  E I
,
  I J
float
  K P
duration
  Q Y
)
  Y Z
{
ÀÀ 
float
ÃÃ 	
differenceValue
ÃÃ
 
=
ÃÃ 
endValue
ÃÃ $
-
ÃÃ% &

startValue
ÃÃ' 1
;
ÃÃ1 2
time
ÕÕ 
=
ÕÕ	 

Mathf
ÕÕ 
.
ÕÕ 
Clamp
ÕÕ 
(
ÕÕ 
time
ÕÕ 
,
ÕÕ 
$num
ÕÕ 
,
ÕÕ  
duration
ÕÕ! )
)
ÕÕ) *
;
ÕÕ* +
time
œœ 
/=
œœ	 
duration
œœ 
/
œœ 
$num
œœ 
;
œœ 
if
—— 
(
—— 
time
—— 
==
—— 
$num
—— 
)
—— 
return
““ 

startValue
““ 
;
““ 
if
”” 
(
”” 
time
”” 
==
”” 
$num
”” 
)
”” 
return
‘‘ 
endValue
‘‘ 
;
‘‘ 
if
÷÷ 
(
÷÷ 
time
÷÷ 
<
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 
return
ÿÿ 
differenceValue
ÿÿ 
/
ÿÿ 
$num
ÿÿ 
*
ÿÿ  !
time
ÿÿ" &
*
ÿÿ' (
time
ÿÿ) -
*
ÿÿ. /
time
ÿÿ0 4
*
ÿÿ5 6
time
ÿÿ7 ;
*
ÿÿ< =
time
ÿÿ> B
+
ÿÿC D

startValue
ÿÿE O
;
ÿÿO P
}
ŸŸ 
time
⁄⁄ 
-=
⁄⁄	 
$num
⁄⁄ 
;
⁄⁄ 
return
€€ 

differenceValue
€€ 
/
€€ 
$num
€€ 
*
€€  
(
€€! "
time
€€" &
*
€€' (
time
€€) -
*
€€. /
time
€€0 4
*
€€5 6
time
€€7 ;
*
€€< =
time
€€> B
+
€€C D
$num
€€E F
)
€€F G
+
€€H I

startValue
€€J T
;
€€T U
}
‹‹ 
public
ﬁﬁ 	
static
ﬁﬁ
 
Vector2
ﬁﬁ 
InOut
ﬁﬁ 
(
ﬁﬁ 
Vector2
ﬁﬁ &

startValue
ﬁﬁ' 1
,
ﬁﬁ1 2
Vector2
ﬁﬁ3 :
endValue
ﬁﬁ; C
,
ﬁﬁC D
float
ﬁﬁE J
time
ﬁﬁK O
,
ﬁﬁO P
float
ﬁﬁQ V
duration
ﬁﬁW _
)
ﬁﬁ_ `
{
ﬂﬂ 
Vector2
‡‡ 
tempVector2
‡‡ 
=
‡‡ 

startValue
‡‡ $
;
‡‡$ %
tempVector2
·· 
.
·· 
x
·· 
=
·· 
InOut
·· 
(
·· 

startValue
·· $
.
··$ %
x
··% &
,
··& '
endValue
··( 0
.
··0 1
x
··1 2
,
··2 3
time
··4 8
,
··8 9
duration
··: B
)
··B C
;
··C D
tempVector2
‚‚ 
.
‚‚ 
y
‚‚ 
=
‚‚ 
InOut
‚‚ 
(
‚‚ 

startValue
‚‚ $
.
‚‚$ %
y
‚‚% &
,
‚‚& '
endValue
‚‚( 0
.
‚‚0 1
y
‚‚1 2
,
‚‚2 3
time
‚‚4 8
,
‚‚8 9
duration
‚‚: B
)
‚‚B C
;
‚‚C D
return
„„ 

tempVector2
„„ 
;
„„ 
}
‰‰ 
public
ÊÊ 	
static
ÊÊ
 
Vector3
ÊÊ 
InOut
ÊÊ 
(
ÊÊ 
Vector3
ÊÊ &

startValue
ÊÊ' 1
,
ÊÊ1 2
Vector3
ÊÊ3 :
endValue
ÊÊ; C
,
ÊÊC D
float
ÊÊE J
time
ÊÊK O
,
ÊÊO P
float
ÊÊQ V
duration
ÊÊW _
)
ÊÊ_ `
{
ÁÁ 
Vector3
ËË 
tempVector3
ËË 
=
ËË 

startValue
ËË $
;
ËË$ %
tempVector3
ÈÈ 
.
ÈÈ 
x
ÈÈ 
=
ÈÈ 
InOut
ÈÈ 
(
ÈÈ 

startValue
ÈÈ $
.
ÈÈ$ %
x
ÈÈ% &
,
ÈÈ& '
endValue
ÈÈ( 0
.
ÈÈ0 1
x
ÈÈ1 2
,
ÈÈ2 3
time
ÈÈ4 8
,
ÈÈ8 9
duration
ÈÈ: B
)
ÈÈB C
;
ÈÈC D
tempVector3
ÍÍ 
.
ÍÍ 
y
ÍÍ 
=
ÍÍ 
InOut
ÍÍ 
(
ÍÍ 

startValue
ÍÍ $
.
ÍÍ$ %
y
ÍÍ% &
,
ÍÍ& '
endValue
ÍÍ( 0
.
ÍÍ0 1
y
ÍÍ1 2
,
ÍÍ2 3
time
ÍÍ4 8
,
ÍÍ8 9
duration
ÍÍ: B
)
ÍÍB C
;
ÍÍC D
tempVector3
ÎÎ 
.
ÎÎ 
z
ÎÎ 
=
ÎÎ 
InOut
ÎÎ 
(
ÎÎ 

startValue
ÎÎ $
.
ÎÎ$ %
z
ÎÎ% &
,
ÎÎ& '
endValue
ÎÎ( 0
.
ÎÎ0 1
z
ÎÎ1 2
,
ÎÎ2 3
time
ÎÎ4 8
,
ÎÎ8 9
duration
ÎÎ: B
)
ÎÎB C
;
ÎÎC D
return
ÏÏ 

tempVector3
ÏÏ 
;
ÏÏ 
}
ÌÌ 
public
ÔÔ 	
static
ÔÔ
 
Color
ÔÔ 
InOut
ÔÔ 
(
ÔÔ 
Color
ÔÔ "

startValue
ÔÔ# -
,
ÔÔ- .
Color
ÔÔ/ 4
endValue
ÔÔ5 =
,
ÔÔ= >
float
ÔÔ? D
time
ÔÔE I
,
ÔÔI J
float
ÔÔK P
duration
ÔÔQ Y
)
ÔÔY Z
{
 
Color
ÒÒ 	
	tempColor
ÒÒ
 
=
ÒÒ 

startValue
ÒÒ  
;
ÒÒ  !
	tempColor
ÚÚ 
.
ÚÚ 
r
ÚÚ 
=
ÚÚ 
InOut
ÚÚ 
(
ÚÚ 

startValue
ÚÚ "
.
ÚÚ" #
r
ÚÚ# $
,
ÚÚ$ %
endValue
ÚÚ& .
.
ÚÚ. /
r
ÚÚ/ 0
,
ÚÚ0 1
time
ÚÚ2 6
,
ÚÚ6 7
duration
ÚÚ8 @
)
ÚÚ@ A
;
ÚÚA B
	tempColor
ÛÛ 
.
ÛÛ 
g
ÛÛ 
=
ÛÛ 
InOut
ÛÛ 
(
ÛÛ 

startValue
ÛÛ "
.
ÛÛ" #
g
ÛÛ# $
,
ÛÛ$ %
endValue
ÛÛ& .
.
ÛÛ. /
g
ÛÛ/ 0
,
ÛÛ0 1
time
ÛÛ2 6
,
ÛÛ6 7
duration
ÛÛ8 @
)
ÛÛ@ A
;
ÛÛA B
	tempColor
ÙÙ 
.
ÙÙ 
b
ÙÙ 
=
ÙÙ 
InOut
ÙÙ 
(
ÙÙ 

startValue
ÙÙ "
.
ÙÙ" #
b
ÙÙ# $
,
ÙÙ$ %
endValue
ÙÙ& .
.
ÙÙ. /
b
ÙÙ/ 0
,
ÙÙ0 1
time
ÙÙ2 6
,
ÙÙ6 7
duration
ÙÙ8 @
)
ÙÙ@ A
;
ÙÙA B
	tempColor
ıı 
.
ıı 
a
ıı 
=
ıı 
InOut
ıı 
(
ıı 

startValue
ıı "
.
ıı" #
a
ıı# $
,
ıı$ %
endValue
ıı& .
.
ıı. /
a
ıı/ 0
,
ıı0 1
time
ıı2 6
,
ıı6 7
duration
ıı8 @
)
ıı@ A
;
ııA B
return
ˆˆ 

	tempColor
ˆˆ 
;
ˆˆ 
}
˜˜ 
public
˘˘ 	
static
˘˘
 
float
˘˘ 
SoftOut
˘˘ 
(
˘˘ 
float
˘˘ $

startValue
˘˘% /
,
˘˘/ 0
float
˘˘1 6
endValue
˘˘7 ?
,
˘˘? @
float
˘˘A F
time
˘˘G K
,
˘˘K L
float
˘˘M R
duration
˘˘S [
)
˘˘[ \
{
˙˙ 
float
˚˚ 	
differenceValue
˚˚
 
=
˚˚ 
endValue
˚˚ $
-
˚˚% &

startValue
˚˚' 1
;
˚˚1 2
time
¸¸ 
=
¸¸	 

Mathf
¸¸ 
.
¸¸ 
Clamp
¸¸ 
(
¸¸ 
time
¸¸ 
,
¸¸ 
$num
¸¸ 
,
¸¸  
duration
¸¸! )
)
¸¸) *
;
¸¸* +
time
˛˛ 
/=
˛˛	 
duration
˛˛ 
/
˛˛ 
$num
˛˛ 
;
˛˛ 
if
ÄÄ 
(
ÄÄ 
time
ÄÄ 
==
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
return
ÅÅ 

startValue
ÅÅ 
;
ÅÅ 
if
ÇÇ 
(
ÇÇ 
time
ÇÇ 
==
ÇÇ 
$num
ÇÇ 
)
ÇÇ 
return
ÉÉ 
endValue
ÉÉ 
;
ÉÉ 
if
ÖÖ 
(
ÖÖ 
time
ÖÖ 
<
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
{
ÜÜ 
return
áá 
differenceValue
áá 
/
áá 
$num
áá 
*
áá  !
time
áá" &
*
áá' (
time
áá) -
*
áá. /
time
áá0 4
*
áá5 6
time
áá7 ;
*
áá< =
time
áá> B
*
ááC D
$num
ááE G
+
ááH I

startValue
ááJ T
;
ááT U
}
àà 
time
ââ 
-=
ââ	 
$num
ââ 
;
ââ 
return
ää 

differenceValue
ää 
/
ää 
$num
ää 
*
ää  
(
ää! "
time
ää" &
*
ää' (
time
ää) -
*
ää. /
time
ää0 4
*
ää5 6
time
ää7 ;
*
ää< =
time
ää> B
*
ääC D
$num
ääE L
+
ääM N
$num
ääO P
)
ääP Q
+
ääR S

startValue
ääT ^
;
ää^ _
}
ãã 
public
çç 	
static
çç
 
Vector2
çç 
SoftOut
çç  
(
çç  !
Vector2
çç! (

startValue
çç) 3
,
çç3 4
Vector2
çç5 <
endValue
çç= E
,
ççE F
float
ççG L
time
ççM Q
,
ççQ R
float
ççS X
duration
ççY a
)
çça b
{
éé 
Vector2
èè 
tempVector2
èè 
=
èè 

startValue
èè $
;
èè$ %
tempVector2
êê 
.
êê 
x
êê 
=
êê 
SoftOut
êê 
(
êê 

startValue
êê &
.
êê& '
x
êê' (
,
êê( )
endValue
êê* 2
.
êê2 3
x
êê3 4
,
êê4 5
time
êê6 :
,
êê: ;
duration
êê< D
)
êêD E
;
êêE F
tempVector2
ëë 
.
ëë 
y
ëë 
=
ëë 
SoftOut
ëë 
(
ëë 

startValue
ëë &
.
ëë& '
y
ëë' (
,
ëë( )
endValue
ëë* 2
.
ëë2 3
y
ëë3 4
,
ëë4 5
time
ëë6 :
,
ëë: ;
duration
ëë< D
)
ëëD E
;
ëëE F
return
íí 

tempVector2
íí 
;
íí 
}
ìì 
public
ïï 	
static
ïï
 
Vector3
ïï 
SoftOut
ïï  
(
ïï  !
Vector3
ïï! (

startValue
ïï) 3
,
ïï3 4
Vector3
ïï5 <
endValue
ïï= E
,
ïïE F
float
ïïG L
time
ïïM Q
,
ïïQ R
float
ïïS X
duration
ïïY a
)
ïïa b
{
ññ 
Vector3
óó 
tempVector3
óó 
=
óó 

startValue
óó $
;
óó$ %
tempVector3
òò 
.
òò 
x
òò 
=
òò 
SoftOut
òò 
(
òò 

startValue
òò &
.
òò& '
x
òò' (
,
òò( )
endValue
òò* 2
.
òò2 3
x
òò3 4
,
òò4 5
time
òò6 :
,
òò: ;
duration
òò< D
)
òòD E
;
òòE F
tempVector3
ôô 
.
ôô 
y
ôô 
=
ôô 
SoftOut
ôô 
(
ôô 

startValue
ôô &
.
ôô& '
y
ôô' (
,
ôô( )
endValue
ôô* 2
.
ôô2 3
y
ôô3 4
,
ôô4 5
time
ôô6 :
,
ôô: ;
duration
ôô< D
)
ôôD E
;
ôôE F
tempVector3
öö 
.
öö 
z
öö 
=
öö 
SoftOut
öö 
(
öö 

startValue
öö &
.
öö& '
z
öö' (
,
öö( )
endValue
öö* 2
.
öö2 3
z
öö3 4
,
öö4 5
time
öö6 :
,
öö: ;
duration
öö< D
)
ööD E
;
ööE F
return
õõ 

tempVector3
õõ 
;
õõ 
}
úú 
public
ûû 	
static
ûû
 
Color
ûû 
SoftOut
ûû 
(
ûû 
Color
ûû $

startValue
ûû% /
,
ûû/ 0
Color
ûû1 6
endValue
ûû7 ?
,
ûû? @
float
ûûA F
time
ûûG K
,
ûûK L
float
ûûM R
duration
ûûS [
)
ûû[ \
{
üü 
Color
†† 	
	tempColor
††
 
=
†† 

startValue
††  
;
††  !
	tempColor
°° 
.
°° 
r
°° 
=
°° 
SoftOut
°° 
(
°° 

startValue
°° $
.
°°$ %
r
°°% &
,
°°& '
endValue
°°( 0
.
°°0 1
r
°°1 2
,
°°2 3
time
°°4 8
,
°°8 9
duration
°°: B
)
°°B C
;
°°C D
	tempColor
¢¢ 
.
¢¢ 
g
¢¢ 
=
¢¢ 
SoftOut
¢¢ 
(
¢¢ 

startValue
¢¢ $
.
¢¢$ %
g
¢¢% &
,
¢¢& '
endValue
¢¢( 0
.
¢¢0 1
g
¢¢1 2
,
¢¢2 3
time
¢¢4 8
,
¢¢8 9
duration
¢¢: B
)
¢¢B C
;
¢¢C D
	tempColor
££ 
.
££ 
b
££ 
=
££ 
SoftOut
££ 
(
££ 

startValue
££ $
.
££$ %
b
££% &
,
££& '
endValue
££( 0
.
££0 1
b
££1 2
,
££2 3
time
££4 8
,
££8 9
duration
££: B
)
££B C
;
££C D
	tempColor
§§ 
.
§§ 
a
§§ 
=
§§ 
SoftOut
§§ 
(
§§ 

startValue
§§ $
.
§§$ %
a
§§% &
,
§§& '
endValue
§§( 0
.
§§0 1
a
§§1 2
,
§§2 3
time
§§4 8
,
§§8 9
duration
§§: B
)
§§B C
;
§§C D
return
•• 

	tempColor
•• 
;
•• 
}
¶¶ 
}
ßß 
public
©© 
class
©©	 
Sept
©© 
{
™™ 
public
´´ 	
static
´´
 
float
´´ 
In
´´ 
(
´´ 
float
´´ 

startValue
´´  *
,
´´* +
float
´´, 1
endValue
´´2 :
,
´´: ;
float
´´< A
time
´´B F
,
´´F G
float
´´H M
duration
´´N V
)
´´V W
{
¨¨ 
float
≠≠ 	
differenceValue
≠≠
 
=
≠≠ 
endValue
≠≠ $
-
≠≠% &

startValue
≠≠' 1
;
≠≠1 2
time
ÆÆ 
=
ÆÆ	 

Mathf
ÆÆ 
.
ÆÆ 
Clamp
ÆÆ 
(
ÆÆ 
time
ÆÆ 
,
ÆÆ 
$num
ÆÆ 
,
ÆÆ  
duration
ÆÆ! )
)
ÆÆ) *
;
ÆÆ* +
time
ØØ 
/=
ØØ	 
duration
ØØ 
;
ØØ 
if
±± 
(
±± 
time
±± 
==
±± 
$num
±± 
)
±± 
return
≤≤ 

startValue
≤≤ 
;
≤≤ 
if
≥≥ 
(
≥≥ 
time
≥≥ 
==
≥≥ 
$num
≥≥ 
)
≥≥ 
return
¥¥ 
endValue
¥¥ 
;
¥¥ 
return
∂∂ 

differenceValue
∂∂ 
*
∂∂ 
time
∂∂ !
*
∂∂" #
time
∂∂$ (
*
∂∂) *
time
∂∂+ /
*
∂∂0 1
time
∂∂2 6
*
∂∂7 8
time
∂∂9 =
*
∂∂> ?
time
∂∂@ D
*
∂∂E F
time
∂∂G K
+
∂∂L M

startValue
∂∂N X
;
∂∂X Y
}
∑∑ 
public
ππ 	
static
ππ
 
Vector2
ππ 
In
ππ 
(
ππ 
Vector2
ππ #

startValue
ππ$ .
,
ππ. /
Vector2
ππ0 7
endValue
ππ8 @
,
ππ@ A
float
ππB G
time
ππH L
,
ππL M
float
ππN S
duration
ππT \
)
ππ\ ]
{
∫∫ 
Vector2
ªª 
tempVector2
ªª 
=
ªª 

startValue
ªª $
;
ªª$ %
tempVector2
ºº 
.
ºº 
x
ºº 
=
ºº 
In
ºº 
(
ºº 

startValue
ºº !
.
ºº! "
x
ºº" #
,
ºº# $
endValue
ºº% -
.
ºº- .
x
ºº. /
,
ºº/ 0
time
ºº1 5
,
ºº5 6
duration
ºº7 ?
)
ºº? @
;
ºº@ A
tempVector2
ΩΩ 
.
ΩΩ 
y
ΩΩ 
=
ΩΩ 
In
ΩΩ 
(
ΩΩ 

startValue
ΩΩ !
.
ΩΩ! "
y
ΩΩ" #
,
ΩΩ# $
endValue
ΩΩ% -
.
ΩΩ- .
y
ΩΩ. /
,
ΩΩ/ 0
time
ΩΩ1 5
,
ΩΩ5 6
duration
ΩΩ7 ?
)
ΩΩ? @
;
ΩΩ@ A
return
ææ 

tempVector2
ææ 
;
ææ 
}
øø 
public
¡¡ 	
static
¡¡
 
Vector3
¡¡ 
In
¡¡ 
(
¡¡ 
Vector3
¡¡ #

startValue
¡¡$ .
,
¡¡. /
Vector3
¡¡0 7
endValue
¡¡8 @
,
¡¡@ A
float
¡¡B G
time
¡¡H L
,
¡¡L M
float
¡¡N S
duration
¡¡T \
)
¡¡\ ]
{
¬¬ 
Vector3
√√ 
tempVector3
√√ 
=
√√ 

startValue
√√ $
;
√√$ %
tempVector3
ƒƒ 
.
ƒƒ 
x
ƒƒ 
=
ƒƒ 
In
ƒƒ 
(
ƒƒ 

startValue
ƒƒ !
.
ƒƒ! "
x
ƒƒ" #
,
ƒƒ# $
endValue
ƒƒ% -
.
ƒƒ- .
x
ƒƒ. /
,
ƒƒ/ 0
time
ƒƒ1 5
,
ƒƒ5 6
duration
ƒƒ7 ?
)
ƒƒ? @
;
ƒƒ@ A
tempVector3
≈≈ 
.
≈≈ 
y
≈≈ 
=
≈≈ 
In
≈≈ 
(
≈≈ 

startValue
≈≈ !
.
≈≈! "
y
≈≈" #
,
≈≈# $
endValue
≈≈% -
.
≈≈- .
y
≈≈. /
,
≈≈/ 0
time
≈≈1 5
,
≈≈5 6
duration
≈≈7 ?
)
≈≈? @
;
≈≈@ A
tempVector3
∆∆ 
.
∆∆ 
z
∆∆ 
=
∆∆ 
In
∆∆ 
(
∆∆ 

startValue
∆∆ !
.
∆∆! "
z
∆∆" #
,
∆∆# $
endValue
∆∆% -
.
∆∆- .
z
∆∆. /
,
∆∆/ 0
time
∆∆1 5
,
∆∆5 6
duration
∆∆7 ?
)
∆∆? @
;
∆∆@ A
return
«« 

tempVector3
«« 
;
«« 
}
»» 
public
   	
static
  
 
Color
   
In
   
(
   
Color
   

startValue
    *
,
  * +
Color
  , 1
endValue
  2 :
,
  : ;
float
  < A
time
  B F
,
  F G
float
  H M
duration
  N V
)
  V W
{
ÀÀ 
Color
ÃÃ 	
	tempColor
ÃÃ
 
=
ÃÃ 

startValue
ÃÃ  
;
ÃÃ  !
	tempColor
ÕÕ 
.
ÕÕ 
r
ÕÕ 
=
ÕÕ 
In
ÕÕ 
(
ÕÕ 

startValue
ÕÕ 
.
ÕÕ  
r
ÕÕ  !
,
ÕÕ! "
endValue
ÕÕ# +
.
ÕÕ+ ,
r
ÕÕ, -
,
ÕÕ- .
time
ÕÕ/ 3
,
ÕÕ3 4
duration
ÕÕ5 =
)
ÕÕ= >
;
ÕÕ> ?
	tempColor
ŒŒ 
.
ŒŒ 
g
ŒŒ 
=
ŒŒ 
In
ŒŒ 
(
ŒŒ 

startValue
ŒŒ 
.
ŒŒ  
g
ŒŒ  !
,
ŒŒ! "
endValue
ŒŒ# +
.
ŒŒ+ ,
g
ŒŒ, -
,
ŒŒ- .
time
ŒŒ/ 3
,
ŒŒ3 4
duration
ŒŒ5 =
)
ŒŒ= >
;
ŒŒ> ?
	tempColor
œœ 
.
œœ 
b
œœ 
=
œœ 
In
œœ 
(
œœ 

startValue
œœ 
.
œœ  
b
œœ  !
,
œœ! "
endValue
œœ# +
.
œœ+ ,
b
œœ, -
,
œœ- .
time
œœ/ 3
,
œœ3 4
duration
œœ5 =
)
œœ= >
;
œœ> ?
	tempColor
–– 
.
–– 
a
–– 
=
–– 
In
–– 
(
–– 

startValue
–– 
.
––  
a
––  !
,
––! "
endValue
––# +
.
––+ ,
a
––, -
,
––- .
time
––/ 3
,
––3 4
duration
––5 =
)
––= >
;
––> ?
return
—— 

	tempColor
—— 
;
—— 
}
““ 
public
‘‘ 	
static
‘‘
 
float
‘‘ 
Out
‘‘ 
(
‘‘ 
float
‘‘  

startValue
‘‘! +
,
‘‘+ ,
float
‘‘- 2
endValue
‘‘3 ;
,
‘‘; <
float
‘‘= B
time
‘‘C G
,
‘‘G H
float
‘‘I N
duration
‘‘O W
)
‘‘W X
{
’’ 
float
÷÷ 	
differenceValue
÷÷
 
=
÷÷ 
endValue
÷÷ $
-
÷÷% &

startValue
÷÷' 1
;
÷÷1 2
time
◊◊ 
=
◊◊	 

Mathf
◊◊ 
.
◊◊ 
Clamp
◊◊ 
(
◊◊ 
time
◊◊ 
,
◊◊ 
$num
◊◊ 
,
◊◊  
duration
◊◊! )
)
◊◊) *
;
◊◊* +
time
ÿÿ 
/=
ÿÿ	 
duration
ÿÿ 
;
ÿÿ 
if
⁄⁄ 
(
⁄⁄ 
time
⁄⁄ 
==
⁄⁄ 
$num
⁄⁄ 
)
⁄⁄ 
return
€€ 

startValue
€€ 
;
€€ 
if
‹‹ 
(
‹‹ 
time
‹‹ 
==
‹‹ 
$num
‹‹ 
)
‹‹ 
return
›› 
endValue
›› 
;
›› 
time
ﬂﬂ 
--
ﬂﬂ 

;
ﬂﬂ
 
return
‡‡ 

differenceValue
‡‡ 
*
‡‡ 
(
‡‡ 
time
‡‡ "
*
‡‡# $
time
‡‡% )
*
‡‡* +
time
‡‡, 0
*
‡‡1 2
time
‡‡3 7
*
‡‡8 9
time
‡‡: >
*
‡‡? @
time
‡‡A E
*
‡‡F G
time
‡‡H L
+
‡‡M N
$num
‡‡O P
)
‡‡P Q
+
‡‡R S

startValue
‡‡T ^
;
‡‡^ _
}
·· 
public
„„ 	
static
„„
 
Vector2
„„ 
Out
„„ 
(
„„ 
Vector2
„„ $

startValue
„„% /
,
„„/ 0
Vector2
„„1 8
endValue
„„9 A
,
„„A B
float
„„C H
time
„„I M
,
„„M N
float
„„O T
duration
„„U ]
)
„„] ^
{
‰‰ 
Vector2
ÂÂ 
tempVector2
ÂÂ 
=
ÂÂ 

startValue
ÂÂ $
;
ÂÂ$ %
tempVector2
ÊÊ 
.
ÊÊ 
x
ÊÊ 
=
ÊÊ 
Out
ÊÊ 
(
ÊÊ 

startValue
ÊÊ "
.
ÊÊ" #
x
ÊÊ# $
,
ÊÊ$ %
endValue
ÊÊ& .
.
ÊÊ. /
x
ÊÊ/ 0
,
ÊÊ0 1
time
ÊÊ2 6
,
ÊÊ6 7
duration
ÊÊ8 @
)
ÊÊ@ A
;
ÊÊA B
tempVector2
ÁÁ 
.
ÁÁ 
y
ÁÁ 
=
ÁÁ 
Out
ÁÁ 
(
ÁÁ 

startValue
ÁÁ "
.
ÁÁ" #
y
ÁÁ# $
,
ÁÁ$ %
endValue
ÁÁ& .
.
ÁÁ. /
y
ÁÁ/ 0
,
ÁÁ0 1
time
ÁÁ2 6
,
ÁÁ6 7
duration
ÁÁ8 @
)
ÁÁ@ A
;
ÁÁA B
return
ËË 

tempVector2
ËË 
;
ËË 
}
ÈÈ 
public
ÎÎ 	
static
ÎÎ
 
Vector3
ÎÎ 
Out
ÎÎ 
(
ÎÎ 
Vector3
ÎÎ $

startValue
ÎÎ% /
,
ÎÎ/ 0
Vector3
ÎÎ1 8
endValue
ÎÎ9 A
,
ÎÎA B
float
ÎÎC H
time
ÎÎI M
,
ÎÎM N
float
ÎÎO T
duration
ÎÎU ]
)
ÎÎ] ^
{
ÏÏ 
Vector3
ÌÌ 
tempVector3
ÌÌ 
=
ÌÌ 

startValue
ÌÌ $
;
ÌÌ$ %
tempVector3
ÓÓ 
.
ÓÓ 
x
ÓÓ 
=
ÓÓ 
Out
ÓÓ 
(
ÓÓ 

startValue
ÓÓ "
.
ÓÓ" #
x
ÓÓ# $
,
ÓÓ$ %
endValue
ÓÓ& .
.
ÓÓ. /
x
ÓÓ/ 0
,
ÓÓ0 1
time
ÓÓ2 6
,
ÓÓ6 7
duration
ÓÓ8 @
)
ÓÓ@ A
;
ÓÓA B
tempVector3
ÔÔ 
.
ÔÔ 
y
ÔÔ 
=
ÔÔ 
Out
ÔÔ 
(
ÔÔ 

startValue
ÔÔ "
.
ÔÔ" #
y
ÔÔ# $
,
ÔÔ$ %
endValue
ÔÔ& .
.
ÔÔ. /
y
ÔÔ/ 0
,
ÔÔ0 1
time
ÔÔ2 6
,
ÔÔ6 7
duration
ÔÔ8 @
)
ÔÔ@ A
;
ÔÔA B
tempVector3
 
.
 
z
 
=
 
Out
 
(
 

startValue
 "
.
" #
z
# $
,
$ %
endValue
& .
.
. /
z
/ 0
,
0 1
time
2 6
,
6 7
duration
8 @
)
@ A
;
A B
return
ÒÒ 

tempVector3
ÒÒ 
;
ÒÒ 
}
ÚÚ 
public
ÙÙ 	
static
ÙÙ
 
Color
ÙÙ 
Out
ÙÙ 
(
ÙÙ 
Color
ÙÙ  

startValue
ÙÙ! +
,
ÙÙ+ ,
Color
ÙÙ- 2
endValue
ÙÙ3 ;
,
ÙÙ; <
float
ÙÙ= B
time
ÙÙC G
,
ÙÙG H
float
ÙÙI N
duration
ÙÙO W
)
ÙÙW X
{
ıı 
Color
ˆˆ 	
	tempColor
ˆˆ
 
=
ˆˆ 

startValue
ˆˆ  
;
ˆˆ  !
	tempColor
˜˜ 
.
˜˜ 
r
˜˜ 
=
˜˜ 
Out
˜˜ 
(
˜˜ 

startValue
˜˜  
.
˜˜  !
r
˜˜! "
,
˜˜" #
endValue
˜˜$ ,
.
˜˜, -
r
˜˜- .
,
˜˜. /
time
˜˜0 4
,
˜˜4 5
duration
˜˜6 >
)
˜˜> ?
;
˜˜? @
	tempColor
¯¯ 
.
¯¯ 
g
¯¯ 
=
¯¯ 
Out
¯¯ 
(
¯¯ 

startValue
¯¯  
.
¯¯  !
g
¯¯! "
,
¯¯" #
endValue
¯¯$ ,
.
¯¯, -
g
¯¯- .
,
¯¯. /
time
¯¯0 4
,
¯¯4 5
duration
¯¯6 >
)
¯¯> ?
;
¯¯? @
	tempColor
˘˘ 
.
˘˘ 
b
˘˘ 
=
˘˘ 
Out
˘˘ 
(
˘˘ 

startValue
˘˘  
.
˘˘  !
b
˘˘! "
,
˘˘" #
endValue
˘˘$ ,
.
˘˘, -
b
˘˘- .
,
˘˘. /
time
˘˘0 4
,
˘˘4 5
duration
˘˘6 >
)
˘˘> ?
;
˘˘? @
	tempColor
˙˙ 
.
˙˙ 
a
˙˙ 
=
˙˙ 
Out
˙˙ 
(
˙˙ 

startValue
˙˙  
.
˙˙  !
a
˙˙! "
,
˙˙" #
endValue
˙˙$ ,
.
˙˙, -
a
˙˙- .
,
˙˙. /
time
˙˙0 4
,
˙˙4 5
duration
˙˙6 >
)
˙˙> ?
;
˙˙? @
return
˚˚ 

	tempColor
˚˚ 
;
˚˚ 
}
¸¸ 
public
ˇˇ 	
static
ˇˇ
 
float
ˇˇ 
InOut
ˇˇ 
(
ˇˇ 
float
ˇˇ "

startValue
ˇˇ# -
,
ˇˇ- .
float
ˇˇ/ 4
endValue
ˇˇ5 =
,
ˇˇ= >
float
ˇˇ? D
time
ˇˇE I
,
ˇˇI J
float
ˇˇK P
duration
ˇˇQ Y
)
ˇˇY Z
{
ÄÄ 
float
ÅÅ 	
differenceValue
ÅÅ
 
=
ÅÅ 
endValue
ÅÅ $
-
ÅÅ% &

startValue
ÅÅ' 1
;
ÅÅ1 2
time
ÇÇ 
=
ÇÇ	 

Mathf
ÇÇ 
.
ÇÇ 
Clamp
ÇÇ 
(
ÇÇ 
time
ÇÇ 
,
ÇÇ 
$num
ÇÇ 
,
ÇÇ  
duration
ÇÇ! )
)
ÇÇ) *
;
ÇÇ* +
time
ÑÑ 
/=
ÑÑ	 
duration
ÑÑ 
/
ÑÑ 
$num
ÑÑ 
;
ÑÑ 
if
ÜÜ 
(
ÜÜ 
time
ÜÜ 
==
ÜÜ 
$num
ÜÜ 
)
ÜÜ 
return
áá 

startValue
áá 
;
áá 
if
àà 
(
àà 
time
àà 
==
àà 
$num
àà 
)
àà 
return
ââ 
endValue
ââ 
;
ââ 
if
ãã 
(
ãã 
time
ãã 
<
ãã 
$num
ãã 
)
ãã 
{
åå 
return
çç 
differenceValue
çç 
/
çç 
$num
çç 
*
çç  !
time
çç" &
*
çç' (
time
çç) -
*
çç. /
time
çç0 4
*
çç5 6
time
çç7 ;
*
çç< =
time
çç> B
*
ççC D
time
ççE I
*
ççJ K
time
ççL P
+
ççQ R

startValue
ççS ]
;
çç] ^
}
éé 
time
èè 
-=
èè	 
$num
èè 
;
èè 
return
êê 

differenceValue
êê 
/
êê 
$num
êê 
*
êê  
(
êê! "
time
êê" &
*
êê' (
time
êê) -
*
êê. /
time
êê0 4
*
êê5 6
time
êê7 ;
*
êê< =
time
êê> B
*
êêC D
time
êêE I
*
êêJ K
time
êêL P
+
êêQ R
$num
êêS T
)
êêT U
+
êêV W

startValue
êêX b
;
êêb c
}
ëë 
public
ìì 	
static
ìì
 
Vector2
ìì 
InOut
ìì 
(
ìì 
Vector2
ìì &

startValue
ìì' 1
,
ìì1 2
Vector2
ìì3 :
endValue
ìì; C
,
ììC D
float
ììE J
time
ììK O
,
ììO P
float
ììQ V
duration
ììW _
)
ìì_ `
{
îî 
Vector2
ïï 
tempVector2
ïï 
=
ïï 

startValue
ïï $
;
ïï$ %
tempVector2
ññ 
.
ññ 
x
ññ 
=
ññ 
InOut
ññ 
(
ññ 

startValue
ññ $
.
ññ$ %
x
ññ% &
,
ññ& '
endValue
ññ( 0
.
ññ0 1
x
ññ1 2
,
ññ2 3
time
ññ4 8
,
ññ8 9
duration
ññ: B
)
ññB C
;
ññC D
tempVector2
óó 
.
óó 
y
óó 
=
óó 
InOut
óó 
(
óó 

startValue
óó $
.
óó$ %
y
óó% &
,
óó& '
endValue
óó( 0
.
óó0 1
y
óó1 2
,
óó2 3
time
óó4 8
,
óó8 9
duration
óó: B
)
óóB C
;
óóC D
return
òò 

tempVector2
òò 
;
òò 
}
ôô 
public
õõ 	
static
õõ
 
Vector3
õõ 
InOut
õõ 
(
õõ 
Vector3
õõ &

startValue
õõ' 1
,
õõ1 2
Vector3
õõ3 :
endValue
õõ; C
,
õõC D
float
õõE J
time
õõK O
,
õõO P
float
õõQ V
duration
õõW _
)
õõ_ `
{
úú 
Vector3
ùù 
tempVector3
ùù 
=
ùù 

startValue
ùù $
;
ùù$ %
tempVector3
ûû 
.
ûû 
x
ûû 
=
ûû 
InOut
ûû 
(
ûû 

startValue
ûû $
.
ûû$ %
x
ûû% &
,
ûû& '
endValue
ûû( 0
.
ûû0 1
x
ûû1 2
,
ûû2 3
time
ûû4 8
,
ûû8 9
duration
ûû: B
)
ûûB C
;
ûûC D
tempVector3
üü 
.
üü 
y
üü 
=
üü 
InOut
üü 
(
üü 

startValue
üü $
.
üü$ %
y
üü% &
,
üü& '
endValue
üü( 0
.
üü0 1
y
üü1 2
,
üü2 3
time
üü4 8
,
üü8 9
duration
üü: B
)
üüB C
;
üüC D
tempVector3
†† 
.
†† 
z
†† 
=
†† 
InOut
†† 
(
†† 

startValue
†† $
.
††$ %
z
††% &
,
††& '
endValue
††( 0
.
††0 1
z
††1 2
,
††2 3
time
††4 8
,
††8 9
duration
††: B
)
††B C
;
††C D
return
°° 

tempVector3
°° 
;
°° 
}
¢¢ 
public
§§ 	
static
§§
 
Color
§§ 
InOut
§§ 
(
§§ 
Color
§§ "

startValue
§§# -
,
§§- .
Color
§§/ 4
endValue
§§5 =
,
§§= >
float
§§? D
time
§§E I
,
§§I J
float
§§K P
duration
§§Q Y
)
§§Y Z
{
•• 
Color
¶¶ 	
	tempColor
¶¶
 
=
¶¶ 

startValue
¶¶  
;
¶¶  !
	tempColor
ßß 
.
ßß 
r
ßß 
=
ßß 
InOut
ßß 
(
ßß 

startValue
ßß "
.
ßß" #
r
ßß# $
,
ßß$ %
endValue
ßß& .
.
ßß. /
r
ßß/ 0
,
ßß0 1
time
ßß2 6
,
ßß6 7
duration
ßß8 @
)
ßß@ A
;
ßßA B
	tempColor
®® 
.
®® 
g
®® 
=
®® 
InOut
®® 
(
®® 

startValue
®® "
.
®®" #
g
®®# $
,
®®$ %
endValue
®®& .
.
®®. /
g
®®/ 0
,
®®0 1
time
®®2 6
,
®®6 7
duration
®®8 @
)
®®@ A
;
®®A B
	tempColor
©© 
.
©© 
b
©© 
=
©© 
InOut
©© 
(
©© 

startValue
©© "
.
©©" #
b
©©# $
,
©©$ %
endValue
©©& .
.
©©. /
b
©©/ 0
,
©©0 1
time
©©2 6
,
©©6 7
duration
©©8 @
)
©©@ A
;
©©A B
	tempColor
™™ 
.
™™ 
a
™™ 
=
™™ 
InOut
™™ 
(
™™ 

startValue
™™ "
.
™™" #
a
™™# $
,
™™$ %
endValue
™™& .
.
™™. /
a
™™/ 0
,
™™0 1
time
™™2 6
,
™™6 7
duration
™™8 @
)
™™@ A
;
™™A B
return
´´ 

	tempColor
´´ 
;
´´ 
}
¨¨ 
public
ÆÆ 	
static
ÆÆ
 
float
ÆÆ 
SoftOut
ÆÆ 
(
ÆÆ 
float
ÆÆ $

startValue
ÆÆ% /
,
ÆÆ/ 0
float
ÆÆ1 6
endValue
ÆÆ7 ?
,
ÆÆ? @
float
ÆÆA F
time
ÆÆG K
,
ÆÆK L
float
ÆÆM R
duration
ÆÆS [
)
ÆÆ[ \
{
ØØ 
float
∞∞ 	
differenceValue
∞∞
 
=
∞∞ 
endValue
∞∞ $
-
∞∞% &

startValue
∞∞' 1
;
∞∞1 2
time
±± 
=
±±	 

Mathf
±± 
.
±± 
Clamp
±± 
(
±± 
time
±± 
,
±± 
$num
±± 
,
±±  
duration
±±! )
)
±±) *
;
±±* +
time
≥≥ 
/=
≥≥	 
duration
≥≥ 
/
≥≥ 
$num
≥≥ 
;
≥≥ 
if
µµ 
(
µµ 
time
µµ 
==
µµ 
$num
µµ 
)
µµ 
return
∂∂ 

startValue
∂∂ 
;
∂∂ 
if
∑∑ 
(
∑∑ 
time
∑∑ 
==
∑∑ 
$num
∑∑ 
)
∑∑ 
return
∏∏ 
endValue
∏∏ 
;
∏∏ 
if
∫∫ 
(
∫∫ 
time
∫∫ 
<
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 
return
ºº 
differenceValue
ºº 
/
ºº 
$num
ºº 
*
ºº  !
time
ºº" &
*
ºº' (
time
ºº) -
*
ºº. /
time
ºº0 4
*
ºº5 6
$num
ºº7 9
+
ºº: ;

startValue
ºº< F
;
ººF G
}
ΩΩ 
time
ææ 
-=
ææ	 
$num
ææ 
;
ææ 
return
øø 

differenceValue
øø 
/
øø 
$num
øø 
*
øø  
(
øø! "
time
øø" &
*
øø' (
time
øø) -
*
øø. /
time
øø0 4
*
øø5 6
time
øø7 ;
*
øø< =
time
øø> B
*
øøC D
time
øøE I
*
øøJ K
time
øøL P
*
øøQ R
$num
øøS [
+
øø\ ]
$num
øø^ _
)
øø_ `
+
øøa b

startValue
øøc m
;
øøm n
}
¿¿ 
public
¬¬ 	
static
¬¬
 
Vector2
¬¬ 
SoftOut
¬¬  
(
¬¬  !
Vector2
¬¬! (

startValue
¬¬) 3
,
¬¬3 4
Vector2
¬¬5 <
endValue
¬¬= E
,
¬¬E F
float
¬¬G L
time
¬¬M Q
,
¬¬Q R
float
¬¬S X
duration
¬¬Y a
)
¬¬a b
{
√√ 
Vector2
ƒƒ 
tempVector2
ƒƒ 
=
ƒƒ 

startValue
ƒƒ $
;
ƒƒ$ %
tempVector2
≈≈ 
.
≈≈ 
x
≈≈ 
=
≈≈ 
SoftOut
≈≈ 
(
≈≈ 

startValue
≈≈ &
.
≈≈& '
x
≈≈' (
,
≈≈( )
endValue
≈≈* 2
.
≈≈2 3
x
≈≈3 4
,
≈≈4 5
time
≈≈6 :
,
≈≈: ;
duration
≈≈< D
)
≈≈D E
;
≈≈E F
tempVector2
∆∆ 
.
∆∆ 
y
∆∆ 
=
∆∆ 
SoftOut
∆∆ 
(
∆∆ 

startValue
∆∆ &
.
∆∆& '
y
∆∆' (
,
∆∆( )
endValue
∆∆* 2
.
∆∆2 3
y
∆∆3 4
,
∆∆4 5
time
∆∆6 :
,
∆∆: ;
duration
∆∆< D
)
∆∆D E
;
∆∆E F
return
«« 

tempVector2
«« 
;
«« 
}
»» 
public
   	
static
  
 
Vector3
   
SoftOut
    
(
    !
Vector3
  ! (

startValue
  ) 3
,
  3 4
Vector3
  5 <
endValue
  = E
,
  E F
float
  G L
time
  M Q
,
  Q R
float
  S X
duration
  Y a
)
  a b
{
ÀÀ 
Vector3
ÃÃ 
tempVector3
ÃÃ 
=
ÃÃ 

startValue
ÃÃ $
;
ÃÃ$ %
tempVector3
ÕÕ 
.
ÕÕ 
x
ÕÕ 
=
ÕÕ 
SoftOut
ÕÕ 
(
ÕÕ 

startValue
ÕÕ &
.
ÕÕ& '
x
ÕÕ' (
,
ÕÕ( )
endValue
ÕÕ* 2
.
ÕÕ2 3
x
ÕÕ3 4
,
ÕÕ4 5
time
ÕÕ6 :
,
ÕÕ: ;
duration
ÕÕ< D
)
ÕÕD E
;
ÕÕE F
tempVector3
ŒŒ 
.
ŒŒ 
y
ŒŒ 
=
ŒŒ 
SoftOut
ŒŒ 
(
ŒŒ 

startValue
ŒŒ &
.
ŒŒ& '
y
ŒŒ' (
,
ŒŒ( )
endValue
ŒŒ* 2
.
ŒŒ2 3
y
ŒŒ3 4
,
ŒŒ4 5
time
ŒŒ6 :
,
ŒŒ: ;
duration
ŒŒ< D
)
ŒŒD E
;
ŒŒE F
tempVector3
œœ 
.
œœ 
z
œœ 
=
œœ 
SoftOut
œœ 
(
œœ 

startValue
œœ &
.
œœ& '
z
œœ' (
,
œœ( )
endValue
œœ* 2
.
œœ2 3
z
œœ3 4
,
œœ4 5
time
œœ6 :
,
œœ: ;
duration
œœ< D
)
œœD E
;
œœE F
return
–– 

tempVector3
–– 
;
–– 
}
—— 
public
”” 	
static
””
 
Color
”” 
SoftOut
”” 
(
”” 
Color
”” $

startValue
””% /
,
””/ 0
Color
””1 6
endValue
””7 ?
,
””? @
float
””A F
time
””G K
,
””K L
float
””M R
duration
””S [
)
””[ \
{
‘‘ 
Color
’’ 	
	tempColor
’’
 
=
’’ 

startValue
’’  
;
’’  !
	tempColor
÷÷ 
.
÷÷ 
r
÷÷ 
=
÷÷ 
SoftOut
÷÷ 
(
÷÷ 

startValue
÷÷ $
.
÷÷$ %
r
÷÷% &
,
÷÷& '
endValue
÷÷( 0
.
÷÷0 1
r
÷÷1 2
,
÷÷2 3
time
÷÷4 8
,
÷÷8 9
duration
÷÷: B
)
÷÷B C
;
÷÷C D
	tempColor
◊◊ 
.
◊◊ 
g
◊◊ 
=
◊◊ 
SoftOut
◊◊ 
(
◊◊ 

startValue
◊◊ $
.
◊◊$ %
g
◊◊% &
,
◊◊& '
endValue
◊◊( 0
.
◊◊0 1
g
◊◊1 2
,
◊◊2 3
time
◊◊4 8
,
◊◊8 9
duration
◊◊: B
)
◊◊B C
;
◊◊C D
	tempColor
ÿÿ 
.
ÿÿ 
b
ÿÿ 
=
ÿÿ 
SoftOut
ÿÿ 
(
ÿÿ 

startValue
ÿÿ $
.
ÿÿ$ %
b
ÿÿ% &
,
ÿÿ& '
endValue
ÿÿ( 0
.
ÿÿ0 1
b
ÿÿ1 2
,
ÿÿ2 3
time
ÿÿ4 8
,
ÿÿ8 9
duration
ÿÿ: B
)
ÿÿB C
;
ÿÿC D
	tempColor
ŸŸ 
.
ŸŸ 
a
ŸŸ 
=
ŸŸ 
SoftOut
ŸŸ 
(
ŸŸ 

startValue
ŸŸ $
.
ŸŸ$ %
a
ŸŸ% &
,
ŸŸ& '
endValue
ŸŸ( 0
.
ŸŸ0 1
a
ŸŸ1 2
,
ŸŸ2 3
time
ŸŸ4 8
,
ŸŸ8 9
duration
ŸŸ: B
)
ŸŸB C
;
ŸŸC D
return
⁄⁄ 

	tempColor
⁄⁄ 
;
⁄⁄ 
}
€€ 
}
‹‹ 
}
›› 
[
ﬂﬂ 
System
ﬂﬂ 
.
ﬂﬂ 	
Serializable
ﬂﬂ	 
]
ﬂﬂ 
public
‡‡ 
struct
‡‡ 
EZStruct
‡‡ 
{
·· 
[
‚‚ 
SerializeField
‚‚ 
]
‚‚ 
public
„„ 
string
„„	 
animName
„„ 
;
„„ 
[
‰‰ 
SerializeField
‰‰ 
]
‰‰ 
public
ÂÂ 
string
ÂÂ	 
animTag
ÂÂ 
;
ÂÂ 
[
ÊÊ 
SerializeField
ÊÊ 
(
ÊÊ 
)
ÊÊ 
]
ÊÊ 
public
ÁÁ 

GameObject
ÁÁ	 
targetGameObject
ÁÁ $
;
ÁÁ$ %
[
ËË 
SerializeField
ËË 
(
ËË 
)
ËË 
]
ËË 
public
ÈÈ 
string
ÈÈ	 
targetComponent
ÈÈ 
;
ÈÈ  
[
ÍÍ 
SerializeField
ÍÍ 
(
ÍÍ 
)
ÍÍ 
]
ÍÍ 
public
ÎÎ 
string
ÎÎ	 
targetVariable
ÎÎ 
;
ÎÎ 
[
ÏÏ 
SerializeField
ÏÏ 
]
ÏÏ 
public
ÌÌ 
	Component
ÌÌ	 
RealComponent
ÌÌ  
;
ÌÌ  !
[
ÓÓ 
SerializeField
ÓÓ 
]
ÓÓ 
public
ÔÔ 
	FieldInfo
ÔÔ	 
	realField
ÔÔ 
;
ÔÔ 
[
 
SerializeField
 
]
 
public
ÒÒ 
PropertyInfo
ÒÒ	 
realProperty
ÒÒ "
;
ÒÒ" #
[
ÚÚ 
SerializeField
ÚÚ 
(
ÚÚ 
)
ÚÚ 
]
ÚÚ 
public
ÛÛ 
AnimType
ÛÛ	 
animationType
ÛÛ 
;
ÛÛ  
[
ÙÙ 
SerializeField
ÙÙ 
(
ÙÙ 
)
ÙÙ 
]
ÙÙ 
public
ıı 
string
ıı	 
variableType
ıı 
;
ıı 
[
ˆˆ 
SerializeField
ˆˆ 
(
ˆˆ 
)
ˆˆ 
]
ˆˆ 
public
˜˜ 
ValType
˜˜	 
	valueType
˜˜ 
;
˜˜ 
[
¯¯ 
SerializeField
¯¯ 
(
¯¯ 
)
¯¯ 
]
¯¯ 
public
˘˘ 
float
˘˘	 
duration
˘˘ 
;
˘˘ 
[
˙˙ 
SerializeField
˙˙ 
(
˙˙ 
)
˙˙ 
]
˙˙ 
public
˚˚ 
bool
˚˚	 
isField
˚˚ 
;
˚˚ 
[
˝˝ 
SerializeField
˝˝ 
(
˝˝ 
)
˝˝ 
]
˝˝ 
public
˛˛ 
int
˛˛	 

initialInt
˛˛ 
;
˛˛ 
[
ˇˇ 
SerializeField
ˇˇ 
(
ˇˇ 
)
ˇˇ 
]
ˇˇ 
public
ÄÄ 
int
ÄÄ	 
	targetInt
ÄÄ 
;
ÄÄ 
[
ÇÇ 
SerializeField
ÇÇ 
(
ÇÇ 
)
ÇÇ 
]
ÇÇ 
public
ÉÉ 
float
ÉÉ	 
initialFloat
ÉÉ 
;
ÉÉ 
[
ÑÑ 
SerializeField
ÑÑ 
(
ÑÑ 
)
ÑÑ 
]
ÑÑ 
public
ÖÖ 
float
ÖÖ	 
targetFloat
ÖÖ 
;
ÖÖ 
[
áá 
SerializeField
áá 
(
áá 
)
áá 
]
áá 
public
àà 
Vector2
àà	 
initialVector2
àà 
;
àà  
[
ââ 
SerializeField
ââ 
(
ââ 
)
ââ 
]
ââ 
public
ää 
Vector2
ää	 
targetVector2
ää 
;
ää 
[
åå 
SerializeField
åå 
(
åå 
)
åå 
]
åå 
public
çç 
Vector3
çç	 
initialVector3
çç 
;
çç  
[
éé 
SerializeField
éé 
(
éé 
)
éé 
]
éé 
public
èè 
Vector3
èè	 
targetVector3
èè 
;
èè 
[
ëë 
SerializeField
ëë 
(
ëë 
)
ëë 
]
ëë 
public
íí 
Vector4
íí	 
initialVector4
íí 
;
íí  
[
ìì 
SerializeField
ìì 
(
ìì 
)
ìì 
]
ìì 
public
îî 
Vector4
îî	 
targetVector4
îî 
;
îî 
[
ññ 
SerializeField
ññ 
(
ññ 
)
ññ 
]
ññ 
public
óó 
Rect
óó	 
initialRect
óó 
;
óó 
[
òò 
SerializeField
òò 
(
òò 
)
òò 
]
òò 
public
ôô 
Rect
ôô	 

targetRect
ôô 
;
ôô 
[
õõ 
SerializeField
õõ 
(
õõ 
)
õõ 
]
õõ 
public
úú 
Color
úú	 
initialColor
úú 
;
úú 
[
ùù 
SerializeField
ùù 
(
ùù 
)
ùù 
]
ùù 
public
ûû 
Color
ûû	 
targetColor
ûû 
;
ûû 
[
†† 
SerializeField
†† 
(
†† 
)
†† 
]
†† 
public
°° 
Material
°°	 
initialMaterial
°° !
;
°°! "
[
¢¢ 
SerializeField
¢¢ 
(
¢¢ 
)
¢¢ 
]
¢¢ 
public
££ 
Material
££	 
targetMaterial
££  
;
££  !
[
•• 
SerializeField
•• 
(
•• 
)
•• 
]
•• 
public
¶¶ 
bool
¶¶	 
modifyParameter1
¶¶ 
;
¶¶ 
[
ßß 
SerializeField
ßß 
(
ßß 
)
ßß 
]
ßß 
public
®® 
bool
®®	 
modifyParameter2
®® 
;
®® 
[
©© 
SerializeField
©© 
(
©© 
)
©© 
]
©© 
public
™™ 
bool
™™	 
modifyParameter3
™™ 
;
™™ 
[
´´ 
SerializeField
´´ 
(
´´ 
)
´´ 
]
´´ 
public
¨¨ 
bool
¨¨	 
modifyParameter4
¨¨ 
;
¨¨ 
[
ÆÆ 
SerializeField
ÆÆ 
(
ÆÆ 
)
ÆÆ 
]
ÆÆ 
public
ØØ 
float
ØØ	 
animStartTime
ØØ 
;
ØØ 
[
∞∞ 
SerializeField
∞∞ 
(
∞∞ 
)
∞∞ 
]
∞∞ 
public
±± 
float
±±	 
animDeltaTime
±± 
;
±± 
[
≤≤ 
SerializeField
≤≤ 
(
≤≤ 
)
≤≤ 
]
≤≤ 
public
≥≥ 
float
≥≥	 
animationDuration
≥≥  
;
≥≥  !
[
µµ 
SerializeField
µµ 
]
µµ 
public
∂∂ 
bool
∂∂	 
methodOnEnd
∂∂ 
;
∂∂ 
[
∏∏ 
SerializeField
∏∏ 
(
∏∏ 
)
∏∏ 
]
∏∏ 
public
ππ 

GameObject
ππ	 $
methodTargetGameObject
ππ *
;
ππ* +
[
∫∫ 
SerializeField
∫∫ 
(
∫∫ 
)
∫∫ 
]
∫∫ 
public
ªª 
string
ªª	 #
methodTargetComponent
ªª %
;
ªª% &
[
ºº 
SerializeField
ºº 
(
ºº 
)
ºº 
]
ºº 
public
ΩΩ 
string
ΩΩ	  
methodTargetMethod
ΩΩ "
;
ΩΩ" #
[
ææ 
SerializeField
ææ 
]
ææ 
public
øø 
	Component
øø	 !
methodRealComponent
øø &
;
øø& '
[
¿¿ 
SerializeField
¿¿ 
]
¿¿ 
public
¡¡ 

MethodInfo
¡¡	 
methodRealMethod
¡¡ $
;
¡¡$ %
[
√√ 
SerializeField
√√ 
]
√√ 
public
ƒƒ 
string
ƒƒ	 
methodParam
ƒƒ 
;
ƒƒ 
[
≈≈ 
SerializeField
≈≈ 
]
≈≈ 
public
∆∆ 
bool
∆∆	 
called
∆∆ 
;
∆∆ 
[
»» 
SerializeField
»» 
]
»» 
public
…… 
float
……	 
delay
…… 
;
…… 
[
   
SerializeField
   
]
   
public
ÀÀ 
float
ÀÀ	 

delayValue
ÀÀ 
;
ÀÀ 
}
ÃÃ 
public
ŒŒ 
enum
ŒŒ 
AnimType
ŒŒ 
{
œœ 
Linear
–– 
,
–– 	
	Overshoot
—— 
,
—— 
Bounce
““ 
,
““ 	
EaseOutCubed
”” 
,
”” 
EaseOutQuint
‘‘ 
,
‘‘ 
EaseOutSept
’’ 
,
’’ 
EaseInCubed
÷÷ 
,
÷÷ 
EaseInQuint
◊◊ 
,
◊◊ 

EaseInSept
ÿÿ 
,
ÿÿ 
EaseInOutCubed
ŸŸ 
,
ŸŸ 
EaseInOutQuint
⁄⁄ 
,
⁄⁄ 
EaseInOutSept
€€ 
,
€€ 
SoftEaseOutCubed
‹‹ 
,
‹‹ 
SoftEaseOutQuint
›› 
,
›› 
SoftEaseOutSept
ﬁﬁ 
}
ﬂﬂ 
;
ﬂﬂ 
public
·· 
enum
·· 
ValType
·· 
{
‚‚ 
Field
„„ 
,
„„ 
Property
‰‰ 

}
ÂÂ 
;
ÂÂ 
}ÊÊ ä*
\F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\Benchmark01_UGUI.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public		 

class		 
Benchmark01_UGUI		 !
:		" #
MonoBehaviour		$ 1
{

 
public 
int 
BenchmarkType  
=! "
$num# $
;$ %
public 
Canvas 
canvas 
; 
public 
TMP_FontAsset 
	TMProFont &
;& '
public 
Font 
TextMeshFont  
;  !
private 
TextMeshProUGUI 
m_textMeshPro  -
;- .
private 
Text 

m_textMesh 
;  
private 
const 
string 
label01 $
=% &
$str' H
;H I
private 
const 
string 
label02 $
=% &
$str' N
;N O
private 
Material 
m_material01 %
;% &
private   
Material   
m_material02   %
;  % &
IEnumerator$$ 
Start$$ 
($$ 
)$$ 
{%% 	
if)) 
()) 
BenchmarkType)) 
==))  
$num))! "
)))" #
{** 
m_textMeshPro++ 
=++ 

gameObject++  *
.++* +
AddComponent+++ 7
<++7 8
TextMeshProUGUI++8 G
>++G H
(++H I
)++I J
;++J K
if11 
(11 
	TMProFont11 
!=11  
null11! %
)11% &
m_textMeshPro22 !
.22! "
font22" &
=22' (
	TMProFont22) 2
;222 3
m_textMeshPro77 
.77 
fontSize77 &
=77' (
$num77) +
;77+ ,
m_textMeshPro88 
.88 
	alignment88 '
=88( ) 
TextAlignmentOptions88* >
.88> ?
Center88? E
;88E F
m_textMeshPro:: 
.:: 
extraPadding:: *
=::+ ,
true::- 1
;::1 2
m_material01DD 
=DD 
m_textMeshProDD ,
.DD, -
fontDD- 1
.DD1 2
materialDD2 :
;DD: ;
m_material02EE 
=EE 
	ResourcesEE (
.EE( )
LoadEE) -
<EE- .
MaterialEE. 6
>EE6 7
(EE7 8
$strEE8 f
)EEf g
;EEg h
}HH 
elseII 
ifII 
(II 
BenchmarkTypeII "
==II# %
$numII& '
)II' (
{JJ 

m_textMeshKK 
=KK 

gameObjectKK '
.KK' (
AddComponentKK( 4
<KK4 5
TextKK5 9
>KK9 :
(KK: ;
)KK; <
;KK< =
ifMM 
(MM 
TextMeshFontMM  
!=MM! #
nullMM$ (
)MM( )
{NN 

m_textMeshOO 
.OO 
fontOO #
=OO$ %
TextMeshFontOO& 2
;OO2 3
}QQ 
elseRR 
{SS 
}VV 

m_textMeshXX 
.XX 
fontSizeXX #
=XX$ %
$numXX& (
;XX( )

m_textMeshYY 
.YY 
	alignmentYY $
=YY% &

TextAnchorYY' 1
.YY1 2
MiddleCenterYY2 >
;YY> ?
}\\ 
for`` 
(`` 
int`` 
i`` 
=`` 
$num`` 
;`` 
i`` 
<=``  
$num``! (
;``( )
i``* +
++``+ -
)``- .
{aa 
ifbb 
(bb 
BenchmarkTypebb !
==bb" $
$numbb% &
)bb& '
{cc 
m_textMeshProdd !
.dd! "
textdd" &
=dd' (
label01dd) 0
+dd1 2
(dd3 4
idd4 5
%dd6 7
$numdd8 <
)dd< =
;dd= >
ifee 
(ee 
iee 
%ee 
$numee  
==ee! #
$numee$ '
)ee' (
m_textMeshProff %
.ff% &
fontSharedMaterialff& 8
=ff9 :
m_textMeshProff; H
.ffH I
fontSharedMaterialffI [
==ff\ ^
m_material01ff_ k
?ffl m
m_textMeshProffn {
.ff{ |
fontSharedMaterial	ff| é
=
ffè ê
m_material02
ffë ù
:
ffû ü
m_textMeshPro
ff† ≠
.
ff≠ Æ 
fontSharedMaterial
ffÆ ¿
=
ff¡ ¬
m_material01
ff√ œ
;
ffœ –
}jj 
elsekk 
ifkk 
(kk 
BenchmarkTypekk &
==kk' )
$numkk* +
)kk+ ,

m_textMeshll 
.ll 
textll #
=ll$ %
label02ll& -
+ll. /
(ll0 1
ill1 2
%ll3 4
$numll5 9
)ll9 :
.ll: ;
ToStringll; C
(llC D
)llD E
;llE F
yieldnn 
returnnn 
nullnn !
;nn! "
}oo 
yieldrr 
returnrr 
nullrr 
;rr 
}ss 	
}
ÖÖ 
}áá Ò
-F:\Github\CS 230\unityProj\Assets\HomePage.cs
public 
class 
HomePage 
: 
MonoBehaviour %
{ 
void 
Start 
( 
) 
{		 
} 
void 
Update	 
( 
) 
{ 
} 
} öf
^F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_TextSelector_A.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public		 

class		 
TMP_TextSelector_A		 #
:		$ %
MonoBehaviour		& 3
,		3 4 
IPointerEnterHandler		5 I
,		I J
IPointerExitHandler		K ^
{

 
private 
TextMeshPro 
m_TextMeshPro )
;) *
private 
Camera 
m_Camera 
;  
private 
bool 
m_isHoveringObject '
;' (
private 
int 
m_selectedLink "
=# $
-% &
$num& '
;' (
private 
int 
m_lastCharIndex #
=$ %
-& '
$num' (
;( )
private 
int 
m_lastWordIndex #
=$ %
-& '
$num' (
;( )
void 
Awake 
( 
) 
{ 	
m_TextMeshPro 
= 

gameObject &
.& '
GetComponent' 3
<3 4
TextMeshPro4 ?
>? @
(@ A
)A B
;B C
m_Camera 
= 
Camera 
. 
main "
;" #
m_TextMeshPro 
. 
ForceMeshUpdate )
() *
)* +
;+ ,
} 	
void 

LateUpdate 
( 
) 
{ 	
m_isHoveringObject   
=    
false  ! &
;  & '
if"" 
("" 
TMP_TextUtilities"" !
.""! "'
IsIntersectingRectTransform""" =
(""= >
m_TextMeshPro""> K
.""K L
rectTransform""L Y
,""Y Z
Input""[ `
.""` a
mousePosition""a n
,""n o
Camera""p v
.""v w
main""w {
)""{ |
)""| }
{## 
m_isHoveringObject$$ "
=$$# $
true$$% )
;$$) *
}%% 
if'' 
('' 
m_isHoveringObject'' "
)''" #
{(( 
int** 
	charIndex** 
=** 
TMP_TextUtilities**  1
.**1 2%
FindIntersectingCharacter**2 K
(**K L
m_TextMeshPro**L Y
,**Y Z
Input**[ `
.**` a
mousePosition**a n
,**n o
Camera**p v
.**v w
main**w {
,**{ |
true	**} Å
)
**Å Ç
;
**Ç É
if++ 
(++ 
	charIndex++ 
!=++  
-++! "
$num++" #
&&++$ &
	charIndex++' 0
!=++1 3
m_lastCharIndex++4 C
&&++D F
(++G H
Input++H M
.++M N
GetKey++N T
(++T U
KeyCode++U \
.++\ ]
	LeftShift++] f
)++f g
||++h j
Input++k p
.++p q
GetKey++q w
(++w x
KeyCode++x 
.	++ Ä

RightShift
++Ä ä
)
++ä ã
)
++ã å
)
++å ç
{,, 
m_lastCharIndex// #
=//$ %
	charIndex//& /
;/// 0
int11 
	meshIndex11 !
=11" #
m_TextMeshPro11$ 1
.111 2
textInfo112 :
.11: ;
characterInfo11; H
[11H I
	charIndex11I R
]11R S
.11S T"
materialReferenceIndex11T j
;11j k
int33 
vertexIndex33 #
=33$ %
m_TextMeshPro33& 3
.333 4
textInfo334 <
.33< =
characterInfo33= J
[33J K
	charIndex33K T
]33T U
.33U V
vertexIndex33V a
;33a b
Color3255 
c55 
=55 
new55  #
Color3255$ +
(55+ ,
(55, -
byte55- 1
)551 2
Random552 8
.558 9
Range559 >
(55> ?
$num55? @
,55@ A
$num55B E
)55E F
,55F G
(55H I
byte55I M
)55M N
Random55N T
.55T U
Range55U Z
(55Z [
$num55[ \
,55\ ]
$num55^ a
)55a b
,55b c
(55d e
byte55e i
)55i j
Random55j p
.55p q
Range55q v
(55v w
$num55w x
,55x y
$num55z }
)55} ~
,55~ 
$num
55Ä É
)
55É Ñ
;
55Ñ Ö
Color3277 
[77 
]77 
vertexColors77 *
=77+ ,
m_TextMeshPro77- :
.77: ;
textInfo77; C
.77C D
meshInfo77D L
[77L M
	meshIndex77M V
]77V W
.77W X
colors3277X `
;77` a
vertexColors99  
[99  !
vertexIndex99! ,
+99- .
$num99/ 0
]990 1
=992 3
c994 5
;995 6
vertexColors::  
[::  !
vertexIndex::! ,
+::- .
$num::/ 0
]::0 1
=::2 3
c::4 5
;::5 6
vertexColors;;  
[;;  !
vertexIndex;;! ,
+;;- .
$num;;/ 0
];;0 1
=;;2 3
c;;4 5
;;;5 6
vertexColors<<  
[<<  !
vertexIndex<<! ,
+<<- .
$num<</ 0
]<<0 1
=<<2 3
c<<4 5
;<<5 6
m_TextMeshPro?? !
.??! "
textInfo??" *
.??* +
meshInfo??+ 3
[??3 4
	meshIndex??4 =
]??= >
.??> ?
mesh??? C
.??C D
colors32??D L
=??M N
vertexColors??O [
;??[ \
}@@ 
intEE 
	linkIndexEE 
=EE 
TMP_TextUtilitiesEE  1
.EE1 2 
FindIntersectingLinkEE2 F
(EEF G
m_TextMeshProEEG T
,EET U
InputEEV [
.EE[ \
mousePositionEE\ i
,EEi j
m_CameraEEk s
)EEs t
;EEt u
ifHH 
(HH 
(HH 
	linkIndexHH 
==HH !
-HH" #
$numHH# $
&&HH% '
m_selectedLinkHH( 6
!=HH7 9
-HH: ;
$numHH; <
)HH< =
||HH> @
	linkIndexHHA J
!=HHK M
m_selectedLinkHHN \
)HH\ ]
{II 
m_selectedLinkKK "
=KK# $
-KK% &
$numKK& '
;KK' (
}LL 
ifOO 
(OO 
	linkIndexOO 
!=OO  
-OO! "
$numOO" #
&&OO$ &
	linkIndexOO' 0
!=OO1 3
m_selectedLinkOO4 B
)OOB C
{PP 
m_selectedLinkQQ "
=QQ# $
	linkIndexQQ% .
;QQ. /
TMP_LinkInfoSS  
linkInfoSS! )
=SS* +
m_TextMeshProSS, 9
.SS9 :
textInfoSS: B
.SSB C
linkInfoSSC K
[SSK L
	linkIndexSSL U
]SSU V
;SSV W
Vector3XX !
worldPointInRectangleXX 1
;XX1 2 
RectTransformUtilityZZ (
.ZZ( ).
"ScreenPointToWorldPointInRectangleZZ) K
(ZZK L
m_TextMeshProZZL Y
.ZZY Z
rectTransformZZZ g
,ZZg h
InputZZi n
.ZZn o
mousePositionZZo |
,ZZ| }
m_Camera	ZZ~ Ü
,
ZZÜ á
out
ZZà ã#
worldPointInRectangle
ZZå °
)
ZZ° ¢
;
ZZ¢ £
switch\\ 
(\\ 
linkInfo\\ $
.\\$ %
	GetLinkID\\% .
(\\. /
)\\/ 0
)\\0 1
{]] 
case^^ 
$str^^ $
:^^$ %
breakbb !
;bb! "
casecc 
$strcc $
:cc$ %
breakgg !
;gg! "
}hh 
}ii 
intoo 
	wordIndexoo 
=oo 
TMP_TextUtilitiesoo  1
.oo1 2 
FindIntersectingWordoo2 F
(ooF G
m_TextMeshProooG T
,ooT U
InputooV [
.oo[ \
mousePositionoo\ i
,ooi j
Cameraook q
.ooq r
mainoor v
)oov w
;oow x
ifpp 
(pp 
	wordIndexpp 
!=pp  
-pp! "
$numpp" #
&&pp$ &
	wordIndexpp' 0
!=pp1 3
m_lastWordIndexpp4 C
)ppC D
{qq 
m_lastWordIndexrr #
=rr$ %
	wordIndexrr& /
;rr/ 0
TMP_WordInfott  
wInfott! &
=tt' (
m_TextMeshPrott) 6
.tt6 7
textInfott7 ?
.tt? @
wordInfott@ H
[ttH I
	wordIndexttI R
]ttR S
;ttS T
Vector3vv 
wordPOSvv #
=vv$ %
m_TextMeshProvv& 3
.vv3 4
	transformvv4 =
.vv= >
TransformPointvv> L
(vvL M
m_TextMeshProvvM Z
.vvZ [
textInfovv[ c
.vvc d
characterInfovvd q
[vvq r
wInfovvr w
.vvw x 
firstCharacterIndex	vvx ã
]
vvã å
.
vvå ç

bottomLeft
vvç ó
)
vvó ò
;
vvò ô
wordPOSww 
=ww 
Cameraww $
.ww$ %
mainww% )
.ww) *
WorldToScreenPointww* <
(ww< =
wordPOSww= D
)wwD E
;wwE F
Color32{{ 
[{{ 
]{{ 
vertexColors{{ *
={{+ ,
m_TextMeshPro{{- :
.{{: ;
textInfo{{; C
.{{C D
meshInfo{{D L
[{{L M
$num{{M N
]{{N O
.{{O P
colors32{{P X
;{{X Y
Color32}} 
c}} 
=}} 
new}}  #
Color32}}$ +
(}}+ ,
(}}, -
byte}}- 1
)}}1 2
Random}}2 8
.}}8 9
Range}}9 >
(}}> ?
$num}}? @
,}}@ A
$num}}B E
)}}E F
,}}F G
(}}H I
byte}}I M
)}}M N
Random}}N T
.}}T U
Range}}U Z
(}}Z [
$num}}[ \
,}}\ ]
$num}}^ a
)}}a b
,}}b c
(}}d e
byte}}e i
)}}i j
Random}}j p
.}}p q
Range}}q v
(}}v w
$num}}w x
,}}x y
$num}}z }
)}}} ~
,}}~ 
$num
}}Ä É
)
}}É Ñ
;
}}Ñ Ö
for~~ 
(~~ 
int~~ 
i~~ 
=~~  
$num~~! "
;~~" #
i~~$ %
<~~& '
wInfo~~( -
.~~- .
characterCount~~. <
;~~< =
i~~> ?
++~~? A
)~~A B
{ 
int
ÄÄ 
vertexIndex
ÄÄ '
=
ÄÄ( )
m_TextMeshPro
ÄÄ* 7
.
ÄÄ7 8
textInfo
ÄÄ8 @
.
ÄÄ@ A
characterInfo
ÄÄA N
[
ÄÄN O
wInfo
ÄÄO T
.
ÄÄT U!
firstCharacterIndex
ÄÄU h
+
ÄÄi j
i
ÄÄk l
]
ÄÄl m
.
ÄÄm n
vertexIndex
ÄÄn y
;
ÄÄy z
vertexColors
ÇÇ $
[
ÇÇ$ %
vertexIndex
ÇÇ% 0
+
ÇÇ1 2
$num
ÇÇ3 4
]
ÇÇ4 5
=
ÇÇ6 7
c
ÇÇ8 9
;
ÇÇ9 :
vertexColors
ÉÉ $
[
ÉÉ$ %
vertexIndex
ÉÉ% 0
+
ÉÉ1 2
$num
ÉÉ3 4
]
ÉÉ4 5
=
ÉÉ6 7
c
ÉÉ8 9
;
ÉÉ9 :
vertexColors
ÑÑ $
[
ÑÑ$ %
vertexIndex
ÑÑ% 0
+
ÑÑ1 2
$num
ÑÑ3 4
]
ÑÑ4 5
=
ÑÑ6 7
c
ÑÑ8 9
;
ÑÑ9 :
vertexColors
ÖÖ $
[
ÖÖ$ %
vertexIndex
ÖÖ% 0
+
ÖÖ1 2
$num
ÖÖ3 4
]
ÖÖ4 5
=
ÖÖ6 7
c
ÖÖ8 9
;
ÖÖ9 :
}
ÜÜ 
m_TextMeshPro
àà !
.
àà! "
mesh
àà" &
.
àà& '
colors32
àà' /
=
àà0 1
vertexColors
àà2 >
;
àà> ?
}
ââ 
}
ãã 
}
åå 	
public
èè 
void
èè 
OnPointerEnter
èè "
(
èè" #
PointerEventData
èè# 3
	eventData
èè4 =
)
èè= >
{
êê 	
Debug
ëë 
.
ëë 
Log
ëë 
(
ëë 
$str
ëë (
)
ëë( )
;
ëë) * 
m_isHoveringObject
íí 
=
íí  
true
íí! %
;
íí% &
}
ìì 	
public
ññ 
void
ññ 
OnPointerExit
ññ !
(
ññ! "
PointerEventData
ññ" 2
	eventData
ññ3 <
)
ññ< =
{
óó 	
Debug
òò 
.
òò 
Log
òò 
(
òò 
$str
òò '
)
òò' (
;
òò( ) 
m_isHoveringObject
ôô 
=
ôô  
false
ôô! &
;
ôô& '
}
öö 	
}
úú 
}ùù ·
'F:\Github\CS 230\unityProj\Assets\Re.cs
public 
class 
Re 
: 
MonoBehaviour 
{ 
void		 
Start			 
(		 
)		 
{

 
} 
void 
Update	 
( 
) 
{ 
} 
public 

void 
ResultsGoHome 
( 
) 
{ 
SceneManager 
. 
	LoadScene 
( 
$str *
)* +
;+ ,
} 
} ï
?F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\PointSystem.cs
public 
class 
PointSystem 
: 
MonoBehaviour (
{ 
string		 

pointKey		 
=		 
$str		 
;		 
public 

int 
CurrentScore 
{ 
get  
;  !
set" %
;% &
}& '
private 
void 
Awake 
( 
) 
{ 
CurrentScore 
= 
PlayerPrefs "
." #
GetInt# )
() *
pointKey* 2
)2 3
;3 4
} 
public 

void 
SetPoint 
( 
int 
point "
)" #
{ 
PlayerPrefs 
. 
SetInt 
( 
pointKey #
,# $
point% *
)* +
;+ ,
} 
} ≠q
GF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\NavDrawerConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
NavDrawerConfig 
: 
MonoBehaviour  -
,- .
IBeginDragHandler/ @
,@ A
IDragHandlerB N
,N O
IEndDragHandlerP _
{ 
private 	
float
 
maxPosition 
; 
private 	
float
 
minPosition 
; 
private 	
RectTransform
 
thisRectTransform )
;) *
public 
Image	 
backgroundImage 
; 
private 	
RectTransform
 #
backgroundRectTransform /
;/ 0
private 	
CanvasGroup
 !
backgroundCanvasGroup +
;+ ,
public 
Image	 
ShadowImage 
; 
private 	
CanvasGroup
 
shadowCanvasGroup '
;' (
public 
bool	 
darkenBackground 
=  
true! %
;% &
public 
bool	  
tapBackgroundToClose "
=# $
true% )
;) *
private!! 	
byte!!
 
state!! 
;!! 
private"" 	
float""
 
animStartTime"" 
;"" 
private## 	
float##
 
animDeltaTime## 
;## 
public$$ 
float$$	 
animationDuration$$  
=$$! "
$num$$# '
;$$' (
private&& 	
Vector2&&
 

currentPos&& 
;&& 
private'' 	
float''
 "
currentBackgroundAlpha'' &
;''& '
private(( 	
float((
 
currentShadowAlpha(( "
;((" #
private** 	
Vector2**
 
tempVector2** 
;** 
private++ 	
float++
  
positionCompensation++ $
;++$ %
void-- 
Awake-- 
(-- 
)-- 
{.. 
thisRectTransform// 
=// 

gameObject// !
.//! "
GetComponent//" .
<//. /
RectTransform/// <
>//< =
(//= >
)//> ?
;//? @#
backgroundRectTransform00 
=00 
backgroundImage00 ,
.00, -
GetComponent00- 9
<009 :
RectTransform00: G
>00G H
(00H I
)00I J
;00J K!
backgroundCanvasGroup11 
=11 
backgroundImage11 *
.11* +
GetComponent11+ 7
<117 8
CanvasGroup118 C
>11C D
(11D E
)11E F
;11F G
shadowCanvasGroup22 
=22 
ShadowImage22 "
.22" #
GetComponent22# /
<22/ 0
CanvasGroup220 ;
>22; <
(22< =
)22= >
;22> ?
}33 
void55 
Start55 
(55 
)55 
{66 
maxPosition77 
=77 
thisRectTransform77 "
.77" #
rect77# '
.77' (
width77( -
/77. /
$num770 1
;771 2
minPosition88 
=88 
-88 
maxPosition88 
;88 #
backgroundRectTransform:: 
.:: 
	sizeDelta:: $
=::% &
new::' *
Vector2::+ 2
(::2 3
Screen::3 9
.::9 :
width::: ?
,::? @#
backgroundRectTransform::A X
.::X Y
	sizeDelta::Y b
.::b c
y::c d
)::d e
;::e f
};; 
public== 
void==	 
BackgroundTap== 
(== 
)== 
{>> 
if?? 
(??  
tapBackgroundToClose?? 
)?? 
Close@@ 	
(@@	 

)@@
 
;@@ 
}AA 
publicCC 
voidCC	 
OpenCC 
(CC 
)CC 
{DD 

currentPosEE 
=EE 
thisRectTransformEE !
.EE! "
anchoredPositionEE" 2
;EE2 3"
currentBackgroundAlphaFF 
=FF !
backgroundCanvasGroupFF 1
.FF1 2
alphaFF2 7
;FF7 8
currentShadowAlphaGG 
=GG 
shadowCanvasGroupGG )
.GG) *
alphaGG* /
;GG/ 0!
backgroundCanvasGroupHH 
.HH 
blocksRaycastsHH '
=HH( )
trueHH* .
;HH. /
animStartTimeII 
=II 
TimeII 
.II  
realtimeSinceStartupII ,
;II, -
stateJJ 
=JJ	 

$numJJ 
;JJ 
}KK 
publicMM 
voidMM	 
CloseMM 
(MM 
)MM 
{NN 

currentPosOO 
=OO 
thisRectTransformOO !
.OO! "
anchoredPositionOO" 2
;OO2 3"
currentBackgroundAlphaPP 
=PP !
backgroundCanvasGroupPP 1
.PP1 2
alphaPP2 7
;PP7 8
currentShadowAlphaQQ 
=QQ 
shadowCanvasGroupQQ )
.QQ) *
alphaQQ* /
;QQ/ 0!
backgroundCanvasGroupRR 
.RR 
blocksRaycastsRR '
=RR( )
falseRR* /
;RR/ 0
animStartTimeSS 
=SS 
TimeSS 
.SS  
realtimeSinceStartupSS ,
;SS, -
stateTT 
=TT	 

$numTT 
;TT 
}UU 
voidWW 
UpdateWW 
(WW 
)WW 
{XX 
ifYY 
(YY 
stateYY 
==YY 
$numYY 
)YY 
{ZZ 
animDeltaTime[[ 
=[[ 
Time[[ 
.[[  
realtimeSinceStartup[[ -
-[[. /
animStartTime[[0 =
;[[= >
if]] 
(]] 
animDeltaTime]] 
<=]] 
animationDuration]] *
)]]* +
{^^ 
thisRectTransform__ 
.__ 
anchoredPosition__ '
=__( )
Anim__* .
.__. /
Quint__/ 4
.__4 5
Out__5 8
(__8 9

currentPos__9 C
,__C D
new__E H
Vector2__I P
(__P Q
maxPosition__Q \
,__\ ]
thisRectTransform__^ o
.__o p
anchoredPosition	__p Ä
.
__Ä Å
y
__Å Ç
)
__Ç É
,
__É Ñ
animDeltaTime
__Ö í
,
__í ì
animationDuration
__î •
)
__• ¶
;
__¶ ß!
backgroundCanvasGroupaa 
.aa 
alphaaa  
=aa! "
Animaa# '
.aa' (
Quintaa( -
.aa- .
Outaa. 1
(aa1 2"
currentBackgroundAlphaaa2 H
,aaH I
$numaaJ L
,aaL M
animDeltaTimeaaN [
,aa[ \
animationDurationaa] n
)aan o
;aao p
shadowCanvasGroupbb 
.bb 
alphabb 
=bb 
Animbb #
.bb# $
Quintbb$ )
.bb) *
Inbb* ,
(bb, -
currentShadowAlphabb- ?
,bb? @
$numbbA C
,bbC D
animDeltaTimebbE R
,bbR S
animationDurationbbT e
/bbf g
$numbbh j
)bbj k
;bbk l
}cc 
elsedd 
{ee 
thisRectTransformff 
.ff 
anchoredPositionff '
=ff( )
newff* -
Vector2ff. 5
(ff5 6
maxPositionff6 A
,ffA B
thisRectTransformffC T
.ffT U
anchoredPositionffU e
.ffe f
yfff g
)ffg h
;ffh i!
backgroundCanvasGroupgg 
.gg 
alphagg  
=gg! "
$numgg# %
;gg% &
statehh 

=hh 
$numhh 
;hh 
}ii 
}jj 
elsekk 
ifkk 

(kk 
statekk 
==kk 
$numkk 
)kk 
{ll 
animDeltaTimemm 
=mm 
Timemm 
.mm  
realtimeSinceStartupmm -
-mm. /
animStartTimemm0 =
;mm= >
ifoo 
(oo 
animDeltaTimeoo 
<=oo 
animationDurationoo *
)oo* +
{pp 
thisRectTransformqq 
.qq 
anchoredPositionqq '
=qq( )
Animqq* .
.qq. /
Quintqq/ 4
.qq4 5
Outqq5 8
(qq8 9

currentPosqq9 C
,qqC D
newqqE H
Vector2qqI P
(qqP Q
minPositionqqQ \
,qq\ ]
thisRectTransformqq^ o
.qqo p
anchoredPosition	qqp Ä
.
qqÄ Å
y
qqÅ Ç
)
qqÇ É
,
qqÉ Ñ
animDeltaTime
qqÖ í
,
qqí ì
animationDuration
qqî •
)
qq• ¶
;
qq¶ ß!
backgroundCanvasGroupss 
.ss 
alphass  
=ss! "
Animss# '
.ss' (
Quintss( -
.ss- .
Outss. 1
(ss1 2"
currentBackgroundAlphass2 H
,ssH I
$numssJ L
,ssL M
animDeltaTimessN [
,ss[ \
animationDurationss] n
)ssn o
;sso p
shadowCanvasGrouptt 
.tt 
alphatt 
=tt 
Animtt #
.tt# $
Quinttt$ )
.tt) *
Intt* ,
(tt, -
currentShadowAlphatt- ?
,tt? @
$numttA C
,ttC D
animDeltaTimettE R
,ttR S
animationDurationttT e
)tte f
;ttf g
}uu 
elsevv 
{ww 
thisRectTransformxx 
.xx 
anchoredPositionxx '
=xx( )
newxx* -
Vector2xx. 5
(xx5 6
minPositionxx6 A
,xxA B
thisRectTransformxxC T
.xxT U
anchoredPositionxxU e
.xxe f
yxxf g
)xxg h
;xxh i!
backgroundCanvasGroupyy 
.yy 
alphayy  
=yy! "
$numyy# %
;yy% &
statezz 

=zz 
$numzz 
;zz 
}{{ 
}|| 
thisRectTransform~~ 
.~~ 
anchoredPosition~~ %
=~~& '
new~~( +
Vector2~~, 3
(~~3 4
Mathf~~4 9
.~~9 :
Clamp~~: ?
(~~? @
thisRectTransform~~@ Q
.~~Q R
anchoredPosition~~R b
.~~b c
x~~c d
,~~d e
minPosition~~f q
,~~q r
maxPosition~~s ~
)~~~ 
,	~~ Ä
thisRectTransform
~~Å í
.
~~í ì
anchoredPosition
~~ì £
.
~~£ §
y
~~§ •
)
~~• ¶
;
~~¶ ß
} 
public
ÅÅ 
void
ÅÅ	 
OnBeginDrag
ÅÅ 
(
ÅÅ 
PointerEventData
ÅÅ *
data
ÅÅ+ /
)
ÅÅ/ 0
{
ÇÇ 
state
ÉÉ 
=
ÉÉ	 

$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
public
ÜÜ 
void
ÜÜ	 
OnDrag
ÜÜ 
(
ÜÜ 
PointerEventData
ÜÜ %
data
ÜÜ& *
)
ÜÜ* +
{
áá 
tempVector2
àà 
=
àà 
thisRectTransform
àà "
.
àà" #
position
àà# +
;
àà+ ,
tempVector2
ââ 
.
ââ 
x
ââ 
+=
ââ 
data
ââ 
.
ââ 
delta
ââ 
.
ââ 
x
ââ  
;
ââ  !
thisRectTransform
ãã 
.
ãã 
position
ãã 
=
ãã 
tempVector2
ãã  +
;
ãã+ ,#
backgroundCanvasGroup
çç 
.
çç 
alpha
çç 
=
çç  
$num
çç! "
-
çç# $
(
çç% &
maxPosition
çç& 1
-
çç2 3
thisRectTransform
çç4 E
.
ççE F
anchoredPosition
ççF V
.
ççV W
x
ççW X
)
ççX Y
/
ççZ [
(
çç\ ]
maxPosition
çç] h
-
ççi j
minPosition
ççk v
)
ççv w
;
ççw x
shadowCanvasGroup
éé 
.
éé 
alpha
éé 
=
éé 
$num
éé 
-
éé  
(
éé! "
maxPosition
éé" -
-
éé. /
thisRectTransform
éé0 A
.
ééA B
anchoredPosition
ééB R
.
ééR S
x
ééS T
)
ééT U
/
ééV W
(
ééX Y
(
ééY Z
maxPosition
ééZ e
-
ééf g
minPosition
ééh s
)
éés t
*
ééu v
$num
ééw x
)
ééx y
;
ééy z
}
èè 
public
ëë 
void
ëë	 
	OnEndDrag
ëë 
(
ëë 
PointerEventData
ëë (
data
ëë) -
)
ëë- .
{
íí 
if
ìì 
(
ìì 
Mathf
ìì 
.
ìì 
Abs
ìì 
(
ìì 
data
ìì 
.
ìì 
delta
ìì 
.
ìì 
x
ìì 
)
ìì 
>=
ìì !
$num
ìì" &
)
ìì& '
{
îî 
if
ïï 
(
ïï 
data
ïï 
.
ïï 
delta
ïï 
.
ïï 
x
ïï 
>
ïï 
$num
ïï 
)
ïï 
Open
ññ 	
(
ññ	 

)
ññ
 
;
ññ 
else
óó 
Close
òò 

(
òò
 
)
òò 
;
òò 
}
ôô 
else
öö 
{
õõ 
if
úú 
(
úú 
(
úú 	
thisRectTransform
úú	 
.
úú 
anchoredPosition
úú +
.
úú+ ,
x
úú, -
-
úú. /
minPosition
úú0 ;
)
úú; <
>
úú= >
(
úú? @
maxPosition
úú@ K
-
úúL M
thisRectTransform
úúN _
.
úú_ `
anchoredPosition
úú` p
.
úúp q
x
úúq r
)
úúr s
)
úús t
Open
ùù 	
(
ùù	 

)
ùù
 
;
ùù 
else
ûû 
Close
üü 

(
üü
 
)
üü 
;
üü 
}
†† 
}
°° 
}
¢¢ 
}££ á¶
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SwitchConfig.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 
class 
SwitchConfig 
: 
MonoBehaviour *
{ 
public 
float	 
animationDuration  
=! "
$num# '
;' (
public 
Color	 
onColor 
; 
public 
Color	 
offColor 
; 
public 
Color	 
disabledColor 
; 
public 
Color	 
backOffColor 
; 
public 
Color	 
backDisabledColor  
;  !
public 
bool	 
changeTextColor 
; 
public 
Color	 
textNormalColor 
; 
public 
Color	 
textDisabledColor  
;  !
public!! 
bool!!	 
changeRippleColor!! 
;!!  
[$$ 
SerializeField$$ 
]$$ 
private$$ 
Image$$  
switchImage$$! ,
;$$, -
[%% 
SerializeField%% 
]%% 
private%% 
Image%%  
	backImage%%! *
;%%* +
[&& 
SerializeField&& 
]&& 
private&& 
Text&& 
text&&  $
;&&$ %
private(( 	
RectTransform((
 
switchRectTransform(( +
;((+ ,
private)) 	
CheckBoxToggler))
 
checkBoxToggler)) )
;))) *
private** 	
RippleConfig**
 
rippleConfig** #
;**# $
Toggle,, 
toggle,,	 
;,, 
private.. 	
bool..
 '
lastToggleInteractableState.. *
;..* +
private// 	
bool//
 
lastToggleState// 
;// 
private11 	
float11
 !
currentSwitchPosition11 %
;11% &
private22 	
Color22
 
currentColor22 
;22 
private33 	
Color33
 
currentBackColor33  
;33  !
private44 	
Color44
 
currentTextColor44  
;44  !
private66 	
int66
 
state66 
;66 
private77 	
float77
 
animStartTime77 
;77 
private88 	
float88
 
animDeltaTime88 
;88 
void:: 
OnEnable:: 
(:: 
):: 
{;; 
toggle== 	
===
 

gameObject== 
.== 
GetComponent== #
<==# $
Toggle==$ *
>==* +
(==+ ,
)==, -
;==- .
switchRectTransform>> 
=>> 
switchImage>> $
.>>$ %
GetComponent>>% 1
<>>1 2
RectTransform>>2 ?
>>>? @
(>>@ A
)>>A B
;>>B C
checkBoxToggler?? 
=?? 
text?? 
.?? 
GetComponent?? &
<??& '
CheckBoxToggler??' 6
>??6 7
(??7 8
)??8 9
;??9 :
rippleConfig@@ 
=@@ 

gameObject@@ 
.@@ 
GetComponent@@ )
<@@) *
RippleConfig@@* 6
>@@6 7
(@@7 8
)@@8 9
;@@9 :
}AA 
voidCC 
StartCC 
(CC 
)CC 
{DD '
lastToggleInteractableStateEE 
=EE  
toggleEE! '
.EE' (
interactableEE( 4
;EE4 5
ifGG 
(GG '
lastToggleInteractableStateGG "
)GG" #
{HH 
ifII 
(II 
lastToggleStateII 
!=II 
toggleII !
.II! "
isOnII" &
)II& '
{JJ 
lastToggleStateKK 
=KK 
toggleKK 
.KK 
isOnKK "
;KK" #
ifMM 
(MM 	
lastToggleStateMM	 
)MM 
TurnOnSilentNN 
(NN 
)NN 
;NN 
elseOO 	
TurnOffSilentPP 
(PP 
)PP 
;PP 
}QQ 
}RR 
ifTT 
(TT 
changeRippleColorTT 
)TT 
rippleConfigUU 
.UU 
rippleColorUU 
=UU 
	backImageUU (
.UU( )
colorUU) .
;UU. /
}VV 
publicXX 
voidXX	 
ToggleSwitchXX 
(XX 
)XX 
{YY 
ifZZ 
(ZZ 
toggleZZ 
.ZZ 
isOnZZ 
)ZZ 
TurnOn[[ 

([[ 
)[[ 
;[[ 
else\\ 
TurnOff]] 
(]] 
)]] 
;]] 
}^^ 
public`` 
void``	 
TurnOn`` 
(`` 
)`` 
{aa !
currentSwitchPositionbb 
=bb 
switchRectTransformbb .
.bb. /
anchoredPositionbb/ ?
.bb? @
xbb@ A
;bbA B
currentColorcc 
=cc 
switchImagecc 
.cc 
colorcc #
;cc# $
currentBackColordd 
=dd 
	backImagedd 
.dd  
colordd  %
;dd% &
currentTextColoree 
=ee 
textee 
.ee 
coloree  
;ee  !
animStartTimegg 
=gg 
Timegg 
.gg  
realtimeSinceStartupgg ,
;gg, -
statehh 
=hh	 

$numhh 
;hh 
}ii 
privatekk 	
voidkk
 
TurnOnSilentkk 
(kk 
)kk 
{ll 
ifmm 
(mm 
switchRectTransformmm 
.mm 
anchoredPositionmm +
!=mm, .
newmm/ 2
Vector2mm3 :
(mm: ;
$nummm; =
,mm= >
$nummm? A
)mmA B
)mmB C
switchRectTransformnn 
.nn 
anchoredPositionnn (
=nn) *
newnn+ .
Vector2nn/ 6
(nn6 7
$numnn7 9
,nn9 :
$numnn; =
)nn= >
;nn> ?
ifpp 
(pp '
lastToggleInteractableStatepp "
)pp" #
{qq 
switchImagerr 
.rr 
colorrr 
=rr 
onColorrr 
;rr  
	backImagess 
.ss 
colorss 
=ss 
onColorss 
;ss 
ifuu 
(uu 
changeTextColoruu 
)uu 
textvv 	
.vv	 

colorvv
 
=vv 
onColorvv 
;vv 
ifxx 
(xx 
changeRippleColorxx 
)xx 
rippleConfigyy 
.yy 
rippleColoryy 
=yy 
onColoryy  '
;yy' (
}zz 
}{{ 
public}} 
void}}	 
TurnOff}} 
(}} 
)}} 
{~~ !
currentSwitchPosition 
= 
switchRectTransform .
.. /
anchoredPosition/ ?
.? @
x@ A
;A B
currentColor
ÄÄ 
=
ÄÄ 
switchImage
ÄÄ 
.
ÄÄ 
color
ÄÄ #
;
ÄÄ# $
currentBackColor
ÅÅ 
=
ÅÅ 
	backImage
ÅÅ 
.
ÅÅ  
color
ÅÅ  %
;
ÅÅ% &
currentTextColor
ÇÇ 
=
ÇÇ 
text
ÇÇ 
.
ÇÇ 
color
ÇÇ  
;
ÇÇ  !
animStartTime
ÑÑ 
=
ÑÑ 
Time
ÑÑ 
.
ÑÑ "
realtimeSinceStartup
ÑÑ ,
;
ÑÑ, -
state
ÖÖ 
=
ÖÖ	 

$num
ÖÖ 
;
ÖÖ 
}
ÜÜ 
private
àà 	
void
àà
 
TurnOffSilent
àà 
(
àà 
)
àà 
{
ââ 
	backImage
ää 
.
ää 
enabled
ää 
=
ää 
true
ää 
;
ää 
if
ãã 
(
ãã !
switchRectTransform
ãã 
.
ãã 
anchoredPosition
ãã +
!=
ãã, .
new
ãã/ 2
Vector2
ãã3 :
(
ãã: ;
-
ãã; <
$num
ãã< >
,
ãã> ?
$num
ãã@ B
)
ããB C
)
ããC D!
switchRectTransform
åå 
.
åå 
anchoredPosition
åå (
=
åå) *
new
åå+ .
Vector2
åå/ 6
(
åå6 7
-
åå7 8
$num
åå8 :
,
åå: ;
$num
åå< >
)
åå> ?
;
åå? @
if
éé 
(
éé )
lastToggleInteractableState
éé "
)
éé" #
{
èè 
switchImage
êê 
.
êê 
color
êê 
=
êê 
offColor
êê  
;
êê  !
	backImage
ëë 
.
ëë 
color
ëë 
=
ëë 
backOffColor
ëë "
;
ëë" #
if
ìì 
(
ìì 
changeTextColor
ìì 
)
ìì 
text
îî 	
.
îî	 

color
îî
 
=
îî 
textNormalColor
îî !
;
îî! "
if
ññ 
(
ññ 
changeRippleColor
ññ 
)
ññ 
rippleConfig
óó 
.
óó 
rippleColor
óó 
=
óó 
backOffColor
óó  ,
;
óó, -
}
òò 
}
ôô 
private
õõ 	
void
õõ
 
EnableSwitch
õõ 
(
õõ 
)
õõ 
{
úú 
if
ùù 
(
ùù 
toggle
ùù 
.
ùù 
isOn
ùù 
)
ùù 
{
ûû 
switchImage
üü 
.
üü 
color
üü 
=
üü 
onColor
üü 
;
üü  
	backImage
†† 
.
†† 
color
†† 
=
†† 
onColor
†† 
;
†† 
if
°° 
(
°° 
changeTextColor
°° 
)
°° 
text
¢¢ 	
.
¢¢	 

color
¢¢
 
=
¢¢ 
onColor
¢¢ 
;
¢¢ 
else
££ 
text
§§ 	
.
§§	 

color
§§
 
=
§§ 
textNormalColor
§§ !
;
§§! "
}
•• 
else
¶¶ 
{
ßß 
switchImage
®® 
.
®® 
color
®® 
=
®® 
offColor
®®  
;
®®  !
	backImage
©© 
.
©© 
color
©© 
=
©© 
backOffColor
©© "
;
©©" #
text
™™ 
.
™™ 	
color
™™	 
=
™™ 
textNormalColor
™™  
;
™™  !
}
´´ 
checkBoxToggler
≠≠ 
.
≠≠ 
enabled
≠≠ 
=
≠≠ 
true
≠≠ !
;
≠≠! "
rippleConfig
ÆÆ 
.
ÆÆ 
enabled
ÆÆ 
=
ÆÆ 
true
ÆÆ 
;
ÆÆ 
}
ØØ 
private
±± 	
void
±±
 
DisableSwitch
±± 
(
±± 
)
±± 
{
≤≤ 
switchImage
≥≥ 
.
≥≥ 
color
≥≥ 
=
≥≥ 
disabledColor
≥≥ $
;
≥≥$ %
	backImage
¥¥ 
.
¥¥ 
color
¥¥ 
=
¥¥ 
backDisabledColor
¥¥ &
;
¥¥& '
text
µµ 
.
µµ 
color
µµ 
=
µµ 
disabledColor
µµ 
;
µµ 
checkBoxToggler
∑∑ 
.
∑∑ 
enabled
∑∑ 
=
∑∑ 
false
∑∑ "
;
∑∑" #
rippleConfig
∏∏ 
.
∏∏ 
enabled
∏∏ 
=
∏∏ 
false
∏∏ 
;
∏∏  
}
ππ 
void
ªª 
Update
ªª 
(
ªª 
)
ªª 
{
ºº 
animDeltaTime
ΩΩ 
=
ΩΩ 
Time
ΩΩ 
.
ΩΩ "
realtimeSinceStartup
ΩΩ ,
-
ΩΩ- .
animStartTime
ΩΩ/ <
;
ΩΩ< =
if
øø 
(
øø 
state
øø 
==
øø 
$num
øø 
)
øø 
{
¿¿ 
if
¡¡ 
(
¡¡ 
animDeltaTime
¡¡ 
<=
¡¡ 
animationDuration
¡¡ *
)
¡¡* +
{
¬¬ !
switchRectTransform
√√ 
.
√√ 
anchoredPosition
√√ )
=
√√* +
Anim
√√, 0
.
√√0 1
Quint
√√1 6
.
√√6 7
SoftOut
√√7 >
(
√√> ?
new
√√? B
Vector2
√√C J
(
√√J K#
currentSwitchPosition
√√K `
,
√√` a
$num
√√b d
)
√√d e
,
√√e f
new
√√g j
Vector2
√√k r
(
√√r s
$num
√√s u
,
√√u v
$num
√√w y
)
√√y z
,
√√z {
animDeltaTime√√| â
,√√â ä!
animationDuration√√ã ú
)√√ú ù
;√√ù û
switchImage
ƒƒ 
.
ƒƒ 
color
ƒƒ 
=
ƒƒ 
Anim
ƒƒ 
.
ƒƒ 
Quint
ƒƒ #
.
ƒƒ# $
SoftOut
ƒƒ$ +
(
ƒƒ+ ,
currentColor
ƒƒ, 8
,
ƒƒ8 9
onColor
ƒƒ: A
,
ƒƒA B
animDeltaTime
ƒƒC P
,
ƒƒP Q
animationDuration
ƒƒR c
)
ƒƒc d
;
ƒƒd e
	backImage
≈≈ 
.
≈≈ 
color
≈≈ 
=
≈≈ 
Anim
≈≈ 
.
≈≈ 
Quint
≈≈ !
.
≈≈! "
SoftOut
≈≈" )
(
≈≈) *
currentBackColor
≈≈* :
,
≈≈: ;
onColor
≈≈< C
,
≈≈C D
animDeltaTime
≈≈E R
,
≈≈R S
animationDuration
≈≈T e
)
≈≈e f
;
≈≈f g
if
«« 
(
«« 	
changeTextColor
««	 
)
«« 
text
»» 

.
»»
 
color
»» 
=
»» 
Anim
»» 
.
»» 
Quint
»» 
.
»» 
SoftOut
»» %
(
»»% &
currentTextColor
»»& 6
,
»»6 7
onColor
»»8 ?
,
»»? @
animDeltaTime
»»A N
,
»»N O
animationDuration
»»P a
)
»»a b
;
»»b c
if
   
(
   	
changeRippleColor
  	 
)
   
rippleConfig
ÀÀ 
.
ÀÀ 
rippleColor
ÀÀ 
=
ÀÀ  
switchImage
ÀÀ! ,
.
ÀÀ, -
color
ÀÀ- 2
;
ÀÀ2 3
}
ÃÃ 
else
ÕÕ 
{
ŒŒ !
switchRectTransform
œœ 
.
œœ 
anchoredPosition
œœ )
=
œœ* +
new
œœ, /
Vector2
œœ0 7
(
œœ7 8
$num
œœ8 :
,
œœ: ;
$num
œœ< >
)
œœ> ?
;
œœ? @
switchImage
–– 
.
–– 
color
–– 
=
–– 
onColor
––  
;
––  !
	backImage
—— 
.
—— 
color
—— 
=
—— 
onColor
—— 
;
—— 
if
”” 
(
”” 	
changeTextColor
””	 
)
”” 
text
‘‘ 

.
‘‘
 
color
‘‘ 
=
‘‘ 
onColor
‘‘ 
;
‘‘ 
if
÷÷ 
(
÷÷ 	
changeRippleColor
÷÷	 
)
÷÷ 
rippleConfig
◊◊ 
.
◊◊ 
rippleColor
◊◊ 
=
◊◊  
onColor
◊◊! (
;
◊◊( )
state
ÿÿ 

=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
else
€€ 
if
€€ 

(
€€ 
state
€€ 
==
€€ 
$num
€€ 
)
€€ 
{
‹‹ 
if
›› 
(
›› 
animDeltaTime
›› 
<=
›› 
animationDuration
›› *
*
››+ ,
$num
››- 2
)
››2 3
{
ﬁﬁ !
switchRectTransform
ﬂﬂ 
.
ﬂﬂ 
anchoredPosition
ﬂﬂ )
=
ﬂﬂ* +
Anim
ﬂﬂ, 0
.
ﬂﬂ0 1
Quint
ﬂﬂ1 6
.
ﬂﬂ6 7
SoftOut
ﬂﬂ7 >
(
ﬂﬂ> ?
new
ﬂﬂ? B
Vector2
ﬂﬂC J
(
ﬂﬂJ K#
currentSwitchPosition
ﬂﬂK `
,
ﬂﬂ` a
$num
ﬂﬂb d
)
ﬂﬂd e
,
ﬂﬂe f
new
ﬂﬂg j
Vector2
ﬂﬂk r
(
ﬂﬂr s
-
ﬂﬂs t
$num
ﬂﬂt v
,
ﬂﬂv w
$num
ﬂﬂx z
)
ﬂﬂz {
,
ﬂﬂ{ |
animDeltaTimeﬂﬂ} ä
,ﬂﬂä ã!
animationDurationﬂﬂå ù
)ﬂﬂù û
;ﬂﬂû ü
switchImage
‡‡ 
.
‡‡ 
color
‡‡ 
=
‡‡ 
Anim
‡‡ 
.
‡‡ 
Sept
‡‡ "
.
‡‡" #
InOut
‡‡# (
(
‡‡( )
currentColor
‡‡) 5
,
‡‡5 6
offColor
‡‡7 ?
,
‡‡? @
animDeltaTime
‡‡A N
,
‡‡N O
animationDuration
‡‡P a
*
‡‡b c
$num
‡‡d i
)
‡‡i j
;
‡‡j k
	backImage
·· 
.
·· 
color
·· 
=
·· 
Anim
·· 
.
·· 
Sept
··  
.
··  !
InOut
··! &
(
··& '
currentBackColor
··' 7
,
··7 8
backOffColor
··9 E
,
··E F
animDeltaTime
··G T
,
··T U
animationDuration
··V g
*
··h i
$num
··j o
)
··o p
;
··p q
if
„„ 
(
„„ 	
changeTextColor
„„	 
)
„„ 
text
‰‰ 

.
‰‰
 
color
‰‰ 
=
‰‰ 
Anim
‰‰ 
.
‰‰ 
Quint
‰‰ 
.
‰‰ 
SoftOut
‰‰ %
(
‰‰% &
currentTextColor
‰‰& 6
,
‰‰6 7
textNormalColor
‰‰8 G
,
‰‰G H
animDeltaTime
‰‰I V
,
‰‰V W
animationDuration
‰‰X i
*
‰‰j k
$num
‰‰l q
)
‰‰q r
;
‰‰r s
if
ÊÊ 
(
ÊÊ 	
changeRippleColor
ÊÊ	 
)
ÊÊ 
rippleConfig
ÁÁ 
.
ÁÁ 
rippleColor
ÁÁ 
=
ÁÁ  
switchImage
ÁÁ! ,
.
ÁÁ, -
color
ÁÁ- 2
;
ÁÁ2 3
}
ËË 
else
ÈÈ 
{
ÍÍ !
switchRectTransform
ÎÎ 
.
ÎÎ 
anchoredPosition
ÎÎ )
=
ÎÎ* +
new
ÎÎ, /
Vector2
ÎÎ0 7
(
ÎÎ7 8
-
ÎÎ8 9
$num
ÎÎ9 ;
,
ÎÎ; <
$num
ÎÎ= ?
)
ÎÎ? @
;
ÎÎ@ A
switchImage
ÌÌ 
.
ÌÌ 
color
ÌÌ 
=
ÌÌ 
offColor
ÌÌ !
;
ÌÌ! "
	backImage
ÓÓ 
.
ÓÓ 
color
ÓÓ 
=
ÓÓ 
backOffColor
ÓÓ #
;
ÓÓ# $
if
 
(
 	
changeTextColor
	 
)
 
text
ÒÒ 

.
ÒÒ
 
color
ÒÒ 
=
ÒÒ 
textNormalColor
ÒÒ "
;
ÒÒ" #
if
ÛÛ 
(
ÛÛ 	
changeRippleColor
ÛÛ	 
)
ÛÛ 
rippleConfig
ÙÙ 
.
ÙÙ 
rippleColor
ÙÙ 
=
ÙÙ  
backOffColor
ÙÙ! -
;
ÙÙ- .
state
ıı 

=
ıı 
$num
ıı 
;
ıı 
}
ˆˆ 
}
˜˜ 
if
˘˘ 
(
˘˘ )
lastToggleInteractableState
˘˘ "
!=
˘˘# %
toggle
˘˘& ,
.
˘˘, -
interactable
˘˘- 9
)
˘˘9 :
{
˙˙ )
lastToggleInteractableState
˚˚ 
=
˚˚  !
toggle
˚˚" (
.
˚˚( )
interactable
˚˚) 5
;
˚˚5 6
if
˝˝ 
(
˝˝ )
lastToggleInteractableState
˝˝ #
)
˝˝# $
EnableSwitch
˛˛ 
(
˛˛ 
)
˛˛ 
;
˛˛ 
else
ˇˇ 
DisableSwitch
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 
Application
ÉÉ 
.
ÉÉ 
	isPlaying
ÉÉ 
)
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
lastToggleState
ÖÖ 
!=
ÖÖ 
toggle
ÖÖ !
.
ÖÖ! "
isOn
ÖÖ" &
)
ÖÖ& '
{
ÜÜ 
lastToggleState
áá 
=
áá 
toggle
áá 
.
áá 
isOn
áá "
;
áá" #
if
ââ 
(
ââ 	
lastToggleState
ââ	 
)
ââ 
TurnOnSilent
ää 
(
ää 
)
ää 
;
ää 
else
ãã 	
TurnOffSilent
åå 
(
åå 
)
åå 
;
åå 
}
çç 
if
èè 
(
èè 
changeRippleColor
èè 
)
èè 
rippleConfig
êê 
.
êê 
rippleColor
êê 
=
êê 
switchImage
êê  +
.
êê+ ,
color
êê, 1
;
êê1 2
}
ëë 
}
íí 
}
ìì 
}îî ’q
XF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\VertexShakeA.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
VertexShakeA 
: 
MonoBehaviour  -
{		 
public 
float 
AngleMultiplier $
=% &
$num' +
;+ ,
public 
float 
SpeedMultiplier $
=% &
$num' +
;+ ,
public 
float 
ScaleMultiplier $
=% &
$num' +
;+ ,
public 
float 
RotationMultiplier '
=( )
$num* .
;. /
private 
TMP_Text 
m_TextComponent (
;( )
private 
bool 
hasTextChanged #
;# $
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 
GetComponent *
<* +
TMP_Text+ 3
>3 4
(4 5
)5 6
;6 7
} 	
void 
OnEnable 
( 
) 
{ 	
TMPro_EventManager 
. 
TEXT_CHANGED_EVENT 1
.1 2
Add2 5
(5 6
ON_TEXT_CHANGED6 E
)E F
;F G
} 	
void 
	OnDisable 
( 
) 
{   	
TMPro_EventManager!! 
.!! 
TEXT_CHANGED_EVENT!! 1
.!!1 2
Remove!!2 8
(!!8 9
ON_TEXT_CHANGED!!9 H
)!!H I
;!!I J
}"" 	
void%% 
Start%% 
(%% 
)%% 
{&& 	
StartCoroutine'' 
('' 
AnimateVertexColors'' .
(''. /
)''/ 0
)''0 1
;''1 2
}(( 	
void++ 
ON_TEXT_CHANGED++ 
(++ 
Object++ #
obj++$ '
)++' (
{,, 	
if-- 
(-- 
obj-- 
=-- 
m_TextComponent-- %
)--% &
hasTextChanged.. 
=..  
true..! %
;..% &
}// 	
IEnumerator55 
AnimateVertexColors55 '
(55' (
)55( )
{66 	
m_TextComponent:: 
.:: 
ForceMeshUpdate:: +
(::+ ,
)::, -
;::- .
TMP_TextInfo<< 
textInfo<< !
=<<" #
m_TextComponent<<$ 3
.<<3 4
textInfo<<4 <
;<<< =
	Matrix4x4>> 
matrix>> 
;>> 
Vector3?? 
[?? 
]?? 
[?? 
]?? 
copyOfVertices?? &
=??' (
new??) ,
Vector3??- 4
[??4 5
$num??5 6
]??6 7
[??7 8
]??8 9
;??9 :
hasTextChangedAA 
=AA 
trueAA !
;AA! "
whileCC 
(CC 
trueCC 
)CC 
{DD 
ifFF 
(FF 
hasTextChangedFF "
)FF" #
{GG 
ifHH 
(HH 
copyOfVerticesHH &
.HH& '
LengthHH' -
<HH. /
textInfoHH0 8
.HH8 9
meshInfoHH9 A
.HHA B
LengthHHB H
)HHH I
copyOfVerticesII &
=II' (
newII) ,
Vector3II- 4
[II4 5
textInfoII5 =
.II= >
meshInfoII> F
.IIF G
LengthIIG M
]IIM N
[IIN O
]IIO P
;IIP Q
forKK 
(KK 
intKK 
iKK 
=KK  
$numKK! "
;KK" #
iKK$ %
<KK& '
textInfoKK( 0
.KK0 1
meshInfoKK1 9
.KK9 :
LengthKK: @
;KK@ A
iKKB C
++KKC E
)KKE F
{LL 
intMM 
lengthMM "
=MM# $
textInfoMM% -
.MM- .
meshInfoMM. 6
[MM6 7
iMM7 8
]MM8 9
.MM9 :
verticesMM: B
.MMB C
LengthMMC I
;MMI J
copyOfVerticesNN &
[NN& '
iNN' (
]NN( )
=NN* +
newNN, /
Vector3NN0 7
[NN7 8
lengthNN8 >
]NN> ?
;NN? @
}OO 
hasTextChangedQQ "
=QQ# $
falseQQ% *
;QQ* +
}RR 
intTT 
characterCountTT "
=TT# $
textInfoTT% -
.TT- .
characterCountTT. <
;TT< =
ifWW 
(WW 
characterCountWW "
==WW# %
$numWW& '
)WW' (
{XX 
yieldYY 
returnYY  
newYY! $
WaitForSecondsYY% 3
(YY3 4
$numYY4 9
)YY9 :
;YY: ;
continueZZ 
;ZZ 
}[[ 
int]] 
	lineCount]] 
=]] 
textInfo]]  (
.]]( )
	lineCount]]) 2
;]]2 3
for`` 
(`` 
int`` 
i`` 
=`` 
$num`` 
;`` 
i``  !
<``" #
	lineCount``$ -
;``- .
i``/ 0
++``0 2
)``2 3
{aa 
intcc 
firstcc 
=cc 
textInfocc  (
.cc( )
lineInfocc) 1
[cc1 2
icc2 3
]cc3 4
.cc4 5
firstCharacterIndexcc5 H
;ccH I
intdd 
lastdd 
=dd 
textInfodd '
.dd' (
lineInfodd( 0
[dd0 1
idd1 2
]dd2 3
.dd3 4
lastCharacterIndexdd4 F
;ddF G
Vector3gg 
centerOfLinegg (
=gg) *
(gg+ ,
textInfogg, 4
.gg4 5
characterInfogg5 B
[ggB C
firstggC H
]ggH I
.ggI J

bottomLeftggJ T
+ggU V
textInfoggW _
.gg_ `
characterInfogg` m
[ggm n
lastggn r
]ggr s
.ggs t
topRightggt |
)gg| }
/gg~ 
$num
ggÄ Å
;
ggÅ Ç

Quaternionhh 
rotationhh '
=hh( )

Quaternionhh* 4
.hh4 5
Eulerhh5 :
(hh: ;
$numhh; <
,hh< =
$numhh> ?
,hh? @
RandomhhA G
.hhG H
RangehhH M
(hhM N
-hhN O
$numhhO T
,hhT U
$numhhV [
)hh[ \
*hh] ^
RotationMultiplierhh_ q
)hhq r
;hhr s
forkk 
(kk 
intkk 
jkk 
=kk  
firstkk! &
;kk& '
jkk( )
<=kk* ,
lastkk- 1
;kk1 2
jkk3 4
++kk4 6
)kk6 7
{ll 
ifnn 
(nn 
!nn 
textInfonn %
.nn% &
characterInfonn& 3
[nn3 4
jnn4 5
]nn5 6
.nn6 7
	isVisiblenn7 @
)nn@ A
continueoo $
;oo$ %
intrr 
materialIndexrr )
=rr* +
textInforr, 4
.rr4 5
characterInforr5 B
[rrB C
jrrC D
]rrD E
.rrE F"
materialReferenceIndexrrF \
;rr\ ]
intuu 
vertexIndexuu '
=uu( )
textInfouu* 2
.uu2 3
characterInfouu3 @
[uu@ A
juuA B
]uuB C
.uuC D
vertexIndexuuD O
;uuO P
Vector3xx 
[xx  
]xx  !
sourceVerticesxx" 0
=xx1 2
textInfoxx3 ;
.xx; <
meshInfoxx< D
[xxD E
materialIndexxxE R
]xxR S
.xxS T
verticesxxT \
;xx\ ]
copyOfVertices|| &
[||& '
materialIndex||' 4
]||4 5
[||5 6
vertexIndex||6 A
+||B C
$num||D E
]||E F
=||G H
sourceVertices||I W
[||W X
vertexIndex||X c
+||d e
$num||f g
]||g h
-||i j
centerOfLine||k w
;||w x
copyOfVertices}} &
[}}& '
materialIndex}}' 4
]}}4 5
[}}5 6
vertexIndex}}6 A
+}}B C
$num}}D E
]}}E F
=}}G H
sourceVertices}}I W
[}}W X
vertexIndex}}X c
+}}d e
$num}}f g
]}}g h
-}}i j
centerOfLine}}k w
;}}w x
copyOfVertices~~ &
[~~& '
materialIndex~~' 4
]~~4 5
[~~5 6
vertexIndex~~6 A
+~~B C
$num~~D E
]~~E F
=~~G H
sourceVertices~~I W
[~~W X
vertexIndex~~X c
+~~d e
$num~~f g
]~~g h
-~~i j
centerOfLine~~k w
;~~w x
copyOfVertices &
[& '
materialIndex' 4
]4 5
[5 6
vertexIndex6 A
+B C
$numD E
]E F
=G H
sourceVerticesI W
[W X
vertexIndexX c
+d e
$numf g
]g h
-i j
centerOfLinek w
;w x
float
ÇÇ 
randomScale
ÇÇ )
=
ÇÇ* +
Random
ÇÇ, 2
.
ÇÇ2 3
Range
ÇÇ3 8
(
ÇÇ8 9
$num
ÇÇ9 ?
-
ÇÇ@ A
$num
ÇÇB H
*
ÇÇI J
ScaleMultiplier
ÇÇK Z
,
ÇÇZ [
$num
ÇÇ\ b
+
ÇÇc d
$num
ÇÇe k
*
ÇÇl m
ScaleMultiplier
ÇÇn }
)
ÇÇ} ~
;
ÇÇ~ 
matrix
ÖÖ 
=
ÖÖ  
	Matrix4x4
ÖÖ! *
.
ÖÖ* +
TRS
ÖÖ+ .
(
ÖÖ. /
Vector3
ÖÖ/ 6
.
ÖÖ6 7
one
ÖÖ7 :
,
ÖÖ: ;
rotation
ÖÖ< D
,
ÖÖD E
Vector3
ÖÖF M
.
ÖÖM N
one
ÖÖN Q
*
ÖÖR S
randomScale
ÖÖT _
)
ÖÖ_ `
;
ÖÖ` a
copyOfVertices
àà &
[
àà& '
materialIndex
àà' 4
]
àà4 5
[
àà5 6
vertexIndex
àà6 A
+
ààB C
$num
ààD E
]
ààE F
=
ààG H
matrix
ààI O
.
ààO P
MultiplyPoint3x4
ààP `
(
àà` a
copyOfVertices
ààa o
[
àào p
materialIndex
ààp }
]
àà} ~
[
àà~ 
vertexIndexàà ä
+ààã å
$numààç é
]ààé è
)ààè ê
;ààê ë
copyOfVertices
ââ &
[
ââ& '
materialIndex
ââ' 4
]
ââ4 5
[
ââ5 6
vertexIndex
ââ6 A
+
ââB C
$num
ââD E
]
ââE F
=
ââG H
matrix
ââI O
.
ââO P
MultiplyPoint3x4
ââP `
(
ââ` a
copyOfVertices
ââa o
[
ââo p
materialIndex
ââp }
]
ââ} ~
[
ââ~ 
vertexIndexââ ä
+ââã å
$numââç é
]ââé è
)ââè ê
;ââê ë
copyOfVertices
ää &
[
ää& '
materialIndex
ää' 4
]
ää4 5
[
ää5 6
vertexIndex
ää6 A
+
ääB C
$num
ääD E
]
ääE F
=
ääG H
matrix
ääI O
.
ääO P
MultiplyPoint3x4
ääP `
(
ää` a
copyOfVertices
ääa o
[
ääo p
materialIndex
ääp }
]
ää} ~
[
ää~ 
vertexIndexää ä
+ääã å
$numääç é
]ääé è
)ääè ê
;ääê ë
copyOfVertices
ãã &
[
ãã& '
materialIndex
ãã' 4
]
ãã4 5
[
ãã5 6
vertexIndex
ãã6 A
+
ããB C
$num
ããD E
]
ããE F
=
ããG H
matrix
ããI O
.
ããO P
MultiplyPoint3x4
ããP `
(
ãã` a
copyOfVertices
ããa o
[
ãão p
materialIndex
ããp }
]
ãã} ~
[
ãã~ 
vertexIndexãã ä
+ããã å
$numããç é
]ããé è
)ããè ê
;ããê ë
copyOfVertices
éé &
[
éé& '
materialIndex
éé' 4
]
éé4 5
[
éé5 6
vertexIndex
éé6 A
+
ééB C
$num
ééD E
]
ééE F
+=
ééG I
centerOfLine
ééJ V
;
ééV W
copyOfVertices
èè &
[
èè& '
materialIndex
èè' 4
]
èè4 5
[
èè5 6
vertexIndex
èè6 A
+
èèB C
$num
èèD E
]
èèE F
+=
èèG I
centerOfLine
èèJ V
;
èèV W
copyOfVertices
êê &
[
êê& '
materialIndex
êê' 4
]
êê4 5
[
êê5 6
vertexIndex
êê6 A
+
êêB C
$num
êêD E
]
êêE F
+=
êêG I
centerOfLine
êêJ V
;
êêV W
copyOfVertices
ëë &
[
ëë& '
materialIndex
ëë' 4
]
ëë4 5
[
ëë5 6
vertexIndex
ëë6 A
+
ëëB C
$num
ëëD E
]
ëëE F
+=
ëëG I
centerOfLine
ëëJ V
;
ëëV W
}
íí 
}
ìì 
for
ññ 
(
ññ 
int
ññ 
i
ññ 
=
ññ 
$num
ññ 
;
ññ 
i
ññ  !
<
ññ" #
textInfo
ññ$ ,
.
ññ, -
meshInfo
ññ- 5
.
ññ5 6
Length
ññ6 <
;
ññ< =
i
ññ> ?
++
ññ? A
)
ññA B
{
óó 
textInfo
òò 
.
òò 
meshInfo
òò %
[
òò% &
i
òò& '
]
òò' (
.
òò( )
mesh
òò) -
.
òò- .
vertices
òò. 6
=
òò7 8
copyOfVertices
òò9 G
[
òòG H
i
òòH I
]
òòI J
;
òòJ K
m_TextComponent
ôô #
.
ôô# $
UpdateGeometry
ôô$ 2
(
ôô2 3
textInfo
ôô3 ;
.
ôô; <
meshInfo
ôô< D
[
ôôD E
i
ôôE F
]
ôôF G
.
ôôG H
mesh
ôôH L
,
ôôL M
i
ôôN O
)
ôôO P
;
ôôP Q
}
öö 
yield
úú 
return
úú 
new
úú  
WaitForSeconds
úú! /
(
úú/ 0
$num
úú0 4
)
úú4 5
;
úú5 6
}
ùù 
}
ûû 	
}
†† 
}°° ≤&
=F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\AnswerTag.cs
public 
class 
	AnswerTag 
: 
MonoBehaviour &
{ 
bool 
	answerBot	 
= 
false 
; 

Randomizer 
sn1 
; 

Randomizer		 
sn2		 
;		 

Randomizer

 
sn3

 
;

 

Randomizer 
sn4 
; 
QuizManager 
sc 
; 
void 
Start	 
( 
) 
{ 
	answerBot 
= 
false 
; 
sc 

= 

GameObject 
. 
Find 
( 
$str +
)+ ,
., -
GetComponent- 9
<9 :
QuizManager: E
>E F
(F G
)G H
;H I
} 
public 

void 
instantiateBotRight #
(# $
)$ %
{ 
sc 

= 

GameObject 
. 
Find 
( 
$str +
)+ ,
., -
GetComponent- 9
<9 :
QuizManager: E
>E F
(F G
)G H
;H I
sn1 
= 

GameObject 
. 
Find 
( 
$str ,
), -
.- .
GetComponent. :
<: ;

Randomizer; E
>E F
(F G
)G H
;H I
	answerBot 
= 
sn1 
. 
correctPosition '
(' (
$num( )
)) *
;* +
sc 

.
 
incrementDecrement 
( 
	answerBot '
)' (
;( )
} 
public 

void 
instantiateBotLeft "
(" #
)# $
{ 
sc   

=   

GameObject   
.   
Find   
(   
$str   +
)  + ,
.  , -
GetComponent  - 9
<  9 :
QuizManager  : E
>  E F
(  F G
)  G H
;  H I
sn2!! 
=!! 

GameObject!! 
.!! 
Find!! 
(!! 
$str!! ,
)!!, -
.!!- .
GetComponent!!. :
<!!: ;

Randomizer!!; E
>!!E F
(!!F G
)!!G H
;!!H I
	answerBot"" 
="" 
sn2"" 
."" 
correctPosition"" '
(""' (
$num""( )
)"") *
;""* +
sc## 

.##
 
incrementDecrement## 
(## 
	answerBot## '
)##' (
;##( )
}$$ 
public&& 	
void&&
 
instantiateUpLeft&&  
(&&  !
)&&! "
{'' 
sc(( 

=(( 

GameObject(( 
.(( 
Find(( 
((( 
$str(( +
)((+ ,
.((, -
GetComponent((- 9
<((9 :
QuizManager((: E
>((E F
(((F G
)((G H
;((H I
sn3)) 
=)) 

GameObject)) 
.)) 
Find)) 
()) 
$str)) ,
))), -
.))- .
GetComponent)). :
<)): ;

Randomizer)); E
>))E F
())F G
)))G H
;))H I
	answerBot** 
=** 
sn3** 
.** 
correctPosition** '
(**' (
$num**( )
)**) *
;*** +
sc++ 

.++
 
incrementDecrement++ 
(++ 
	answerBot++ '
)++' (
;++( )
},, 
public.. 

void.. 
instatiateUpRight.. !
(..! "
).." #
{// 
sc00 

=00 

GameObject00 
.00 
Find00 
(00 
$str00 +
)00+ ,
.00, -
GetComponent00- 9
<009 :
QuizManager00: E
>00E F
(00F G
)00G H
;00H I
sn411 
=11 

GameObject11 
.11 
Find11 
(11 
$str11 ,
)11, -
.11- .
GetComponent11. :
<11: ;

Randomizer11; E
>11E F
(11F G
)11G H
;11H I
	answerBot22 
=22 
sn422 
.22 
correctPosition22 '
(22' (
$num22( )
)22) *
;22* +
sc33 

.33
 
incrementDecrement33 
(33 
	answerBot33 '
)33' (
;33( )
}44 
}55 À"
WF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\Benchmark04.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
Benchmark04 
: 
MonoBehaviour ,
{		 
public 
int 
	SpawnType 
= 
$num  
;  !
public 
int 
MinPointSize 
=  !
$num" $
;$ %
public 
int 
MaxPointSize 
=  !
$num" $
;$ %
public 
int 
Steps 
= 
$num 
; 
private 
	Transform 
m_Transform %
;% &
void 
Start 
( 
) 
{ 	
m_Transform 
= 
	transform #
;# $
float 

lineHeight 
= 
$num  
;  !
float 
	orthoSize 
= 
Camera $
.$ %
main% )
.) *
orthographicSize* :
=; <
Screen= C
.C D
heightD J
/K L
$numM N
;N O
float 
ratio 
= 
( 
float  
)  !
Screen! '
.' (
width( -
/. /
Screen0 6
.6 7
height7 =
;= >
for 
( 
int 
i 
= 
MinPointSize %
;% &
i' (
<=) +
MaxPointSize, 8
;8 9
i: ;
+=< >
Steps? D
)D E
{ 
if   
(   
	SpawnType   
==    
$num  ! "
)  " #
{!! 

GameObject## 
go## !
=##" #
new##$ '

GameObject##( 2
(##2 3
$str##3 <
+##= >
i##? @
+##A B
$str##C I
)##I J
;##J K
if%% 
(%% 

lineHeight%% "
>%%# $
	orthoSize%%% .
*%%/ 0
$num%%1 2
)%%2 3
return%%4 :
;%%: ;
go'' 
.'' 
	transform''  
.''  !
position''! )
=''* +
m_Transform'', 7
.''7 8
position''8 @
+''A B
new''C F
Vector3''G N
(''N O
ratio''O T
*''U V
-''W X
	orthoSize''X a
*''b c
$num''d j
,''j k
	orthoSize''l u
*''v w
$num''x ~
-	'' Ä

lineHeight
''Å ã
,
''ã å
$num
''ç é
)
''é è
;
''è ê
TextMeshPro)) 
textMeshPro))  +
=)), -
go)). 0
.))0 1
AddComponent))1 =
<))= >
TextMeshPro))> I
>))I J
())J K
)))K L
;))L M
textMeshPro.. 
...  
rectTransform..  -
...- .
pivot... 3
=..4 5
new..6 9
Vector2..: A
(..A B
$num..B C
,..C D
$num..E I
)..I J
;..J K
textMeshPro00 
.00  
enableWordWrapping00  2
=003 4
false005 :
;00: ;
textMeshPro11 
.11  
extraPadding11  ,
=11- .
true11/ 3
;113 4
textMeshPro22 
.22  
isOrthographic22  .
=22/ 0
true221 5
;225 6
textMeshPro33 
.33  
fontSize33  (
=33) *
i33+ ,
;33, -
textMeshPro55 
.55  
text55  $
=55% &
i55' (
+55) *
$str55+ L
;55L M
textMeshPro66 
.66  
color66  %
=66& '
new66( +
Color3266, 3
(663 4
$num664 7
,667 8
$num669 <
,66< =
$num66> A
,66A B
$num66C F
)66F G
;66G H

lineHeight88 
+=88 !
i88" #
;88# $
}99 
else:: 
{;; 
}PP 
}QQ 
}RR 	
}TT 
}UU Æ

CF:\Github\CS 230\unityProj\Assets\Scenes\Scripts\QuestionDisplay.cs
public 
class 
QuestionDisplay 
: 
MonoBehaviour ,
{ 
void 
Start	 
( 
) 
{		 
QuizManager

 
n

 
=

 

GameObject

 
.

 
Find

 #
(

# $
$str

$ 2
)

2 3
.

3 4
GetComponent

4 @
<

@ A
QuizManager

A L
>

L M
(

M N
)

N O
;

O P
string 
question 
= 
n 
. 
returnQuest  
(  !
)! "
;" #
display 
( 	
question	 
) 
; 
} 
public 

void 
display 
( 
string 
question '
)' (
{ 

GameObject 
. 
Find 
( 
$str "
)" #
.# $"
GetComponentInChildren$ :
<: ;
Text; ?
>? @
(@ A
)A B
.B C
textC G
=H I
questionJ R
;R S
} 
} Ë8
>F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\Randomizer.cs
public 
class 

Randomizer 
: 
MonoBehaviour '
{ 
int 

correctPos 
= 
$num 
; 
void 
Start	 
( 
) 
{ 
QuizManager 
n 
= 

GameObject "
." #
Find# '
(' (
$str( 6
)6 7
.7 8
GetComponent8 D
<D E
QuizManagerE P
>P Q
(Q R
)R S
;S T
string 
[ 
] 
wrong 
= 
{ 
n 
. 
returnWrong1 )
() *
)* +
,+ ,
n- .
.. /
returnWrong2/ ;
(; <
)< =
,= >
n? @
.@ A
returnWrong3A M
(M N
)N O
}P Q
;Q R
	randomize 
( 
n 
. 
	returnAns 
( 
) 
,  
wrong! &
)& '
;' (
} 
void 
	randomize	 
( 
string 
correct !
,! "
string# )
[) *
]* +
	incorrect, 5
)5 6
{ 
List   
<   
int   
>   
btns   
=   
new   
List   !
<  ! "
int  " %
>  % &
{  ' (
$num  ) *
,  * +
$num  , -
,  - .
$num  / 0
,  0 1
$num  2 3
}  3 4
;  4 5

correctPos"" 
="" 
UnityEngine""  
.""  !
Random""! '
.""' (
Range""( -
(""- .
$num"". /
,""/ 0
btns""0 4
.""4 5
Count""5 :
)"": ;
;""; <
btns%% 
=%% 
	assignBtn%% 
(%% 
btns%% 
,%% 
correct%% &
,%%& '

correctPos%%( 2
)%%2 3
;%%3 4
for(( 
((( 
int(( 
i(( 
=(( 
$num(( 
;(( 
i(( 
<(( 
$num(( 
;(( 
i(( 
++(( !
)((! "
{)) 	
int** 
position** 
=** 
UnityEngine** &
.**& '
Random**' -
.**- .
Range**. 3
(**3 4
$num**4 5
,**5 6
btns**7 ;
.**; <
Count**< A
-**A B
$num**B C
)**C D
;**D E
position,, 
=,, 
btns,, 
.,, 
ToArray,, #
(,,# $
),,$ %
[,,% &
position,,& .
],,. /
;,,/ 0
btns.. 
=.. 
	assignBtn.. 
(.. 
btns.. !
,..! "
	incorrect..# ,
[.., -
i..- .
]... /
,../ 0
position..1 9
)..9 :
;..: ;
}// 	
}00 
List22 
<22 	
int22	 
>22 
	assignBtn22 
(22 
List22 
<22 
int22  
>22  !
btns22" &
,22& '
string22( .
answer22/ 5
,225 6
int227 :
position22; C
)22C D
{33 
switch66 
(66 
position66 
)66 
{77 	
case88 
$num88 
:88 

GameObject:: 
.:: 
Find:: 
(::  
$str::  (
)::( )
.::) *"
GetComponentInChildren::* @
<::@ A
Text::A E
>::E F
(::F G
)::G H
.::H I
text::I M
=::N O
answer::P V
;::V W
btns<< 
.<< 
Remove<< 
(<< 
$num<< 
)<< 
;<< 
break== 
;== 
case>> 
$num>> 
:>> 

GameObject@@ 
.@@ 
Find@@ 
(@@  
$str@@  )
)@@) *
.@@* +"
GetComponentInChildren@@+ A
<@@A B
Text@@B F
>@@F G
(@@G H
)@@H I
.@@I J
text@@J N
=@@O P
answer@@Q W
;@@W X
btnsBB 
.BB 
RemoveBB 
(BB 
$numBB 
)BB 
;BB 
breakCC 
;CC 
caseDD 
$numDD 
:DD 

GameObjectFF 
.FF 
FindFF 
(FF  
$strFF  )
)FF) *
.FF* +"
GetComponentInChildrenFF+ A
<FFA B
TextFFB F
>FFF G
(FFG H
)FFH I
.FFI J
textFFJ N
=FFO P
answerFFQ W
;FFW X
btnsHH 
.HH 
RemoveHH 
(HH 
$numHH 
)HH 
;HH 
breakII 
;II 
caseJJ 
$numJJ 
:JJ 

GameObjectLL 
.LL 
FindLL 
(LL  
$strLL  *
)LL* +
.LL+ ,"
GetComponentInChildrenLL, B
<LLB C
TextLLC G
>LLG H
(LLH I
)LLI J
.LLJ K
textLLK O
=LLP Q
answerLLR X
;LLX Y
btnsNN 
.NN 
RemoveNN 
(NN 
$numNN 
)NN 
;NN 
breakOO 
;OO 
}PP 	
returnQQ 
btnsQQ 
;QQ 
}RR 
publicVV 

boolVV 
correctPositionVV 
(VV  
intVV  #
	buttonPosVV$ -
)VV- .
{WW 
ifXX 

(XX 
	buttonPosXX 
==XX 

correctPosXX #
)XX# $
returnYY 
trueYY 
;YY 
return[[ 
false[[ 
;[[ 
}\\ 
public__ 

void__ 
refresh__ 
(__ 
)__ 
{`` 
QuizManageraa 
naa 
=aa 

GameObjectaa "
.aa" #
Findaa# '
(aa' (
$straa( 6
)aa6 7
.aa7 8
GetComponentaa8 D
<aaD E
QuizManageraaE P
>aaP Q
(aaQ R
)aaR S
;aaS T
stringbb 
[bb 
]bb 
wrongbb 
=bb 
{bb 
nbb 
.bb 
returnWrong1bb )
(bb) *
)bb* +
,bb+ ,
nbb- .
.bb. /
returnWrong2bb/ ;
(bb; <
)bb< =
,bb= >
nbb? @
.bb@ A
returnWrong3bbA M
(bbM N
)bbN O
}bbP Q
;bbQ R
	randomizecc 
(cc 
ncc 
.cc 
	returnAnscc 
(cc 
)cc 
,cc  
wrongcc! &
)cc& '
;cc' (
}dd 
}ee Á
GF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\MaterialGlobals.cs
	namespace 	

MaterialUI
 
{ 
public 

class 
MaterialGlobals  
:! "
MonoBehaviour# 0
{ 
public 
static 
Vector4 
shadowSpriteBorder 0
;0 1
public 
static 
float 
uiScale #
;# $
} 
} ÃÔ
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\RippleConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
RippleConfig 
: 
MonoBehaviour *
,* + 
IPointerEnterHandler, @
,@ A
IPointerDownHandlerB U
,U V
IPointerUpHandlerW h
,h i
IPointerExitHandlerj }
{ 
[ 
HideInInspector 
( 
) 
] 
public 
bool	 
autoSize 
= 
true 
; 
[ 
HideInInspector 
( 
) 
] 
public 
float	 
sizePercentage 
= 
$num  #
;# $
[ 
HideInInspector 
( 
) 
] 
public 
int	 

rippleSize 
= 
$num 
; 
[ 
HideInInspector 
( 
) 
] 
public 
float	 
rippleSpeed 
= 
$num 
;  
[ 
HideInInspector 
( 
) 
] 
public 
Color	 
rippleColor 
= 
Color "
." #
black# (
;( )
[ 
HideInInspector 
( 
) 
] 
public   
float  	 
rippleStartAlpha   
=    !
$num  " &
;  & '
[!! 
HideInInspector!! 
(!! 
)!! 
]!! 
public"" 
float""	 
rippleEndAlpha"" 
="" 
$num""  $
;""$ %
private$$ 	
LayoutGroup$$
 
[$$ 
]$$ 
groups$$ 
;$$ 
private%% 	
bool%%
 
[%% 
]%% 

groupBools%% 
;%% 
['' 
SerializeField'' 
('' 
)'' 
]'' 
public(( 
enum((	 
HighlightActive(( 
{)) 
Never** 
,** 	
Hovered++ 

,++
 
Clicked,, 

}-- 
[// 
SerializeField// 
(// 
)// 
]// 
[00 
HideInInspector00 
(00 
)00 
]00 
public11 
HighlightActive11	 
highlightWhen11 &
=11' (
HighlightActive11) 8
.118 9
Clicked119 @
;11@ A
[33 
HideInInspector33 
(33 
)33 
]33 
public44 
bool44	 
moveTowardCenter44 
=44  
false44! &
;44& '
[55 
HideInInspector55 
(55 
)55 
]55 
public66 
bool66	 

toggleMask66 
=66 
true66 
;66  
[88 
HideInInspector88 
]88 
public88 
bool88 
dontRippleOnScroll88  2
;882 3
[99 
HideInInspector99 
]99 
public99 
float99   
scrollDelayCheckTime99! 5
=996 7
$num998 =
;99= >
private;; 	
bool;;
 
	hasLifted;; 
;;; 
private<< 	
Vector2<<
 
mousePos<< 
;<< 
private>> 	

RippleAnim>>
 
currentRippleAnim>> &
;>>& '
private?? 	
Mask??
 
thisMask?? 
;?? 
private@@ 	
Canvas@@
 
	theCanvas@@ 
;@@ 
privateAA 	
CameraAA
 
	theCameraAA 
;AA 
privateBB 	
ImageBB
 
	thisImageBB 
;BB 
privateCC 	
boolCC
 

worldSpaceCC 
;CC 
privateEE 	
ColorEE
 
normalColorEE 
;EE 
privateFF 	
ColorFF
 
highlightColorFF 
;FF 
privateHH 	
ColorHH
 
	tempColorHH 
;HH 
privateII 	
ColorII
 
currentColorII 
;II 
privateKK 	
intKK
 
stateKK 
;KK 
privateLL 	
floatLL
 
animStartTimeLL 
;LL 
privateMM 	
floatMM
 
animDeltaTimeMM 
;MM 
privateNN 	
floatNN
 
animationDurationNN !
;NN! "
privatePP 	
RectPP
 
sizeReferenceRectPP  
;PP  !
publicRR 
voidRR	 
SetupRR 
(RR 
)RR 
{SS 
	thisImageTT 
=TT 

gameObjectTT 
.TT 
GetComponentTT &
<TT& '
ImageTT' ,
>TT, -
(TT- .
)TT. /
;TT/ 0
}UU 
voidWW 
AwakeWW 
(WW 
)WW 
{XX 
RippleControlYY 
.YY 

InitializeYY 
(YY 
)YY 
;YY 
	thisImageZZ 
=ZZ 

gameObjectZZ 
.ZZ 
GetComponentZZ &
<ZZ& '
ImageZZ' ,
>ZZ, -
(ZZ- .
)ZZ. /
;ZZ/ 0
}[[ 
void]] 
Start]] 
(]] 
)]] 
{^^ 
if__ 
(__ 

toggleMask__ 
)__ 
{`` 
ifaa 
(aa 

gameObjectaa 
.aa 
GetComponentaa 
<aa  
Maskaa  $
>aa$ %
(aa% &
)aa& '
)aa' (
thisMaskbb 
=bb 

gameObjectbb 
.bb 
GetComponentbb '
<bb' (
Maskbb( ,
>bb, -
(bb- .
)bb. /
;bb/ 0
elsecc 
{dd 
thisMaskee 
=ee 

gameObjectee 
.ee 
AddComponentee '
<ee' (
Maskee( ,
>ee, -
(ee- .
)ee. /
;ee/ 0
thisMaskff 
.ff 
enabledff 
=ff 
falseff 
;ff 
}gg 
}hh 
	theCanvasjj 
=jj 

gameObjectjj 
.jj  
GetComponentInParentjj .
<jj. /
Canvasjj/ 5
>jj5 6
(jj6 7
)jj7 8
;jj8 9
ifll 
(ll 
	theCanvasll 
.ll 

renderModell 
!=ll 

RenderModell )
.ll) *
ScreenSpaceOverlayll* <
)ll< =
{mm 
ifnn 
(nn 
	theCanvasnn 
.nn 
worldCamerann 
)nn 
{oo 
	theCamerapp 
=pp 
	theCanvaspp 
.pp 
worldCamerapp &
;pp& '

worldSpaceqq 
=qq 
trueqq 
;qq 
}rr 
}ss 
Refreshuu 

(uu
 
)uu 
;uu 
}vv 
publicxx 
voidxx	 
Refreshxx 
(xx 
)xx 
{yy 
ifzz 
(zz 
autoSizezz 
)zz 
{{{ 
StartCoroutine|| 
(|| 
GetRect|| 
(|| 
)|| 
)|| 
;|| 
}}} 
else~~ 
{ 
RefreshContinued
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
}
ÇÇ 
private
ÑÑ 	
void
ÑÑ
 
RefreshContinued
ÑÑ 
(
ÑÑ  
)
ÑÑ  !
{
ÖÖ 
normalColor
ÜÜ 
=
ÜÜ 
	thisImage
ÜÜ 
.
ÜÜ 
color
ÜÜ  
;
ÜÜ  !
if
àà 
(
àà 
highlightWhen
àà 
!=
àà 
HighlightActive
àà '
.
àà' (
Never
àà( -
)
àà- .
{
ââ 
highlightColor
ää 
=
ää 
rippleColor
ää  
;
ää  !
HSBColor
åå 
highlightColorHSB
åå 
=
åå  
HSBColor
åå! )
.
åå) *
	FromColor
åå* 3
(
åå3 4
highlightColor
åå4 B
)
ååB C
;
ååC D
HSBColor
çç 
normalColorHSB
çç 
=
çç 
HSBColor
çç &
.
çç& '
	FromColor
çç' 0
(
çç0 1
normalColor
çç1 <
)
çç< =
;
çç= >
if
èè 
(
èè 
highlightColorHSB
èè 
.
èè 
s
èè 
<=
èè 
$num
èè $
)
èè$ %
{
êê 
if
ëë 
(
ëë 	
highlightColorHSB
ëë	 
.
ëë 
b
ëë 
>
ëë 
$num
ëë #
)
ëë# $
{
íí 
if
ìì 
(
ìì	 

normalColorHSB
ìì
 
.
ìì 
b
ìì 
>
ìì 
$num
ìì !
)
ìì! "
{
îî 
highlightColorHSB
ïï 
.
ïï 
h
ïï 
=
ïï 
normalColorHSB
ïï +
.
ïï+ ,
h
ïï, -
;
ïï- .
highlightColorHSB
ññ 
.
ññ 
s
ññ 
=
ññ 
normalColorHSB
ññ +
.
ññ+ ,
s
ññ, -
-
ññ. /
$num
ññ0 4
;
ññ4 5
highlightColorHSB
óó 
.
óó 
b
óó 
=
óó 
normalColorHSB
óó +
.
óó+ ,
b
óó, -
+
óó. /
$num
óó0 4
;
óó4 5
}
òò 
else
ôô 

{
öö 
highlightColorHSB
õõ 
.
õõ 
h
õõ 
=
õõ 
normalColorHSB
õõ +
.
õõ+ ,
h
õõ, -
;
õõ- .
highlightColorHSB
úú 
.
úú 
s
úú 
=
úú 
normalColorHSB
úú +
.
úú+ ,
s
úú, -
;
úú- .
highlightColorHSB
ùù 
.
ùù 
b
ùù 
=
ùù 
normalColorHSB
ùù +
.
ùù+ ,
b
ùù, -
+
ùù. /
$num
ùù0 4
;
ùù4 5
}
ûû 
}
†† 
else
°° 	
{
¢¢ 
highlightColorHSB
££ 
.
££ 
h
££ 
=
££ 
normalColorHSB
££ *
.
££* +
h
££+ ,
;
££, -
highlightColorHSB
§§ 
.
§§ 
s
§§ 
=
§§ 
normalColorHSB
§§ *
.
§§* +
s
§§+ ,
;
§§, -
highlightColorHSB
•• 
.
•• 
b
•• 
=
•• 
normalColorHSB
•• *
.
••* +
b
••+ ,
-
••- .
$num
••/ 4
;
••4 5
}
¶¶ 
highlightColor
®® 
=
®® 
HSBColor
®® 
.
®® 
ToColor
®® &
(
®®& '
highlightColorHSB
®®' 8
)
®®8 9
;
®®9 :
highlightColor
©© 
.
©© 
a
©© 
=
©© 
normalColor
©© #
.
©©# $
a
©©$ %
;
©©% &
}
™™ 
else
´´ 
{
¨¨ 
highlightColor
≠≠ 
.
≠≠ 
r
≠≠ 
=
≠≠ 
Anim
≠≠ 
.
≠≠ 
Linear
≠≠ #
(
≠≠# $
normalColor
≠≠$ /
.
≠≠/ 0
r
≠≠0 1
,
≠≠1 2
highlightColor
≠≠3 A
.
≠≠A B
r
≠≠B C
,
≠≠C D
$num
≠≠E I
,
≠≠I J
$num
≠≠K M
)
≠≠M N
;
≠≠N O
highlightColor
ÆÆ 
.
ÆÆ 
g
ÆÆ 
=
ÆÆ 
Anim
ÆÆ 
.
ÆÆ 
Linear
ÆÆ #
(
ÆÆ# $
normalColor
ÆÆ$ /
.
ÆÆ/ 0
g
ÆÆ0 1
,
ÆÆ1 2
highlightColor
ÆÆ3 A
.
ÆÆA B
g
ÆÆB C
,
ÆÆC D
$num
ÆÆE I
,
ÆÆI J
$num
ÆÆK M
)
ÆÆM N
;
ÆÆN O
highlightColor
ØØ 
.
ØØ 
b
ØØ 
=
ØØ 
Anim
ØØ 
.
ØØ 
Linear
ØØ #
(
ØØ# $
normalColor
ØØ$ /
.
ØØ/ 0
b
ØØ0 1
,
ØØ1 2
highlightColor
ØØ3 A
.
ØØA B
b
ØØB C
,
ØØC D
$num
ØØE I
,
ØØI J
$num
ØØK M
)
ØØM N
;
ØØN O
highlightColor
∞∞ 
.
∞∞ 
a
∞∞ 
=
∞∞ 
Anim
∞∞ 
.
∞∞ 
Linear
∞∞ #
(
∞∞# $
normalColor
∞∞$ /
.
∞∞/ 0
a
∞∞0 1
,
∞∞1 2
highlightColor
∞∞3 A
.
∞∞A B
a
∞∞B C
,
∞∞C D
$num
∞∞E I
,
∞∞I J
$num
∞∞K M
)
∞∞M N
;
∞∞N O
}
±± 
}
≤≤ 
animationDuration
¥¥ 
=
¥¥ 
$num
¥¥ 
/
¥¥ 
rippleSpeed
¥¥ &
;
¥¥& '
}
µµ 
void
∑∑ 
Update
∑∑ 
(
∑∑ 
)
∑∑ 
{
∏∏ 
if
ππ 
(
ππ 
state
ππ 
==
ππ 
$num
ππ 
)
ππ 
{
∫∫ 
animDeltaTime
ªª 
=
ªª 
Time
ªª 
.
ªª "
realtimeSinceStartup
ªª -
-
ªª. /
animStartTime
ªª0 =
;
ªª= >
if
ΩΩ 
(
ΩΩ 
animDeltaTime
ΩΩ 
<
ΩΩ 
animationDuration
ΩΩ )
)
ΩΩ) *
{
ææ 
	thisImage
øø 
.
øø 
color
øø 
=
øø 
Anim
øø 
.
øø 
Quint
øø !
.
øø! "
Out
øø" %
(
øø% &
currentColor
øø& 2
,
øø2 3
highlightColor
øø4 B
,
øøB C
animDeltaTime
øøD Q
,
øøQ R
animationDuration
øøS d
)
øød e
;
øøe f
}
¿¿ 
else
¡¡ 
{
¬¬ 
	thisImage
√√ 
.
√√ 
color
√√ 
=
√√ 
highlightColor
√√ %
;
√√% &
state
ƒƒ 

=
ƒƒ 
$num
ƒƒ 
;
ƒƒ 
}
≈≈ 
}
∆∆ 
else
«« 
if
«« 

(
«« 
state
«« 
==
«« 
$num
«« 
)
«« 
{
»» 
animDeltaTime
…… 
=
…… 
Time
…… 
.
…… "
realtimeSinceStartup
…… -
-
……. /
animStartTime
……0 =
;
……= >
if
ÀÀ 
(
ÀÀ 
animDeltaTime
ÀÀ 
<
ÀÀ 
animationDuration
ÀÀ )
)
ÀÀ) *
{
ÃÃ 
	thisImage
ÕÕ 
.
ÕÕ 
color
ÕÕ 
=
ÕÕ 
Anim
ÕÕ 
.
ÕÕ 
Quint
ÕÕ !
.
ÕÕ! "
Out
ÕÕ" %
(
ÕÕ% &
currentColor
ÕÕ& 2
,
ÕÕ2 3
normalColor
ÕÕ4 ?
,
ÕÕ? @
animDeltaTime
ÕÕA N
,
ÕÕN O
animationDuration
ÕÕP a
)
ÕÕa b
;
ÕÕb c
}
ŒŒ 
else
œœ 
{
–– 
	thisImage
—— 
.
—— 
color
—— 
=
—— 
normalColor
—— "
;
——" #
state
““ 

=
““ 
$num
““ 
;
““ 
}
”” 
}
‘‘ 
}
’’ 
public
◊◊ 
void
◊◊	 
OnPointerEnter
◊◊ 
(
◊◊ 
PointerEventData
◊◊ -
data
◊◊. 2
)
◊◊2 3
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
highlightWhen
ŸŸ 
==
ŸŸ 
HighlightActive
ŸŸ '
.
ŸŸ' (
Hovered
ŸŸ( /
)
ŸŸ/ 0
{
⁄⁄ 
currentColor
€€ 
=
€€ 
	thisImage
€€ 
.
€€ 
color
€€ "
;
€€" #
animStartTime
‹‹ 
=
‹‹ 
Time
‹‹ 
.
‹‹ "
realtimeSinceStartup
‹‹ -
;
‹‹- .
state
›› 	
=
››
 
$num
›› 
;
›› 
}
ﬁﬁ 
}
ﬂﬂ 
public
·· 
void
··	 
OnPointerDown
·· 
(
·· 
PointerEventData
·· -
data
··. 2
)
··2 3
{
‚‚ 
if
„„ 
(
„„ 

worldSpace
„„ 
)
„„ 
StartCoroutine
‰‰ 
(
‰‰ 
	DragCheck
‰‰ 
(
‰‰ 
	theCamera
‰‰ &
.
‰‰& ' 
ScreenToWorldPoint
‰‰' 9
(
‰‰9 :
new
‰‰: =
Vector3
‰‰> E
(
‰‰F G
data
‰‰G K
.
‰‰K L
position
‰‰L T
.
‰‰T U
x
‰‰U V
,
‰‰V W
data
‰‰X \
.
‰‰\ ]
position
‰‰] e
.
‰‰e f
y
‰‰f g
,
‰‰g h
Vector3
‰‰i p
.
‰‰p q
Distance
‰‰q y
(
‰‰y z
	theCamera‰‰z É
.‰‰É Ñ
	transform‰‰Ñ ç
.‰‰ç é
position‰‰é ñ
,‰‰ñ ó
	transform‰‰ò °
.‰‰° ¢
position‰‰¢ ™
)‰‰™ ´
-‰‰¨ ≠
Mathf‰‰Æ ≥
.‰‰≥ ¥
Sqrt‰‰¥ ∏
(‰‰∏ π
Vector2‰‰π ¿
.‰‰¿ ¡
Distance‰‰¡ …
(‰‰…  
data‰‰  Œ
.‰‰Œ œ
position‰‰œ ◊
,‰‰◊ ÿ
new‰‰Ÿ ‹
Vector2‰‰› ‰
(‰‰‰ Â
Screen‰‰Â Î
.‰‰Î Ï
width‰‰Ï Ò
/‰‰Ú Û
$num‰‰Ù ˆ
,‰‰ˆ ˜
Screen‰‰¯ ˛
.‰‰˛ ˇ
height‰‰ˇ Ö
/‰‰Ü á
$num‰‰à ä
)‰‰ä ã
)‰‰ã å
)‰‰å ç
)‰‰ç é
)‰‰é è
)‰‰è ê
)‰‰ê ë
;‰‰ë í
else
ÂÂ 
StartCoroutine
ÊÊ 
(
ÊÊ 
	DragCheck
ÊÊ 
(
ÊÊ 
data
ÊÊ "
.
ÊÊ" #
position
ÊÊ# +
)
ÊÊ+ ,
)
ÊÊ, -
;
ÊÊ- .
if
ËË 
(
ËË 
thisMask
ËË 
&&
ËË 

toggleMask
ËË 
)
ËË 
thisMask
ÈÈ 
.
ÈÈ 
enabled
ÈÈ 
=
ÈÈ 
true
ÈÈ 
;
ÈÈ 
if
ÎÎ 
(
ÎÎ 
highlightWhen
ÎÎ 
==
ÎÎ 
HighlightActive
ÎÎ '
.
ÎÎ' (
Clicked
ÎÎ( /
)
ÎÎ/ 0
{
ÏÏ 
currentColor
ÌÌ 
=
ÌÌ 
	thisImage
ÌÌ 
.
ÌÌ 
color
ÌÌ "
;
ÌÌ" #
animStartTime
ÓÓ 
=
ÓÓ 
Time
ÓÓ 
.
ÓÓ "
realtimeSinceStartup
ÓÓ -
;
ÓÓ- .
state
ÔÔ 	
=
ÔÔ
 
$num
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 
public
ÛÛ 
void
ÛÛ	 
OnPointerUp
ÛÛ 
(
ÛÛ 
PointerEventData
ÛÛ +
data
ÛÛ, 0
)
ÛÛ0 1
{
ÙÙ 
if
ıı 
(
ıı 

toggleMask
ıı 
)
ıı 
StartCoroutine
ˆˆ 
(
ˆˆ 
DelayedMaskCheck
ˆˆ $
(
ˆˆ$ %
)
ˆˆ% &
)
ˆˆ& '
;
ˆˆ' (
if
¯¯ 
(
¯¯ 
currentRippleAnim
¯¯ 
)
¯¯ 
{
˘˘ 
currentRippleAnim
˙˙ 
.
˙˙ 
ClearRipple
˙˙ !
(
˙˙" #
)
˙˙# $
;
˙˙$ %
}
˚˚ 
currentRippleAnim
˝˝ 
=
˝˝ 
null
˝˝ 
;
˝˝ 
if
ˇˇ 
(
ˇˇ 
highlightWhen
ˇˇ 
!=
ˇˇ 
HighlightActive
ˇˇ '
.
ˇˇ' (
Never
ˇˇ( -
)
ˇˇ- .
{
ÄÄ 
currentColor
ÅÅ 
=
ÅÅ 
	thisImage
ÅÅ 
.
ÅÅ 
color
ÅÅ "
;
ÅÅ" #
animStartTime
ÇÇ 
=
ÇÇ 
Time
ÇÇ 
.
ÇÇ "
realtimeSinceStartup
ÇÇ -
;
ÇÇ- .
state
ÉÉ 	
=
ÉÉ
 
$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
	hasLifted
ÜÜ 
=
ÜÜ 
true
ÜÜ 
;
ÜÜ 
}
áá 
public
ââ 
void
ââ	 
OnPointerExit
ââ 
(
ââ 
PointerEventData
ââ -
data
ââ. 2
)
ââ2 3
{
ää 
if
ãã 
(
ãã 

toggleMask
ãã 
)
ãã 
StartCoroutine
åå 
(
åå 
DelayedMaskCheck
åå $
(
åå$ %
)
åå% &
)
åå& '
;
åå' (
if
éé 
(
éé 
currentRippleAnim
éé 
)
éé 
{
èè 
currentRippleAnim
êê 
.
êê 
ClearRipple
êê !
(
êê" #
)
êê# $
;
êê$ %
}
ëë 
currentRippleAnim
ìì 
=
ìì 
null
ìì 
;
ìì 
if
ïï 
(
ïï 
highlightWhen
ïï 
!=
ïï 
HighlightActive
ïï '
.
ïï' (
Never
ïï( -
)
ïï- .
{
ññ 
currentColor
óó 
=
óó 
	thisImage
óó 
.
óó 
color
óó "
;
óó" #
animStartTime
òò 
=
òò 
Time
òò 
.
òò "
realtimeSinceStartup
òò -
;
òò- .
state
ôô 	
=
ôô
 
$num
ôô 
;
ôô 
}
öö 
	hasLifted
úú 
=
úú 
true
úú 
;
úú 
}
ùù 
private
üü 	
void
üü
 
MakeInkBlot
üü 
(
üü 
Vector3
üü #
pos
üü$ '
)
üü' (
{
†† 
if
°° 
(
°° 
currentRippleAnim
°° 
)
°° 
{
¢¢ 
currentRippleAnim
££ 
.
££ 
ClearRipple
££ !
(
££" #
)
££# $
;
££$ %
}
§§ 
if
¶¶ 
(
¶¶ 
moveTowardCenter
¶¶ 
)
¶¶ 
currentRippleAnim
ßß 
=
ßß 
RippleControl
ßß %
.
ßß% &

MakeRipple
ßß& 0
(
ßß1 2
pos
ßß2 5
,
ßß5 6
	transform
ßß7 @
,
ßß@ A

rippleSize
ßßB L
,
ßßL M
rippleSpeed
ßßN Y
,
ßßY Z
rippleStartAlpha
ßß[ k
,
ßßk l
rippleEndAlpha
ßßm {
,
ßß{ |
rippleColorßß} à
,ßßà â

gameObjectßßä î
.ßßî ï
GetComponentßßï °
<ßß° ¢
RectTransformßß¢ Ø
>ßßØ ∞
(ßß∞ ±
)ßß± ≤
.ßß≤ ≥
positionßß≥ ª
)ßßª º
.ßßº Ω
GetComponentßßΩ …
<ßß…  

RippleAnimßß  ‘
>ßß‘ ’
(ßß’ ÷
)ßß÷ ◊
;ßß◊ ÿ
else
®® 
currentRippleAnim
©© 
=
©© 
RippleControl
©© %
.
©©% &

MakeRipple
©©& 0
(
©©1 2
pos
©©2 5
,
©©5 6
	transform
©©7 @
,
©©@ A

rippleSize
©©B L
,
©©L M
rippleSpeed
©©N Y
,
©©Y Z
rippleStartAlpha
©©[ k
,
©©k l
rippleEndAlpha
©©m {
,
©©{ |
rippleColor©©} à
)©©à â
.©©â ä
GetComponent©©ä ñ
<©©ñ ó

RippleAnim©©ó °
>©©° ¢
(©©¢ £
)©©£ §
;©©§ •
}
™™ 
IEnumerator
¨¨ 
	DragCheck
¨¨ 
(
¨¨ 
Vector3
¨¨ 
pos
¨¨  #
)
¨¨# $
{
≠≠ 
if
ÆÆ 
(
ÆÆ  
dontRippleOnScroll
ÆÆ 
)
ÆÆ 
{
ØØ 
mousePos
∞∞ 
=
∞∞ 
Input
∞∞ 
.
∞∞ 
mousePosition
∞∞ "
;
∞∞" #
	hasLifted
±± 
=
±± 
false
±± 
;
±± 
yield
≤≤ 	
return
≤≤
 
new
≤≤ 
WaitForSeconds
≤≤ #
(
≤≤# $"
scrollDelayCheckTime
≤≤$ 8
)
≤≤8 9
;
≤≤9 :
if
≥≥ 
(
≥≥ 
mousePos
≥≥ 
.
≥≥ 
x
≥≥ 
==
≥≥ 
Input
≥≥ 
.
≥≥ 
mousePosition
≥≥ )
.
≥≥) *
x
≥≥* +
&&
≥≥, .
mousePos
≥≥/ 7
.
≥≥7 8
y
≥≥8 9
==
≥≥: <
Input
≥≥= B
.
≥≥B C
mousePosition
≥≥C P
.
≥≥P Q
y
≥≥Q R
)
≥≥R S
{
¥¥ 
MakeInkBlot
µµ 
(
µµ 
pos
µµ 
)
µµ 
;
µµ 
yield
∂∂ 

return
∂∂ 
new
∂∂ 
WaitForSeconds
∂∂ $
(
∂∂$ %"
scrollDelayCheckTime
∂∂% 9
*
∂∂: ;
$num
∂∂< >
)
∂∂> ?
;
∂∂? @
if
∑∑ 
(
∑∑ 	
	hasLifted
∑∑	 
)
∑∑ 
{
∏∏ 
if
ππ 
(
ππ	 

currentRippleAnim
ππ
 
)
ππ 
currentRippleAnim
∫∫ 
.
∫∫ 
ClearRipple
∫∫ $
(
∫∫$ %
)
∫∫% &
;
∫∫& '
}
ªª 
}
ºº 
}
ææ 
else
øø 
{
¿¿ 
MakeInkBlot
¡¡ 
(
¡¡ 
pos
¡¡ 
)
¡¡ 
;
¡¡ 
}
¬¬ 
}
√√ 
IEnumerator
≈≈ 
DelayedMaskCheck
≈≈ 
(
≈≈ 
)
≈≈  
{
∆∆ 
yield
«« 
return
««	 
new
«« 
WaitForSeconds
«« "
(
««" #
$num
««# %
)
««% &
;
««& '
if
»» 
(
»» 
!
»» 

gameObject
»» 
.
»» $
GetComponentInChildren
»» )
<
»») *

RippleAnim
»»* 4
>
»»4 5
(
»»5 6
)
»»6 7
)
»»7 8
{
…… 
thisMask
   
.
   
enabled
   
=
   
false
   
;
   
}
ÀÀ 
}
ÃÃ 
IEnumerator
ŒŒ 
GetRect
ŒŒ 
(
ŒŒ 
)
ŒŒ 
{
œœ 
Rect
–– 
	tempRect2
–– 
=
–– 

gameObject
–– 
.
–– 
GetComponent
–– +
<
––+ ,
RectTransform
––, 9
>
––9 :
(
––: ;
)
––; <
.
––< =
rect
––= A
;
––A B
if
““ 
(
““ 
	tempRect2
““ 
!=
““ 
new
““ 
Rect
““ 
(
““ 
$num
““ 
,
““ 
$num
““  !
,
““! "
$num
““# $
,
““$ %
$num
““& '
)
““' (
)
““( )
{
”” 
sizeReferenceRect
‘‘ 
=
‘‘ 
	tempRect2
‘‘ !
;
‘‘! "
}
’’ 
else
÷÷ 
{
◊◊ 

GameObject
ÿÿ 
sizeRefGameObject
ÿÿ  
=
ÿÿ! "
new
ÿÿ# &

GameObject
ÿÿ' 1
(
ÿÿ1 2
$str
ÿÿ2 E
)
ÿÿE F
;
ÿÿF G
RectTransform
ŸŸ "
sizeRefRectTransform
ŸŸ &
=
ŸŸ' (
sizeRefGameObject
ŸŸ) :
.
ŸŸ: ;
AddComponent
ŸŸ; G
<
ŸŸG H
RectTransform
ŸŸH U
>
ŸŸU V
(
ŸŸV W
)
ŸŸW X
;
ŸŸX Y"
sizeRefRectTransform
€€ 
.
€€ 
	SetParent
€€ "
(
€€" #
	transform
€€# ,
)
€€, -
;
€€- ."
sizeRefRectTransform
›› 
.
›› 

localScale
›› #
=
››$ %
new
››& )
Vector3
››* 1
(
››1 2
$num
››2 4
,
››4 5
$num
››6 8
,
››8 9
$num
››: <
)
››< =
;
››= >"
sizeRefRectTransform
ﬁﬁ 
.
ﬁﬁ 
	anchorMax
ﬁﬁ "
=
ﬁﬁ# $
new
ﬁﬁ% (
Vector2
ﬁﬁ) 0
(
ﬁﬁ0 1
$num
ﬁﬁ1 3
,
ﬁﬁ3 4
$num
ﬁﬁ5 7
)
ﬁﬁ7 8
;
ﬁﬁ8 9"
sizeRefRectTransform
ﬂﬂ 
.
ﬂﬂ 
	anchorMin
ﬂﬂ "
=
ﬂﬂ# $
new
ﬂﬂ% (
Vector2
ﬂﬂ) 0
(
ﬂﬂ0 1
$num
ﬂﬂ1 3
,
ﬂﬂ3 4
$num
ﬂﬂ5 7
)
ﬂﬂ7 8
;
ﬂﬂ8 9"
sizeRefRectTransform
·· 
.
·· 
anchoredPosition
·· )
=
··* +
Vector2
··, 3
.
··3 4
zero
··4 8
;
··8 9"
sizeRefRectTransform
‚‚ 
.
‚‚ 
	sizeDelta
‚‚ "
=
‚‚# $
Vector2
‚‚% ,
.
‚‚, -
zero
‚‚- 1
;
‚‚1 2
yield
‰‰ 	
return
‰‰
 
new
‰‰ 
WaitForEndOfFrame
‰‰ &
(
‰‰& '
)
‰‰' (
;
‰‰( )
sizeReferenceRect
ÊÊ 
=
ÊÊ "
sizeRefRectTransform
ÊÊ ,
.
ÊÊ, -
rect
ÊÊ- 1
;
ÊÊ1 2
Destroy
ËË 
(
ËË 
sizeRefGameObject
ËË 
)
ËË 
;
ËË 
}
ÈÈ 
if
ÎÎ 
(
ÎÎ 
sizeReferenceRect
ÎÎ 
.
ÎÎ 
width
ÎÎ 
>
ÎÎ  
sizeReferenceRect
ÎÎ! 2
.
ÎÎ2 3
height
ÎÎ3 9
)
ÎÎ9 :
{
ÏÏ 

rippleSize
ÌÌ 
=
ÌÌ 
Mathf
ÌÌ 
.
ÌÌ 

RoundToInt
ÌÌ !
(
ÌÌ! "
sizeReferenceRect
ÌÌ" 3
.
ÌÌ3 4
width
ÌÌ4 9
)
ÌÌ9 :
;
ÌÌ: ;
}
ÓÓ 
else
ÔÔ 
{
 

rippleSize
ÒÒ 
=
ÒÒ 
Mathf
ÒÒ 
.
ÒÒ 

RoundToInt
ÒÒ !
(
ÒÒ! "
sizeReferenceRect
ÒÒ" 3
.
ÒÒ3 4
height
ÒÒ4 :
)
ÒÒ: ;
;
ÒÒ; <
}
ÚÚ 

rippleSize
ÙÙ 
=
ÙÙ 
Mathf
ÙÙ 
.
ÙÙ 

RoundToInt
ÙÙ  
(
ÙÙ  !

rippleSize
ÙÙ! +
*
ÙÙ, -
sizePercentage
ÙÙ. <
/
ÙÙ= >
$num
ÙÙ? C
)
ÙÙC D
;
ÙÙD E
RefreshContinued
ˆˆ 
(
ˆˆ 
)
ˆˆ 
;
ˆˆ 
}
˜˜ 
}
¯¯ 
}˘˘ Óï
@F:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\HSBColor.cs
	namespace 	

MaterialUI
 
{ 
[ 
System 
. 	
Serializable	 
] 
public		 
struct		 
HSBColor		 
{

 
public 
float	 
h 
; 
public 
float	 
s 
; 
public 
float	 
b 
; 
public 
float	 
a 
; 
public 
HSBColor	 
( 
float 
h 
, 
float  
s! "
," #
float$ )
b* +
,+ ,
float- 2
a3 4
)4 5
{ 
this 
. 
h 	
=
 
h 
; 
this 
. 
s 	
=
 
s 
; 
this 
. 
b 	
=
 
b 
; 
this 
. 
a 	
=
 
a 
; 
} 
public 
HSBColor	 
( 
float 
h 
, 
float  
s! "
," #
float$ )
b* +
)+ ,
{ 
this 
. 
h 	
=
 
h 
; 
this 
. 
s 	
=
 
s 
; 
this 
. 
b 	
=
 
b 
; 
this 
. 
a 	
=
 
$num 
; 
} 
public   
HSBColor  	 
(   
Color   
col   
)   
{!! 
HSBColor"" 
temp"" 
="" 
	FromColor"" 
("" 
col""  
)""  !
;""! "
h## 
=## 
temp## 
.## 
h## 
;## 
s$$ 
=$$ 
temp$$ 
.$$ 
s$$ 
;$$ 
b%% 
=%% 
temp%% 
.%% 
b%% 
;%% 
a&& 
=&& 
temp&& 
.&& 
a&& 
;&& 
}'' 
public)) 
static))	 
HSBColor)) 
	FromColor)) "
())" #
Color))# (
color))) .
))). /
{** 
HSBColor++ 
ret++ 
=++ 
new++ 
HSBColor++ 
(++ 
$num++ !
,++! "
$num++# %
,++% &
$num++' )
,++) *
color+++ 0
.++0 1
a++1 2
)++2 3
;++3 4
float-- 
r--	 

=-- 
color-- 
.-- 
r-- 
;-- 
float.. 
g..	 

=.. 
color.. 
... 
g.. 
;.. 
float// 
b//	 

=// 
color// 
.// 
b// 
;// 
float11 
max11	 
=11 
Mathf11 
.11 
Max11 
(11 
r11 
,11 
Mathf11 !
.11! "
Max11" %
(11% &
g11& '
,11' (
b11) *
)11* +
)11+ ,
;11, -
if33 
(33 
max33 

<=33 
$num33 
)33 
{44 
return55 

ret55 
;55 
}66 
float88 
min88	 
=88 
Mathf88 
.88 
Min88 
(88 
r88 
,88 
Mathf88 !
.88! "
Min88" %
(88% &
g88& '
,88' (
b88) *
)88* +
)88+ ,
;88, -
float99 
dif99	 
=99 
max99 
-99 
min99 
;99 
if;; 
(;; 
max;; 

>;; 
min;; 
);; 
{<< 
if== 
(== 
g== 	
====
 
max== 
)== 
{>> 
ret?? 
.?? 	
h??	 

=?? 
(?? 
b?? 
-?? 
r?? 
)?? 
/?? 
dif?? 
*?? 
$num?? 
+?? 
$num?? #
;??# $
}@@ 
elseAA 
ifAA	 
(AA 
bAA 
==AA 
maxAA 
)AA 
{BB 
retCC 
.CC 	
hCC	 

=CC 
(CC 
rCC 
-CC 
gCC 
)CC 
/CC 
difCC 
*CC 
$numCC 
+CC 
$numCC #
;CC# $
}DD 
elseEE 
ifEE	 
(EE 
bEE 
>EE 
gEE 
)EE 
{FF 
retGG 
.GG 	
hGG	 

=GG 
(GG 
gGG 
-GG 
bGG 
)GG 
/GG 
difGG 
*GG 
$numGG 
+GG 
$numGG #
;GG# $
}HH 
elseII 
{JJ 
retKK 
.KK 	
hKK	 

=KK 
(KK 
gKK 
-KK 
bKK 
)KK 
/KK 
difKK 
*KK 
$numKK 
;KK 
}LL 
ifMM 
(MM 
retMM 
.MM 
hMM 
<MM 
$numMM 
)MM 
{NN 
retOO 
.OO 	
hOO	 

=OO 
retOO 
.OO 
hOO 
+OO 
$numOO 
;OO 
}PP 
}QQ 
elseRR 
{SS 
retTT 
.TT 
hTT 	
=TT
 
$numTT 
;TT 
}UU 
retWW 
.WW 
hWW 
*=WW	 
$numWW 
/WW 
$numWW 
;WW 
retXX 
.XX 
sXX 
=XX	 

(XX 
difXX 
/XX 
maxXX 
)XX 
*XX 
$numXX 
;XX 
retYY 
.YY 
bYY 
=YY	 

maxYY 
;YY 
return[[ 	
ret[[
 
;[[ 
}\\ 
public^^ 
static^^	 
Color^^ 
ToColor^^ 
(^^ 
HSBColor^^ &
hsbColor^^' /
)^^/ 0
{__ 
float`` 
r``	 

=`` 
hsbColor`` 
.`` 
b`` 
;`` 
floataa 
gaa	 

=aa 
hsbColoraa 
.aa 
baa 
;aa 
floatbb 
bbb	 

=bb 
hsbColorbb 
.bb 
bbb 
;bb 
ifcc 
(cc 
hsbColorcc 
.cc 
scc 
!=cc 
$numcc 
)cc 
{dd 
floatee 	
maxee
 
=ee 
hsbColoree 
.ee 
bee 
;ee 
floatff 	
difff
 
=ff 
hsbColorff 
.ff 
bff 
*ff 
hsbColorff #
.ff# $
sff$ %
;ff% &
floatgg 	
mingg
 
=gg 
hsbColorgg 
.gg 
bgg 
-gg 
difgg  
;gg  !
floatii 	
hii
 
=ii 
hsbColorii 
.ii 
hii 
*ii 
$numii 
;ii 
ifkk 
(kk 
hkk 	
<kk
 
$numkk 
)kk 
{ll 
rmm 
=mm 
maxmm	 
;mm 
gnn 
=nn 
hnn	 

*nn
 
difnn 
/nn 
$numnn 
+nn 
minnn 
;nn 
boo 
=oo 
minoo	 
;oo 
}pp 
elseqq 
ifqq	 
(qq 
hqq 
<qq 
$numqq 
)qq 
{rr 
rss 
=ss 
-ss	 

(ss
 
hss 
-ss 
$numss 
)ss 
*ss 
difss 
/ss 
$numss 
+ss 
minss "
;ss" #
gtt 
=tt 
maxtt	 
;tt 
buu 
=uu 
minuu	 
;uu 
}vv 
elseww 
ifww	 
(ww 
hww 
<ww 
$numww 
)ww 
{xx 
ryy 
=yy 
minyy	 
;yy 
gzz 
=zz 
maxzz	 
;zz 
b{{ 
={{ 
({{	 

h{{
 
-{{ 
$num{{ 
){{ 
*{{ 
dif{{ 
/{{ 
$num{{ 
+{{ 
min{{ !
;{{! "
}|| 
else}} 
if}}	 
(}} 
h}} 
<}} 
$num}} 
)}} 
{~~ 
r 
= 
min	 
; 
g
ÄÄ 
=
ÄÄ 
-
ÄÄ	 

(
ÄÄ
 
h
ÄÄ 
-
ÄÄ 
$num
ÄÄ 
)
ÄÄ 
*
ÄÄ 
dif
ÄÄ 
/
ÄÄ 
$num
ÄÄ 
+
ÄÄ 
min
ÄÄ "
;
ÄÄ" #
b
ÅÅ 
=
ÅÅ 
max
ÅÅ	 
;
ÅÅ 
}
ÇÇ 
else
ÉÉ 
if
ÉÉ	 
(
ÉÉ 
h
ÉÉ 
<
ÉÉ 
$num
ÉÉ 
)
ÉÉ 
{
ÑÑ 
r
ÖÖ 
=
ÖÖ 
(
ÖÖ	 

h
ÖÖ
 
-
ÖÖ 
$num
ÖÖ 
)
ÖÖ 
*
ÖÖ 
dif
ÖÖ 
/
ÖÖ 
$num
ÖÖ 
+
ÖÖ 
min
ÖÖ !
;
ÖÖ! "
g
ÜÜ 
=
ÜÜ 
min
ÜÜ	 
;
ÜÜ 
b
áá 
=
áá 
max
áá	 
;
áá 
}
àà 
else
ââ 
if
ââ	 
(
ââ 
h
ââ 
<=
ââ 
$num
ââ 
)
ââ 
{
ää 
r
ãã 
=
ãã 
max
ãã	 
;
ãã 
g
åå 
=
åå 
min
åå	 
;
åå 
b
çç 
=
çç 
-
çç	 

(
çç
 
h
çç 
-
çç 
$num
çç 
)
çç 
*
çç 
dif
çç 
/
çç 
$num
çç 
+
çç 
min
çç !
;
çç! "
}
éé 
else
èè 
{
êê 
r
ëë 
=
ëë 
$num
ëë	 

;
ëë
 
g
íí 
=
íí 
$num
íí	 

;
íí
 
b
ìì 
=
ìì 
$num
ìì	 

;
ìì
 
}
îî 
}
ïï 
return
óó 	
new
óó
 
Color
óó 
(
óó 
Mathf
óó 
.
óó 
Clamp01
óó !
(
óó! "
r
óó" #
)
óó# $
,
óó$ %
Mathf
óó& +
.
óó+ ,
Clamp01
óó, 3
(
óó3 4
g
óó4 5
)
óó5 6
,
óó6 7
Mathf
óó8 =
.
óó= >
Clamp01
óó> E
(
óóE F
b
óóF G
)
óóG H
,
óóH I
hsbColor
óóJ R
.
óóR S
a
óóS T
)
óóT U
;
óóU V
}
òò 
public
öö 
Color
öö	 
ToColor
öö 
(
öö 
)
öö 
{
õõ 
return
úú 	
ToColor
úú
 
(
úú 
this
úú 
)
úú 
;
úú 
}
ùù 
public
üü 
override
üü	 
string
üü 
ToString
üü !
(
üü! "
)
üü" #
{
†† 
return
°° 	
$str
°°
 
+
°° 
h
°° 
+
°° 
$str
°° 
+
°° 
s
°° 
+
°°  
$str
°°! &
+
°°' (
b
°°) *
;
°°* +
}
¢¢ 
public
§§ 
static
§§	 
HSBColor
§§ 
Lerp
§§ 
(
§§ 
HSBColor
§§ &
a
§§' (
,
§§( )
HSBColor
§§* 2
b
§§3 4
,
§§4 5
float
§§6 ;
t
§§< =
)
§§= >
{
•• 
float
¶¶ 
h
¶¶	 

,
¶¶
 
s
¶¶ 
;
¶¶ 
if
™™ 
(
™™ 
a
™™ 
.
™™ 	
b
™™	 

==
™™ 
$num
™™ 
)
™™ 
{
´´ 
h
¨¨ 
=
¨¨ 
b
¨¨ 	
.
¨¨	 

h
¨¨
 
;
¨¨ 
s
≠≠ 
=
≠≠ 
b
≠≠ 	
.
≠≠	 

s
≠≠
 
;
≠≠ 
}
ÆÆ 
else
ØØ 
if
ØØ 

(
ØØ 
b
ØØ 
.
ØØ 
b
ØØ 
==
ØØ 
$num
ØØ 
)
ØØ 
{
∞∞ 
h
±± 
=
±± 
a
±± 	
.
±±	 

h
±±
 
;
±± 
s
≤≤ 
=
≤≤ 
a
≤≤ 	
.
≤≤	 

s
≤≤
 
;
≤≤ 
}
≥≥ 
else
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
a
∂∂ 	
.
∂∂	 

s
∂∂
 
==
∂∂ 
$num
∂∂ 
)
∂∂ 
{
∑∑ 
h
∏∏ 
=
∏∏ 
b
∏∏	 

.
∏∏
 
h
∏∏ 
;
∏∏ 
}
ππ 
else
∫∫ 
if
∫∫	 
(
∫∫ 
b
∫∫ 
.
∫∫ 
s
∫∫ 
==
∫∫ 
$num
∫∫ 
)
∫∫ 
{
ªª 
h
ºº 
=
ºº 
a
ºº	 

.
ºº
 
h
ºº 
;
ºº 
}
ΩΩ 
else
ææ 
{
øø 
float
¡¡ 

angle
¡¡ 
=
¡¡ 
Mathf
¡¡ 
.
¡¡ 
	LerpAngle
¡¡ "
(
¡¡" #
a
¡¡# $
.
¡¡$ %
h
¡¡% &
*
¡¡& '
$num
¡¡' +
,
¡¡+ ,
b
¡¡- .
.
¡¡. /
h
¡¡/ 0
*
¡¡0 1
$num
¡¡1 5
,
¡¡5 6
t
¡¡7 8
)
¡¡8 9
;
¡¡9 :
while
¬¬ 

(
¬¬ 
angle
¬¬ 
<
¬¬ 
$num
¬¬ 
)
¬¬ 
angle
√√ 
+=
√√ 
$num
√√ 
;
√√ 
while
ƒƒ 

(
ƒƒ 
angle
ƒƒ 
>
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
angle
≈≈ 
-=
≈≈ 
$num
≈≈ 
;
≈≈ 
h
∆∆ 
=
∆∆ 
angle
∆∆	 
/
∆∆ 
$num
∆∆ 
;
∆∆ 
}
«« 
s
»» 
=
»» 
Mathf
»» 
.
»» 
Lerp
»» 
(
»» 
a
»» 
.
»» 
s
»» 
,
»» 
b
»» 
.
»» 
s
»» 
,
»» 
t
»» 
)
»» 
;
»»  
}
…… 
return
   	
new
  
 
HSBColor
   
(
   
h
   
,
   
s
   
,
   
Mathf
   "
.
  " #
Lerp
  # '
(
  ' (
a
  ( )
.
  ) *
b
  * +
,
  + ,
b
  - .
.
  . /
b
  / 0
,
  0 1
t
  2 3
)
  3 4
,
  4 5
Mathf
  6 ;
.
  ; <
Lerp
  < @
(
  @ A
a
  A B
.
  B C
a
  C D
,
  D E
b
  F G
.
  G H
a
  H I
,
  I J
t
  K L
)
  L M
)
  M N
;
  N O
}
ÀÀ 
public
ÕÕ 
static
ÕÕ	 
void
ÕÕ 
Test
ÕÕ 
(
ÕÕ 
)
ÕÕ 
{
ŒŒ 
HSBColor
œœ 
color
œœ 
;
œœ 
color
—— 
=
——	 

new
—— 
HSBColor
—— 
(
—— 
Color
—— 
.
—— 
red
—— !
)
——! "
;
——" #
Debug
““ 
.
““ 	
Log
““	 
(
““ 
$str
““ 
+
““ 
color
““ 
)
““ 
;
““ 
color
‘‘ 
=
‘‘	 

new
‘‘ 
HSBColor
‘‘ 
(
‘‘ 
Color
‘‘ 
.
‘‘ 
green
‘‘ #
)
‘‘# $
;
‘‘$ %
Debug
’’ 
.
’’ 	
Log
’’	 
(
’’ 
$str
’’ 
+
’’ 
color
’’ 
)
’’ 
;
’’  
color
◊◊ 
=
◊◊	 

new
◊◊ 
HSBColor
◊◊ 
(
◊◊ 
Color
◊◊ 
.
◊◊ 
blue
◊◊ "
)
◊◊" #
;
◊◊# $
Debug
ÿÿ 
.
ÿÿ 	
Log
ÿÿ	 
(
ÿÿ 
$str
ÿÿ 
+
ÿÿ 
color
ÿÿ 
)
ÿÿ 
;
ÿÿ 
color
⁄⁄ 
=
⁄⁄	 

new
⁄⁄ 
HSBColor
⁄⁄ 
(
⁄⁄ 
Color
⁄⁄ 
.
⁄⁄ 
grey
⁄⁄ "
)
⁄⁄" #
;
⁄⁄# $
Debug
€€ 
.
€€ 	
Log
€€	 
(
€€ 
$str
€€ 
+
€€ 
color
€€ 
)
€€ 
;
€€ 
color
›› 
=
››	 

new
›› 
HSBColor
›› 
(
›› 
Color
›› 
.
›› 
white
›› #
)
››# $
;
››$ %
Debug
ﬁﬁ 
.
ﬁﬁ 	
Log
ﬁﬁ	 
(
ﬁﬁ 
$str
ﬁﬁ 
+
ﬁﬁ 
color
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ  
color
‡‡ 
=
‡‡	 

new
‡‡ 
HSBColor
‡‡ 
(
‡‡ 
new
‡‡ 
Color
‡‡ !
(
‡‡! "
$num
‡‡" &
,
‡‡& '
$num
‡‡( *
,
‡‡* +
$num
‡‡, 1
,
‡‡1 2
$num
‡‡3 5
)
‡‡5 6
)
‡‡6 7
;
‡‡7 8
Debug
·· 
.
·· 	
Log
··	 
(
·· 
$str
·· 
+
··  
color
··! &
)
··& '
;
··' (
Debug
„„ 
.
„„ 	
Log
„„	 
(
„„ 
$str
„„ B
+
„„C D
ToColor
‰‰ 
(
‰‰ 
new
‰‰ 
HSBColor
‰‰ !
(
‰‰! "
new
‰‰" %
Color
‰‰& +
(
‰‰+ ,
$num
‰‰, 5
,
‰‰5 6
$num
‰‰7 @
,
‰‰@ A
$num
‰‰B K
)
‰‰K L
)
‰‰L M
)
‰‰M N
)
‰‰N O
;
‰‰O P
}
ÂÂ 
}
ÊÊ 
}ÁÁ ˇ
ZF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\ChatController.cs
public 
class 
ChatController 
: 
MonoBehaviour +
{, -
public 

TMP_InputField 
ChatInputField (
;( )
public

 

TMP_Text

 
ChatDisplayOutput

 %
;

% &
public 

	Scrollbar 
ChatScrollbar "
;" #
void 
OnEnable	 
( 
) 
{ 
ChatInputField 
. 
onSubmit 
.  
AddListener  +
(+ ,
AddToChatOutput, ;
); <
;< =
} 
void 
	OnDisable	 
( 
) 
{ 
ChatInputField 
. 
onSubmit 
.  
RemoveListener  .
(. /
AddToChatOutput/ >
)> ?
;? @
} 
void 
AddToChatOutput	 
( 
string 
newText  '
)' (
{ 
ChatInputField 
. 
text 
= 
string $
.$ %
Empty% *
;* +
var 
timeNow 
= 
System 
. 
DateTime %
.% &
Now& )
;) *
string   
formattedInput   
=   
$str    ,
+  - .
timeNow  / 6
.  6 7
Hour  7 ;
.  ; <
ToString  < D
(  D E
$str  E I
)  I J
+  K L
$str  M P
+  Q R
timeNow  S Z
.  Z [
Minute  [ a
.  a b
ToString  b j
(  j k
$str  k o
)  o p
+  q r
$str  s v
+  w x
timeNow	  y Ä
.
  Ä Å
Second
  Å á
.
  á à
ToString
  à ê
(
  ê ë
$str
  ë ï
)
  ï ñ
+
  ó ò
$str
  ô •
+
  ¶ ß
newText
  ® Ø
;
  Ø ∞
if"" 

("" 
ChatDisplayOutput"" 
!=""  
null""! %
)""% &
{## 	
if&& 
(&& 
ChatDisplayOutput&& !
.&&! "
text&&" &
==&&' )
string&&* 0
.&&0 1
Empty&&1 6
)&&6 7
ChatDisplayOutput'' !
.''! "
text''" &
=''' (
formattedInput'') 7
;''7 8
else(( 
ChatDisplayOutput)) !
.))! "
text))" &
+=))' )
$str))* .
+))/ 0
formattedInput))1 ?
;))? @
}** 	
ChatInputField-- 
.-- 
ActivateInputField-- )
(--) *
)--* +
;--+ ,
ChatScrollbar00 
.00 
value00 
=00 
$num00 
;00  
}11 
}33 ﬁ

OF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SelectionListItemConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class #
SelectionListItemConfig %
:& '
MonoBehaviour( 5
{ 
public 
int	 
listId 
; 
SelectionBoxConfig 
selectionBoxConfig '
;' (
public 
void	 
Setup 
( 
) 
{ 
selectionBoxConfig 
= 

gameObject "
." # 
GetComponentInParent# 7
<7 8
SelectionBoxConfig8 J
>J K
(L M
)M N
;N O

gameObject 
. 
GetComponent 
< 
RippleConfig '
>' (
(( )
)) *
.* +
highlightWhen+ 8
=9 :
RippleConfig; G
.G H
HighlightActiveH W
.W X
NeverX ]
;] ^
} 
public 
void	 
SelectMe 
( 
) 
{ 
selectionBoxConfig   
.   
Select   
(   
listId   $
)  $ %
;  % &
}!! 
}"" 
}## ‚ß
HF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\InputFieldConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
InputFieldConfig 
:  
MonoBehaviour! .
,. /
ISelectHandler0 >
,> ?
IDeselectHandler@ P
{ 
public 
Color	 
activeColor 
= 
Color "
." #
black# (
;( )
bool 
dynamicHeight 
; 
bool 
selected 
; 
public 
float	 
animationDuration  
=! "
$num# (
;( )
[ 
SerializeField 
] 
private 
RectTransform (

parentRect) 3
;3 4
[ 
SerializeField 
] 
private 
Text 
placeholderText  /
;/ 0
[ 
SerializeField 
] 
private 
Text 
	inputText  )
;) *
[ 
SerializeField 
] 
private 
Text 
displayText  +
;+ ,
[ 
SerializeField 
] 
private 
Image  

activeLine! +
;+ ,
RectTransform 
textRect 
; 
RectTransform   
displayTextRect   
;    

InputField"" 

inputField"" 
;"" 
RectTransform## 
activeLineRect## 
;## 
RectTransform$$ 
placeholderRect$$ 
;$$  
Color&& 
placeholderOffColor&& 
;&& 
Color(( 
placeholderColor(( 
;(( 
float)) 
placeholderScale)) 
;)) 
float** 
placeholderPivot** 
;** 
float++ 
activeLineAlpha++ 
;++ 
float-- 
activeLinePos-- 
;-- 
float// 
animStartTime// 
;// 
float00 
animDeltaTime00 
;00 
bool22 
selectedBefore22 
;22 
int44 
state44 
;44 
void66 
Awake66 
(66 
)66 
{77 

inputField88 
=88 

gameObject88 
.88 
GetComponent88 '
<88' (

InputField88( 2
>882 3
(883 4
)884 5
;885 6
activeLineRect99 
=99 

activeLine99 
.99 
GetComponent99 +
<99+ ,
RectTransform99, 9
>999 :
(99: ;
)99; <
;99< =
placeholderRect:: 
=:: 
placeholderText:: $
.::$ %
GetComponent::% 1
<::1 2
RectTransform::2 ?
>::? @
(::@ A
)::A B
;::B C
textRect;; 
=;; 
	inputText;; 
.;; 
GetComponent;; $
<;;$ %
RectTransform;;% 2
>;;2 3
(;;3 4
);;4 5
;;;5 6
displayTextRect<< 
=<< 
displayText<<  
.<<  !
GetComponent<<! -
<<<- .
RectTransform<<. ;
><<; <
(<<< =
)<<= >
;<<> ?
}== 
void?? 
Start?? 
(?? 
)?? 
{@@ 
activeLineRectAA 
.AA 
	sizeDeltaAA 
=AA 
newAA !
Vector2AA" )
(AA* +
placeholderRectAA+ :
.AA: ;
rectAA; ?
.AA? @
widthAA@ E
,AAE F
activeLineRectAAG U
.AAU V
	sizeDeltaAAV _
.AA_ `
yAA` a
)AAa b
;AAb c
	inputTextCC 
.CC 
fontCC 
=CC 
displayTextCC 
.CC  
fontCC  $
;CC$ %
	inputTextDD 
.DD 
	fontStyleDD 
=DD 
displayTextDD $
.DD$ %
	fontStyleDD% .
;DD. /
	inputTextEE 
.EE 
fontSizeEE 
=EE 
displayTextEE #
.EE# $
fontSizeEE$ ,
;EE, -
	inputTextFF 
.FF 
lineSpacingFF 
=FF 
displayTextFF &
.FF& '
lineSpacingFF' 2
;FF2 3
	inputTextGG 
.GG 
supportRichTextGG 
=GG 
displayTextGG *
.GG* +
supportRichTextGG+ :
;GG: ;
	inputTextHH 
.HH 
	alignmentHH 
=HH 
displayTextHH $
.HH$ %
	alignmentHH% .
;HH. /
	inputTextII 
.II 
horizontalOverflowII 
=II  !
displayTextII" -
.II- .
horizontalOverflowII. @
;II@ A
	inputTextJJ 
.JJ  
resizeTextForBestFitJJ !
=JJ" #
displayTextJJ$ /
.JJ/ 0 
resizeTextForBestFitJJ0 D
;JJD E
	inputTextKK 
.KK 
materialKK 
=KK 
displayTextKK #
.KK# $
materialKK$ ,
;KK, -
	inputTextLL 
.LL 
colorLL 
=LL 
displayTextLL  
.LL  !
colorLL! &
;LL& '
placeholderOffColorNN 
=NN 
placeholderTextNN (
.NN( )
colorNN) .
;NN. /
ifPP 
(PP 

inputFieldPP 
.PP 
lineTypePP 
==PP 

InputFieldPP (
.PP( )
LineTypePP) 1
.PP1 2
MultiLineNewlinePP2 B
||PPC E

inputFieldPPF P
.PPP Q
lineTypePPQ Y
==PPZ \

InputFieldPP] g
.PPg h
LineTypePPh p
.PPp q
MultiLineSubmit	PPq Ä
)
PPÄ Å
{QQ 
dynamicHeightRR 
=RR 
trueRR 
;RR 
}SS 
}TT 
publicVV 
voidVV	 
OnSelectVV 
(VV 
BaseEventDataVV %
dataVV& *
)VV* +
{WW 
placeholderColorXX 
=XX 
placeholderTextXX %
.XX% &
colorXX& +
;XX+ ,
placeholderPivotYY 
=YY 
placeholderRectYY %
.YY% &
pivotYY& +
.YY+ ,
yYY, -
;YY- .
placeholderScaleZZ 
=ZZ 
placeholderRectZZ %
.ZZ% &

localScaleZZ& 0
.ZZ0 1
xZZ1 2
;ZZ2 3

activeLine\\ 
.\\ 
color\\ 
=\\ 
activeColor\\ !
;\\! "
selected^^ 
=^^ 
true^^ 
;^^ 
activeLineRect`` 
.`` 
position`` 
=`` 
Input`` "
.``" #
mousePosition``# 0
;``0 1
activeLineRectaa 
.aa 
localPositionaa 
=aa  !
newaa" %
Vector3aa& -
(aa. /
activeLineRectaa/ =
.aa= >
localPositionaa> K
.aaK L
xaaL M
,aaM N
$numaaO S
,aaS T
$numaaU W
)aaW X
;aaX Y
activeLineRectbb 
.bb 

localScalebb 
=bb 
newbb "
Vector3bb# *
(bb+ ,
$numbb, .
,bb. /
$numbb0 2
,bb2 3
$numbb4 6
)bb6 7
;bb7 8
activeLinePoscc 
=cc 
activeLineRectcc !
.cc! "
localPositioncc" /
.cc/ 0
xcc0 1
;cc1 2
animStartTimeee 
=ee 
Timeee 
.ee  
realtimeSinceStartupee ,
;ee, -
stateff 
=ff	 

$numff 
;ff 
}gg 
publicii 
voidii	 

OnDeselectii 
(ii 
BaseEventDataii '
dataii( ,
)ii, -
{jj 
placeholderColorkk 
=kk 
placeholderTextkk %
.kk% &
colorkk& +
;kk+ ,
placeholderPivotll 
=ll 
placeholderRectll %
.ll% &
pivotll& +
.ll+ ,
yll, -
;ll- .
placeholderScalemm 
=mm 
placeholderRectmm %
.mm% &

localScalemm& 0
.mm0 1
xmm1 2
;mm2 3
selectedoo 
=oo 
falseoo 
;oo 
animStartTimeqq 
=qq 
Timeqq 
.qq  
realtimeSinceStartupqq ,
;qq, -
staterr 
=rr	 

$numrr 
;rr 
}ss 
publicuu 
voiduu	 
CalculateHeightuu 
(uu 
)uu  
{vv 
StartCoroutineww 
(ww 
DelayedHeightww  
(ww  !
)ww! "
)ww" #
;ww# $
}xx 
voidzz 
Updatezz 
(zz 
)zz 
{{{ 
animDeltaTime|| 
=|| 
Time|| 
.||  
realtimeSinceStartup|| ,
-||- .
animStartTime||/ <
;||< =
if~~ 
(~~ 
state~~ 
==~~ 
$num~~ 
)~~ 
{ 
if
ÄÄ 
(
ÄÄ 
animDeltaTime
ÄÄ 
<=
ÄÄ 
animationDuration
ÄÄ *
)
ÄÄ* +
{
ÅÅ 
Color
ÇÇ 

	tempColor
ÇÇ 
=
ÇÇ 
placeholderText
ÇÇ &
.
ÇÇ& '
color
ÇÇ' ,
;
ÇÇ, -
	tempColor
ÉÉ 
.
ÉÉ 
r
ÉÉ 
=
ÉÉ 
Anim
ÉÉ 
.
ÉÉ 
Quint
ÉÉ 
.
ÉÉ 
Out
ÉÉ !
(
ÉÉ! "
placeholderColor
ÉÉ" 2
.
ÉÉ2 3
r
ÉÉ3 4
,
ÉÉ4 5
activeColor
ÉÉ6 A
.
ÉÉA B
r
ÉÉB C
,
ÉÉC D
animDeltaTime
ÉÉE R
,
ÉÉR S
animationDuration
ÉÉT e
)
ÉÉe f
;
ÉÉf g
	tempColor
ÑÑ 
.
ÑÑ 
g
ÑÑ 
=
ÑÑ 
Anim
ÑÑ 
.
ÑÑ 
Quint
ÑÑ 
.
ÑÑ 
Out
ÑÑ !
(
ÑÑ! "
placeholderColor
ÑÑ" 2
.
ÑÑ2 3
g
ÑÑ3 4
,
ÑÑ4 5
activeColor
ÑÑ6 A
.
ÑÑA B
g
ÑÑB C
,
ÑÑC D
animDeltaTime
ÑÑE R
,
ÑÑR S
animationDuration
ÑÑT e
)
ÑÑe f
;
ÑÑf g
	tempColor
ÖÖ 
.
ÖÖ 
b
ÖÖ 
=
ÖÖ 
Anim
ÖÖ 
.
ÖÖ 
Quint
ÖÖ 
.
ÖÖ 
Out
ÖÖ !
(
ÖÖ! "
placeholderColor
ÖÖ" 2
.
ÖÖ2 3
b
ÖÖ3 4
,
ÖÖ4 5
activeColor
ÖÖ6 A
.
ÖÖA B
b
ÖÖB C
,
ÖÖC D
animDeltaTime
ÖÖE R
,
ÖÖR S
animationDuration
ÖÖT e
)
ÖÖe f
;
ÖÖf g
	tempColor
ÜÜ 
.
ÜÜ 
a
ÜÜ 
=
ÜÜ 
Anim
ÜÜ 
.
ÜÜ 
Quint
ÜÜ 
.
ÜÜ 
Out
ÜÜ !
(
ÜÜ! "
placeholderColor
ÜÜ" 2
.
ÜÜ2 3
a
ÜÜ3 4
,
ÜÜ4 5
activeColor
ÜÜ6 A
.
ÜÜA B
a
ÜÜB C
,
ÜÜC D
animDeltaTime
ÜÜE R
,
ÜÜR S
animationDuration
ÜÜT e
)
ÜÜe f
;
ÜÜf g
placeholderText
áá 
.
áá 
color
áá 
=
áá 
	tempColor
áá &
;
áá& '
Vector3
ââ 
tempVec3
ââ 
=
ââ 
placeholderRect
ââ '
.
ââ' (

localScale
ââ( 2
;
ââ2 3
tempVec3
ää 
.
ää 
x
ää 
=
ää 
Anim
ää 
.
ää 
Quint
ää 
.
ää 
Out
ää  
(
ää! "
placeholderScale
ää" 2
,
ää2 3
$num
ää4 9
,
ää9 :
animDeltaTime
ää; H
,
ääH I
animationDuration
ääJ [
)
ää[ \
;
ää\ ]
tempVec3
ãã 
.
ãã 
y
ãã 
=
ãã 
tempVec3
ãã 
.
ãã 
x
ãã 
;
ãã 
tempVec3
åå 
.
åå 
z
åå 
=
åå 
tempVec3
åå 
.
åå 
x
åå 
;
åå 
placeholderRect
çç 
.
çç 

localScale
çç 
=
çç  !
tempVec3
çç" *
;
çç* +
Vector2
èè 
tempVec2
èè 
=
èè 
placeholderRect
èè '
.
èè' (
pivot
èè( -
;
èè- .
tempVec2
êê 
.
êê 
y
êê 
=
êê 
Anim
êê 
.
êê 
Quint
êê 
.
êê 
InOut
êê "
(
êê# $
placeholderPivot
êê$ 4
,
êê4 5
$num
êê6 8
,
êê8 9
animDeltaTime
êê: G
,
êêG H
animationDuration
êêI Z
)
êêZ [
;
êê[ \
placeholderRect
ëë 
.
ëë 
pivot
ëë 
=
ëë 
tempVec2
ëë %
;
ëë% &
tempVec3
ìì 
=
ìì 
activeLineRect
ìì 
.
ìì 

localScale
ìì )
;
ìì) *
tempVec3
îî 
.
îî 
x
îî 
=
îî 
Anim
îî 
.
îî 
Quint
îî 
.
îî 
Out
îî  
(
îî  !
$num
îî! #
,
îî# $
$num
îî% '
,
îî' (
animDeltaTime
îî) 6
,
îî6 7
animationDuration
îî8 I
)
îîI J
;
îîJ K
activeLineRect
ïï 
.
ïï 

localScale
ïï 
=
ïï  
tempVec3
ïï! )
;
ïï) *
tempVec2
óó 
=
óó 
activeLineRect
óó 
.
óó 
localPosition
óó ,
;
óó, -
tempVec2
òò 
.
òò 
x
òò 
=
òò 
Anim
òò 
.
òò 
Quint
òò 
.
òò 
Out
òò  
(
òò! "
activeLinePos
òò" /
,
òò/ 0
$num
òò1 3
,
òò3 4
animDeltaTime
òò5 B
,
òòB C
animationDuration
òòD U
)
òòU V
;
òòV W
activeLineRect
ôô 
.
ôô 
localPosition
ôô !
=
ôô" #
tempVec2
ôô$ ,
;
ôô, -
}
öö 
else
õõ 
{
úú 
state
ùù 

=
ùù 
$num
ùù 
;
ùù 
}
ûû 
}
üü 
else
†† 
if
†† 

(
†† 
state
†† 
==
†† 
$num
†† 
)
†† 
{
°° 
if
¢¢ 
(
¢¢ 
animDeltaTime
¢¢ 
<=
¢¢ 
$num
¢¢ 
)
¢¢ 
{
££ 
Color
§§ 

	tempColor
§§ 
=
§§ 
placeholderText
§§ &
.
§§& '
color
§§' ,
;
§§, -
	tempColor
•• 
.
•• 
r
•• 
=
•• 
Anim
•• 
.
•• 
Quint
•• 
.
•• 
Out
•• !
(
••! "
placeholderColor
••" 2
.
••2 3
r
••3 4
,
••4 5!
placeholderOffColor
••6 I
.
••I J
r
••J K
,
••K L
animDeltaTime
••M Z
,
••Z [
animationDuration
••\ m
)
••m n
;
••n o
	tempColor
¶¶ 
.
¶¶ 
g
¶¶ 
=
¶¶ 
Anim
¶¶ 
.
¶¶ 
Quint
¶¶ 
.
¶¶ 
Out
¶¶ !
(
¶¶! "
placeholderColor
¶¶" 2
.
¶¶2 3
g
¶¶3 4
,
¶¶4 5!
placeholderOffColor
¶¶6 I
.
¶¶I J
g
¶¶J K
,
¶¶K L
animDeltaTime
¶¶M Z
,
¶¶Z [
animationDuration
¶¶\ m
)
¶¶m n
;
¶¶n o
	tempColor
ßß 
.
ßß 
b
ßß 
=
ßß 
Anim
ßß 
.
ßß 
Quint
ßß 
.
ßß 
Out
ßß !
(
ßß! "
placeholderColor
ßß" 2
.
ßß2 3
b
ßß3 4
,
ßß4 5!
placeholderOffColor
ßß6 I
.
ßßI J
b
ßßJ K
,
ßßK L
animDeltaTime
ßßM Z
,
ßßZ [
animationDuration
ßß\ m
)
ßßm n
;
ßßn o
	tempColor
®® 
.
®® 
a
®® 
=
®® 
Anim
®® 
.
®® 
Quint
®® 
.
®® 
Out
®® !
(
®®! "
placeholderColor
®®" 2
.
®®2 3
a
®®3 4
,
®®4 5!
placeholderOffColor
®®6 I
.
®®I J
a
®®J K
,
®®K L
animDeltaTime
®®M Z
,
®®Z [
animationDuration
®®\ m
)
®®m n
;
®®n o
placeholderText
©© 
.
©© 
color
©© 
=
©© 
	tempColor
©© &
;
©©& '
if
´´ 
(
´´ 	

inputField
´´	 
.
´´ 
text
´´ 
.
´´ 
Length
´´ 
==
´´  "
$num
´´# $
)
´´$ %
{
¨¨ 
Vector3
≠≠ 
tempVec3
≠≠ 
=
≠≠ 
placeholderRect
≠≠ (
.
≠≠( )

localScale
≠≠) 3
;
≠≠3 4
tempVec3
ÆÆ 
.
ÆÆ 
x
ÆÆ 
=
ÆÆ 
Anim
ÆÆ 
.
ÆÆ 
Quint
ÆÆ 
.
ÆÆ 
InOut
ÆÆ #
(
ÆÆ$ %
placeholderScale
ÆÆ% 5
,
ÆÆ5 6
$num
ÆÆ7 9
,
ÆÆ9 :
animDeltaTime
ÆÆ; H
,
ÆÆH I
animationDuration
ÆÆJ [
)
ÆÆ[ \
;
ÆÆ\ ]
tempVec3
ØØ 
.
ØØ 
y
ØØ 
=
ØØ 
tempVec3
ØØ 
.
ØØ 
x
ØØ 
;
ØØ 
tempVec3
∞∞ 
.
∞∞ 
z
∞∞ 
=
∞∞ 
tempVec3
∞∞ 
.
∞∞ 
x
∞∞ 
;
∞∞ 
placeholderRect
±± 
.
±± 

localScale
±±  
=
±±! "
tempVec3
±±# +
;
±±+ ,
Vector2
≥≥ 
tempVec2
≥≥ 
=
≥≥ 
placeholderRect
≥≥ (
.
≥≥( )
pivot
≥≥) .
;
≥≥. /
tempVec2
¥¥ 
.
¥¥ 
y
¥¥ 
=
¥¥ 
Anim
¥¥ 
.
¥¥ 
Quint
¥¥ 
.
¥¥ 
Out
¥¥ !
(
¥¥" #
placeholderPivot
¥¥# 3
,
¥¥3 4
$num
¥¥5 7
,
¥¥7 8
animDeltaTime
¥¥9 F
,
¥¥F G
animationDuration
¥¥H Y
)
¥¥Y Z
;
¥¥Z [
placeholderRect
µµ 
.
µµ 
pivot
µµ 
=
µµ 
tempVec2
µµ &
;
µµ& '
}
∂∂ 
	tempColor
∏∏ 
=
∏∏ 

activeLine
∏∏ 
.
∏∏ 
color
∏∏ !
;
∏∏! "
	tempColor
ππ 
.
ππ 
a
ππ 
=
ππ 
Anim
ππ 
.
ππ 
Quint
ππ 
.
ππ 
Out
ππ !
(
ππ! "
$num
ππ" $
,
ππ$ %
$num
ππ& (
,
ππ( )
animDeltaTime
ππ* 7
,
ππ7 8
animationDuration
ππ9 J
)
ππJ K
;
ππK L

activeLine
∫∫ 
.
∫∫ 
color
∫∫ 
=
∫∫ 
	tempColor
∫∫ !
;
∫∫! "
}
ªª 
else
ºº 
{
ΩΩ 
state
ææ 

=
ææ 
$num
ææ 
;
ææ 
}
øø 
}
¿¿ 
if
¬¬ 
(
¬¬ 
selected
¬¬ 
)
¬¬ 
{
√√ 
if
ƒƒ 
(
ƒƒ 
dynamicHeight
ƒƒ 
)
ƒƒ 
{
≈≈ 
textRect
∆∆ 
.
∆∆ 
	sizeDelta
∆∆ 
=
∆∆ 
displayTextRect
∆∆ )
.
∆∆) *
	sizeDelta
∆∆* 3
;
∆∆3 4
displayText
«« 
.
«« 
text
«« 
=
«« 

inputField
«« "
.
««" #
text
««# '
;
««' (
}
»» 
else
…… 
{
   
displayText
ÀÀ 
.
ÀÀ 
text
ÀÀ 
=
ÀÀ 
	inputText
ÀÀ !
.
ÀÀ! "
text
ÀÀ" &
;
ÀÀ& '
}
ÃÃ 
}
ÕÕ 
}
ŒŒ 
IEnumerator
–– 
DelayedHeight
–– 
(
–– 
)
–– 
{
—— 
yield
““ 
return
““	 
new
““ 
WaitForEndOfFrame
““ %
(
““% &
)
““& '
;
““' (
if
”” 
(
”” 
!
”” 
selectedBefore
”” 
)
”” 
{
‘‘ 
	inputText
’’ 
.
’’ 
color
’’ 
=
’’ 
Color
’’ 
.
’’ 
clear
’’ !
;
’’! "
selectedBefore
◊◊ 
=
◊◊ 
true
◊◊ 
;
◊◊ 
}
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
}€€ √¶
cF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TextMeshProFloatingText.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class #
TextMeshProFloatingText (
:) *
MonoBehaviour+ 8
{		 
public

 
Font

 
TheFont

 
;

 
private 

GameObject 
m_floatingText )
;) *
private 
TextMeshPro 
m_textMeshPro )
;) *
private 
TextMesh 

m_textMesh #
;# $
private 
	Transform 
m_transform %
;% &
private 
	Transform $
m_floatingText_Transform 2
;2 3
private 
	Transform 
m_cameraTransform +
;+ ,
Vector3 
lastPOS 
= 
Vector3 !
.! "
zero" &
;& '

Quaternion 
lastRotation 
=  !

Quaternion" ,
., -
identity- 5
;5 6
public 
int 
	SpawnType 
; 
public 
bool #
IsTextObjectScaleStatic +
;+ ,
static 
WaitForEndOfFrame  
k_WaitForEndOfFrame! 4
=5 6
new7 :
WaitForEndOfFrame; L
(L M
)M N
;N O
static 
WaitForSeconds 
[ 
] "
k_WaitForSecondsRandom  6
=7 8
new9 <
WaitForSeconds= K
[K L
]L M
{ 	
new 
WaitForSeconds 
( 
$num $
)$ %
,% &
new' *
WaitForSeconds+ 9
(9 :
$num: >
)> ?
,? @
newA D
WaitForSecondsE S
(S T
$numT Y
)Y Z
,Z [
new\ _
WaitForSeconds` n
(n o
$numo s
)s t
,t u
newv y
WaitForSeconds	z à
(
à â
$num
â é
)
é è
,
è ê
new   
WaitForSeconds   
(   
$num   #
)  # $
,  $ %
new  & )
WaitForSeconds  * 8
(  8 9
$num  9 >
)  > ?
,  ? @
new  A D
WaitForSeconds  E S
(  S T
$num  T X
)  X Y
,  Y Z
new  [ ^
WaitForSeconds  _ m
(  m n
$num  n s
)  s t
,  t u
new  v y
WaitForSeconds	  z à
(
  à â
$num
  â ç
)
  ç é
,
  é è
new!! 
WaitForSeconds!! 
(!! 
$num!! $
)!!$ %
,!!% &
new!!' *
WaitForSeconds!!+ 9
(!!9 :
$num!!: >
)!!> ?
,!!? @
new!!A D
WaitForSeconds!!E S
(!!S T
$num!!T Y
)!!Y Z
,!!Z [
new!!\ _
WaitForSeconds!!` n
(!!n o
$num!!o s
)!!s t
,!!t u
new!!v y
WaitForSeconds	!!z à
(
!!à â
$num
!!â é
)
!!é è
,
!!è ê
new"" 
WaitForSeconds"" 
("" 
$num"" #
)""# $
,""$ %
new""& )
WaitForSeconds""* 8
(""8 9
$num""9 >
)""> ?
,""? @
new""A D
WaitForSeconds""E S
(""S T
$num""T X
)""X Y
,""Y Z
new""[ ^
WaitForSeconds""_ m
(""m n
$num""n s
)""s t
,""t u
new""v y
WaitForSeconds	""z à
(
""à â
$num
""â ç
)
""ç é
,
""é è
}## 	
;##	 

void%% 
Awake%% 
(%% 
)%% 
{&& 	
m_transform'' 
='' 
	transform'' #
;''# $
m_floatingText(( 
=(( 
new((  

GameObject((! +
(((+ ,
this((, 0
.((0 1
name((1 5
+((6 7
$str((8 H
)((H I
;((I J
m_cameraTransform.. 
=.. 
Camera..  &
...& '
main..' +
...+ ,
	transform.., 5
;..5 6
}// 	
void11 
Start11 
(11 
)11 
{22 	
if33 
(33 
	SpawnType33 
==33 
$num33 
)33 
{44 
m_textMeshPro66 
=66 
m_floatingText66  .
.66. /
AddComponent66/ ;
<66; <
TextMeshPro66< G
>66G H
(66H I
)66I J
;66J K
m_textMeshPro77 
.77 
rectTransform77 +
.77+ ,
	sizeDelta77, 5
=776 7
new778 ;
Vector277< C
(77C D
$num77D E
,77E F
$num77G H
)77H I
;77I J$
m_floatingText_Transform99 (
=99) *
m_floatingText99+ 9
.999 :
	transform99: C
;99C D$
m_floatingText_Transform:: (
.::( )
position::) 1
=::2 3
m_transform::4 ?
.::? @
position::@ H
+::I J
new::K N
Vector3::O V
(::V W
$num::W X
,::X Y
$num::Z ]
,::] ^
$num::_ `
)::` a
;::a b
m_textMeshPro?? 
.?? 
	alignment?? '
=??( ) 
TextAlignmentOptions??* >
.??> ?
Center??? E
;??E F
m_textMeshPro@@ 
.@@ 
color@@ #
=@@$ %
new@@& )
Color32@@* 1
(@@1 2
(@@2 3
byte@@3 7
)@@7 8
Random@@8 >
.@@> ?
Range@@? D
(@@D E
$num@@E F
,@@F G
$num@@H K
)@@K L
,@@L M
(@@N O
byte@@O S
)@@S T
Random@@T Z
.@@Z [
Range@@[ `
(@@` a
$num@@a b
,@@b c
$num@@d g
)@@g h
,@@h i
(@@j k
byte@@k o
)@@o p
Random@@p v
.@@v w
Range@@w |
(@@| }
$num@@} ~
,@@~ 
$num
@@Ä É
)
@@É Ñ
,
@@Ñ Ö
$num
@@Ü â
)
@@â ä
;
@@ä ã
m_textMeshProAA 
.AA 
fontSizeAA &
=AA' (
$numAA) +
;AA+ ,
m_textMeshProDD 
.DD 
enableKerningDD +
=DD, -
falseDD. 3
;DD3 4
m_textMeshProEE 
.EE 
textEE "
=EE# $
stringEE% +
.EE+ ,
EmptyEE, 1
;EE1 2
m_textMeshProFF 
.FF #
isTextObjectScaleStaticFF 5
=FF6 7#
IsTextObjectScaleStaticFF8 O
;FFO P
StartCoroutineHH 
(HH *
DisplayTextMeshProFloatingTextHH =
(HH= >
)HH> ?
)HH? @
;HH@ A
}II 
elseJJ 
ifJJ 
(JJ 
	SpawnTypeJJ 
==JJ !
$numJJ" #
)JJ# $
{KK $
m_floatingText_TransformNN (
=NN) *
m_floatingTextNN+ 9
.NN9 :
	transformNN: C
;NNC D$
m_floatingText_TransformOO (
.OO( )
positionOO) 1
=OO2 3
m_transformOO4 ?
.OO? @
positionOO@ H
+OOI J
newOOK N
Vector3OOO V
(OOV W
$numOOW X
,OOX Y
$numOOZ ]
,OO] ^
$numOO_ `
)OO` a
;OOa b

m_textMeshQQ 
=QQ 
m_floatingTextQQ +
.QQ+ ,
AddComponentQQ, 8
<QQ8 9
TextMeshQQ9 A
>QQA B
(QQB C
)QQC D
;QQD E

m_textMeshRR 
.RR 
fontRR 
=RR  !
	ResourcesRR" +
.RR+ ,
LoadRR, 0
<RR0 1
FontRR1 5
>RR5 6
(RR6 7
$strRR7 D
)RRD E
;RRE F

m_textMeshSS 
.SS 
GetComponentSS '
<SS' (
RendererSS( 0
>SS0 1
(SS1 2
)SS2 3
.SS3 4
sharedMaterialSS4 B
=SSC D

m_textMeshSSE O
.SSO P
fontSSP T
.SST U
materialSSU ]
;SS] ^

m_textMeshTT 
.TT 
colorTT  
=TT! "
newTT# &
Color32TT' .
(TT. /
(TT/ 0
byteTT0 4
)TT4 5
RandomTT5 ;
.TT; <
RangeTT< A
(TTA B
$numTTB C
,TTC D
$numTTE H
)TTH I
,TTI J
(TTK L
byteTTL P
)TTP Q
RandomTTQ W
.TTW X
RangeTTX ]
(TT] ^
$numTT^ _
,TT_ `
$numTTa d
)TTd e
,TTe f
(TTg h
byteTTh l
)TTl m
RandomTTm s
.TTs t
RangeTTt y
(TTy z
$numTTz {
,TT{ |
$num	TT} Ä
)
TTÄ Å
,
TTÅ Ç
$num
TTÉ Ü
)
TTÜ á
;
TTá à

m_textMeshUU 
.UU 
anchorUU !
=UU" #

TextAnchorUU$ .
.UU. /
LowerCenterUU/ :
;UU: ;

m_textMeshVV 
.VV 
fontSizeVV #
=VV$ %
$numVV& (
;VV( )
StartCoroutineXX 
(XX '
DisplayTextMeshFloatingTextXX :
(XX: ;
)XX; <
)XX< =
;XX= >
}YY 
elseZZ 
ifZZ 
(ZZ 
	SpawnTypeZZ 
==ZZ !
$numZZ" #
)ZZ# $
{[[ 
}]] 
}__ 	
publicqq 
IEnumeratorqq *
DisplayTextMeshProFloatingTextqq 9
(qq9 :
)qq: ;
{rr 	
floatss 
CountDurationss 
=ss  !
$numss" &
;ss& '
floattt 
starting_Counttt  
=tt! "
Randomtt# )
.tt) *
Rangett* /
(tt/ 0
$numtt0 2
,tt2 3
$numtt4 7
)tt7 8
;tt8 9
floatuu 
current_Countuu 
=uu  !
starting_Countuu" 0
;uu0 1
Vector3ww 
	start_posww 
=ww $
m_floatingText_Transformww  8
.ww8 9
positionww9 A
;wwA B
Color32xx 
start_colorxx 
=xx  !
m_textMeshProxx" /
.xx/ 0
colorxx0 5
;xx5 6
floatyy 
alphayy 
=yy 
$numyy 
;yy 
intzz 
int_counterzz 
=zz 
$numzz 
;zz  
float}} 
fadeDuration}} 
=}}  
$num}}! "
/}}# $
starting_Count}}% 3
*}}4 5
CountDuration}}6 C
;}}C D
while 
( 
current_Count  
>! "
$num# $
)$ %
{
ÄÄ 
current_Count
ÅÅ 
-=
ÅÅ  
(
ÅÅ! "
Time
ÅÅ" &
.
ÅÅ& '
	deltaTime
ÅÅ' 0
/
ÅÅ1 2
CountDuration
ÅÅ3 @
)
ÅÅ@ A
*
ÅÅB C
starting_Count
ÅÅD R
;
ÅÅR S
if
ÉÉ 
(
ÉÉ 
current_Count
ÉÉ !
<=
ÉÉ" $
$num
ÉÉ% &
)
ÉÉ& '
{
ÑÑ 
alpha
ÜÜ 
=
ÜÜ 
Mathf
ÜÜ !
.
ÜÜ! "
Clamp
ÜÜ" '
(
ÜÜ' (
alpha
ÜÜ( -
-
ÜÜ. /
(
ÜÜ0 1
Time
ÜÜ1 5
.
ÜÜ5 6
	deltaTime
ÜÜ6 ?
/
ÜÜ@ A
fadeDuration
ÜÜB N
)
ÜÜN O
*
ÜÜP Q
$num
ÜÜR U
,
ÜÜU V
$num
ÜÜW X
,
ÜÜX Y
$num
ÜÜZ ]
)
ÜÜ] ^
;
ÜÜ^ _
}
áá 
int_counter
ââ 
=
ââ 
(
ââ 
int
ââ "
)
ââ" #
current_Count
ââ# 0
;
ââ0 1
m_textMeshPro
ää 
.
ää 
text
ää "
=
ää# $
int_counter
ää% 0
.
ää0 1
ToString
ää1 9
(
ää9 :
)
ää: ;
;
ää; <
m_textMeshPro
çç 
.
çç 
color
çç #
=
çç$ %
new
çç& )
Color32
çç* 1
(
çç1 2
start_color
çç2 =
.
çç= >
r
çç> ?
,
çç? @
start_color
ççA L
.
ççL M
g
ççM N
,
ççN O
start_color
ççP [
.
çç[ \
b
çç\ ]
,
çç] ^
(
çç_ `
byte
çç` d
)
ççd e
alpha
ççe j
)
ççj k
;
ççk l&
m_floatingText_Transform
êê (
.
êê( )
position
êê) 1
+=
êê2 4
new
êê5 8
Vector3
êê9 @
(
êê@ A
$num
êêA B
,
êêB C
starting_Count
êêD R
*
êêS T
Time
êêU Y
.
êêY Z
	deltaTime
êêZ c
,
êêc d
$num
êêe f
)
êêf g
;
êêg h
if
ìì 
(
ìì 
!
ìì 
lastPOS
ìì 
.
ìì 
Compare
ìì $
(
ìì$ %
m_cameraTransform
ìì% 6
.
ìì6 7
position
ìì7 ?
,
ìì? @
$num
ììA E
)
ììE F
||
ììG I
!
ììJ K
lastRotation
ììK W
.
ììW X
Compare
ììX _
(
ìì_ `
m_cameraTransform
ìì` q
.
ììq r
rotation
ììr z
,
ììz {
$numìì| Ä
)ììÄ Å
)ììÅ Ç
{
îî 
lastPOS
ïï 
=
ïï 
m_cameraTransform
ïï /
.
ïï/ 0
position
ïï0 8
;
ïï8 9
lastRotation
ññ  
=
ññ! "
m_cameraTransform
ññ# 4
.
ññ4 5
rotation
ññ5 =
;
ññ= >&
m_floatingText_Transform
óó ,
.
óó, -
rotation
óó- 5
=
óó6 7
lastRotation
óó8 D
;
óóD E
Vector3
òò 
dir
òò 
=
òò  !
m_transform
òò" -
.
òò- .
position
òò. 6
-
òò7 8
lastPOS
òò9 @
;
òò@ A
m_transform
ôô 
.
ôô  
forward
ôô  '
=
ôô( )
new
ôô* -
Vector3
ôô. 5
(
ôô5 6
dir
ôô6 9
.
ôô9 :
x
ôô: ;
,
ôô; <
$num
ôô= >
,
ôô> ?
dir
ôô@ C
.
ôôC D
z
ôôD E
)
ôôE F
;
ôôF G
}
öö 
yield
úú 
return
úú !
k_WaitForEndOfFrame
úú 0
;
úú0 1
}
ùù 
yield
°° 
return
°° $
k_WaitForSecondsRandom
°° /
[
°°/ 0
Random
°°0 6
.
°°6 7
Range
°°7 <
(
°°< =
$num
°°= >
,
°°> ?
$num
°°@ B
)
°°B C
]
°°C D
;
°°D E&
m_floatingText_Transform
££ $
.
££$ %
position
££% -
=
££. /
	start_pos
££0 9
;
££9 :
StartCoroutine
•• 
(
•• ,
DisplayTextMeshProFloatingText
•• 9
(
••9 :
)
••: ;
)
••; <
;
••< =
}
¶¶ 	
public
©© 
IEnumerator
©© )
DisplayTextMeshFloatingText
©© 6
(
©©6 7
)
©©7 8
{
™™ 	
float
´´ 
CountDuration
´´ 
=
´´  !
$num
´´" &
;
´´& '
float
¨¨ 
starting_Count
¨¨  
=
¨¨! "
Random
¨¨# )
.
¨¨) *
Range
¨¨* /
(
¨¨/ 0
$num
¨¨0 2
,
¨¨2 3
$num
¨¨4 7
)
¨¨7 8
;
¨¨8 9
float
≠≠ 
current_Count
≠≠ 
=
≠≠  !
starting_Count
≠≠" 0
;
≠≠0 1
Vector3
ØØ 
	start_pos
ØØ 
=
ØØ &
m_floatingText_Transform
ØØ  8
.
ØØ8 9
position
ØØ9 A
;
ØØA B
Color32
∞∞ 
start_color
∞∞ 
=
∞∞  !

m_textMesh
∞∞" ,
.
∞∞, -
color
∞∞- 2
;
∞∞2 3
float
±± 
alpha
±± 
=
±± 
$num
±± 
;
±± 
int
≤≤ 
int_counter
≤≤ 
=
≤≤ 
$num
≤≤ 
;
≤≤  
float
¥¥ 
fadeDuration
¥¥ 
=
¥¥  
$num
¥¥! "
/
¥¥# $
starting_Count
¥¥% 3
*
¥¥4 5
CountDuration
¥¥6 C
;
¥¥C D
while
∂∂ 
(
∂∂ 
current_Count
∂∂  
>
∂∂! "
$num
∂∂# $
)
∂∂$ %
{
∑∑ 
current_Count
∏∏ 
-=
∏∏  
(
∏∏! "
Time
∏∏" &
.
∏∏& '
	deltaTime
∏∏' 0
/
∏∏1 2
CountDuration
∏∏3 @
)
∏∏@ A
*
∏∏B C
starting_Count
∏∏D R
;
∏∏R S
if
∫∫ 
(
∫∫ 
current_Count
∫∫ !
<=
∫∫" $
$num
∫∫% &
)
∫∫& '
{
ªª 
alpha
ΩΩ 
=
ΩΩ 
Mathf
ΩΩ !
.
ΩΩ! "
Clamp
ΩΩ" '
(
ΩΩ' (
alpha
ΩΩ( -
-
ΩΩ. /
(
ΩΩ0 1
Time
ΩΩ1 5
.
ΩΩ5 6
	deltaTime
ΩΩ6 ?
/
ΩΩ@ A
fadeDuration
ΩΩB N
)
ΩΩN O
*
ΩΩP Q
$num
ΩΩR U
,
ΩΩU V
$num
ΩΩW X
,
ΩΩX Y
$num
ΩΩZ ]
)
ΩΩ] ^
;
ΩΩ^ _
}
ææ 
int_counter
¿¿ 
=
¿¿ 
(
¿¿ 
int
¿¿ "
)
¿¿" #
current_Count
¿¿# 0
;
¿¿0 1

m_textMesh
¡¡ 
.
¡¡ 
text
¡¡ 
=
¡¡  !
int_counter
¡¡" -
.
¡¡- .
ToString
¡¡. 6
(
¡¡6 7
)
¡¡7 8
;
¡¡8 9

m_textMesh
ƒƒ 
.
ƒƒ 
color
ƒƒ  
=
ƒƒ! "
new
ƒƒ# &
Color32
ƒƒ' .
(
ƒƒ. /
start_color
ƒƒ/ :
.
ƒƒ: ;
r
ƒƒ; <
,
ƒƒ< =
start_color
ƒƒ> I
.
ƒƒI J
g
ƒƒJ K
,
ƒƒK L
start_color
ƒƒM X
.
ƒƒX Y
b
ƒƒY Z
,
ƒƒZ [
(
ƒƒ\ ]
byte
ƒƒ] a
)
ƒƒa b
alpha
ƒƒb g
)
ƒƒg h
;
ƒƒh i&
m_floatingText_Transform
«« (
.
««( )
position
««) 1
+=
««2 4
new
««5 8
Vector3
««9 @
(
««@ A
$num
««A B
,
««B C
starting_Count
««D R
*
««S T
Time
««U Y
.
««Y Z
	deltaTime
««Z c
,
««c d
$num
««e f
)
««f g
;
««g h
if
   
(
   
!
   
lastPOS
   
.
   
Compare
   $
(
  $ %
m_cameraTransform
  % 6
.
  6 7
position
  7 ?
,
  ? @
$num
  A E
)
  E F
||
  G I
!
  J K
lastRotation
  K W
.
  W X
Compare
  X _
(
  _ `
m_cameraTransform
  ` q
.
  q r
rotation
  r z
,
  z {
$num  | Ä
)  Ä Å
)  Å Ç
{
ÀÀ 
lastPOS
ÃÃ 
=
ÃÃ 
m_cameraTransform
ÃÃ /
.
ÃÃ/ 0
position
ÃÃ0 8
;
ÃÃ8 9
lastRotation
ÕÕ  
=
ÕÕ! "
m_cameraTransform
ÕÕ# 4
.
ÕÕ4 5
rotation
ÕÕ5 =
;
ÕÕ= >&
m_floatingText_Transform
ŒŒ ,
.
ŒŒ, -
rotation
ŒŒ- 5
=
ŒŒ6 7
lastRotation
ŒŒ8 D
;
ŒŒD E
Vector3
œœ 
dir
œœ 
=
œœ  !
m_transform
œœ" -
.
œœ- .
position
œœ. 6
-
œœ7 8
lastPOS
œœ9 @
;
œœ@ A
m_transform
–– 
.
––  
forward
––  '
=
––( )
new
––* -
Vector3
––. 5
(
––5 6
dir
––6 9
.
––9 :
x
––: ;
,
––; <
$num
––= >
,
––> ?
dir
––@ C
.
––C D
z
––D E
)
––E F
;
––F G
}
—— 
yield
”” 
return
”” !
k_WaitForEndOfFrame
”” 0
;
””0 1
}
‘‘ 
yield
ÿÿ 
return
ÿÿ $
k_WaitForSecondsRandom
ÿÿ /
[
ÿÿ/ 0
Random
ÿÿ0 6
.
ÿÿ6 7
Range
ÿÿ7 <
(
ÿÿ< =
$num
ÿÿ= >
,
ÿÿ> ?
$num
ÿÿ@ B
)
ÿÿB C
]
ÿÿC D
;
ÿÿD E&
m_floatingText_Transform
⁄⁄ $
.
⁄⁄$ %
position
⁄⁄% -
=
⁄⁄. /
	start_pos
⁄⁄0 9
;
⁄⁄9 :
StartCoroutine
‹‹ 
(
‹‹ )
DisplayTextMeshFloatingText
‹‹ 6
(
‹‹6 7
)
‹‹7 8
)
‹‹8 9
;
‹‹9 :
}
›› 	
}
ﬁﬁ 
}ﬂﬂ ö&
IF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\RectTransformSnap.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
( 
) 
] 
public 
class 
RectTransformSnap 
:  !
MonoBehaviour" /
{ 
public 
RectTransform	 

targetRect !
;! "
private 	
RectTransform
 
thisRect  
;  !
public 
float	 
xPadding 
= 
$num 
; 
public 
float	 
yPadding 
= 
$num 
; 
public 
bool	 

percentage 
; 
public 
float	 
xPercent 
; 
public 
float	 
yPercent 
; 
public!! 
bool!!	 
snapEveryFrame!! 
;!! 
public"" 
bool""	 
sizeOnly"" 
;"" 
private$$ 	
Rect$$
 
lastRect$$ 
;$$ 
private&& 	
void&&
 
OnEnable&& 
(&& 
)&& 
{'' 
if(( 
((( 
!(( 
thisRect(( 
)(( 
{)) 
thisRect** 
=** 

gameObject** 
.** 
GetComponent** &
<**& '
RectTransform**' 4
>**4 5
(**5 6
)**6 7
;**7 8
}++ 
},, 
private.. 	
void..
 

LateUpdate.. 
(.. 
).. 
{// 
if00 
(00 
snapEveryFrame00 
)00 
Snap11 
(11 	
)11	 

;11
 
}22 
public44 
void44	 
Snap44 
(44 
)44 
{55 
if66 
(66 

targetRect66 
)66 
{77 
if88 
(88 
lastRect88 
!=88 
new88 
Rect88 
(88 

targetRect88 '
.88' (
position88( 0
.880 1
x881 2
,882 3

targetRect884 >
.88> ?
position88? G
.88G H
y88H I
,88I J

targetRect88K U
.88U V
	sizeDelta88V _
.88_ `
x88` a
,88a b

targetRect88c m
.88m n
	sizeDelta88n w
.88w x
y88x y
)88y z
)88z {
{99 
lastRect:: 
=:: 
new:: 
Rect:: 
(:: 

targetRect:: #
.::# $
position::$ ,
.::, -
x::- .
,::. /

targetRect::0 :
.::: ;
position::; C
.::C D
y::D E
,::E F

targetRect::G Q
.::Q R
	sizeDelta::R [
.::[ \
x::\ ]
,::] ^

targetRect::_ i
.::i j
	sizeDelta::j s
.::s t
y::t u
)::u v
;::v w
if<< 
(<< 	
!<<	 

sizeOnly<<
 
)<< 
thisRect== 
.== 
position== 
=== 

targetRect== $
.==$ %
position==% -
;==- .
Vector2?? 
	tempVect2?? 
;?? 
ifAA 
(AA 	

percentageAA	 
)AA 
{BB 
	tempVect2CC 
.CC 
xCC 
=CC 

targetRectCC 
.CC 
	sizeDeltaCC (
.CC( )
xCC) *
*CC* +
xPercentCC+ 3
*CC3 4
$numCC4 9
;CC9 :
	tempVect2DD 
.DD 
yDD 
=DD 

targetRectDD 
.DD 
	sizeDeltaDD (
.DD( )
yDD) *
*DD* +
yPercentDD+ 3
*DD3 4
$numDD4 9
;DD9 :
}EE 
elseFF 	
{GG 
	tempVect2HH 
.HH 
xHH 
=HH 

targetRectHH 
.HH 
	sizeDeltaHH (
.HH( )
xHH) *
+HH+ ,
xPaddingHH- 5
;HH5 6
	tempVect2II 
.II 
yII 
=II 

targetRectII 
.II 
	sizeDeltaII (
.II( )
yII) *
+II+ ,
yPaddingII- 5
;II5 6
}JJ 
thisRectLL 
.LL 
	sizeDeltaLL 
=LL 
	tempVect2LL #
;LL# $
}MM 
}NN 
elseOO 
{PP 
DebugQQ 	
.QQ	 

LogQQ
 
(QQ 
$strQQ 2
)QQ2 3
;QQ3 4
}RR 
}SS 
}TT 
}UU ”
BF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ShadowAnim.cs
	namespace 	

MaterialUI
 
{ 
public 
class 

ShadowAnim 
: 
MonoBehaviour (
{ 
public 
bool	 
isOn 
; 
public 
bool	 
anim 
; 
CanvasGroup 
	thisGroup 
; 
Image 
[ 
] 	
shadows
 
; 
void 
Awake 
( 
) 
{ 
	thisGroup 
= 

gameObject 
. 
GetComponent &
<& '
CanvasGroup' 2
>2 3
(4 5
)5 6
;6 7
shadows 

= 

gameObject 
. #
GetComponentsInChildren /
</ 0
Image0 5
>5 6
(7 8
)8 9
;9 :
} 
void 
Update 
( 
) 
{ 
if 
( 
anim 
) 
{   
if!! 
(!! 
isOn!! 
)!! 
{"" 
if## 
(## 	
	thisGroup##	 
.## 
alpha## 
<## 
$num## 
)## 
{$$ 
	thisGroup%% 
.%% 
alpha%% 
=%% 
Mathf%% 
.%% 
Lerp%% "
(%%" #
	thisGroup%%# ,
.%%, -
alpha%%- 2
,%%2 3
$num%%4 8
,%%8 9
Time%%: >
.%%> ?
	deltaTime%%? H
*%%I J
$num%%K L
)%%L M
;%%M N
}&& 
else'' 	
{(( 
	thisGroup)) 
.)) 
alpha)) 
=)) 
$num)) 
;)) 
anim** 

=** 
false** 
;** 
}++ 
},, 
else-- 
{.. 
if// 
(// 	
	thisGroup//	 
.// 
alpha// 
>// 
$num// 
)// 
{00 
	thisGroup11 
.11 
alpha11 
=11 
Mathf11 
.11 
Lerp11 "
(11" #
	thisGroup11# ,
.11, -
alpha11- 2
,112 3
-114 5
$num115 9
,119 :
Time11; ?
.11? @
	deltaTime11@ I
*11J K
$num11L M
)11M N
;11N O
}22 
else33 	
{44 
	thisGroup55 
.55 
alpha55 
=55 
$num55 
;55 
anim66 

=66 
false66 
;66 
foreach77 
(77 
Image77 
shadow77 
in77 
shadows77 &
)77& '
shadow88 
.88 
enabled88 
=88 
false88 
;88 
}99 
}:: 
};; 
}<< 
public>> 
void>>	 
	SetShadow>> 
(>> 
bool>> 
set>> !
)>>! "
{?? 
isOn@@ 
=@@ 	
set@@
 
;@@ 
animAA 
=AA 	
trueAA
 
;AA 
foreachBB 

(BB 
ImageBB 
shadowBB 
inBB 
shadowsBB #
)BB# $
shadowCC 

.CC
 
enabledCC 
=CC 
trueCC 
;CC 
}DD 
}EE 
}FF Ôï
XF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\VertexShakeB.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
VertexShakeB 
: 
MonoBehaviour  -
{		 
public 
float 
AngleMultiplier $
=% &
$num' +
;+ ,
public 
float 
SpeedMultiplier $
=% &
$num' +
;+ ,
public 
float 

CurveScale 
=  !
$num" &
;& '
private 
TMP_Text 
m_TextComponent (
;( )
private 
bool 
hasTextChanged #
;# $
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 
GetComponent *
<* +
TMP_Text+ 3
>3 4
(4 5
)5 6
;6 7
} 	
void 
OnEnable 
( 
) 
{ 	
TMPro_EventManager 
. 
TEXT_CHANGED_EVENT 1
.1 2
Add2 5
(5 6
ON_TEXT_CHANGED6 E
)E F
;F G
} 	
void 
	OnDisable 
( 
) 
{ 	
TMPro_EventManager   
.   
TEXT_CHANGED_EVENT   1
.  1 2
Remove  2 8
(  8 9
ON_TEXT_CHANGED  9 H
)  H I
;  I J
}!! 	
void$$ 
Start$$ 
($$ 
)$$ 
{%% 	
StartCoroutine&& 
(&& 
AnimateVertexColors&& .
(&&. /
)&&/ 0
)&&0 1
;&&1 2
}'' 	
void** 
ON_TEXT_CHANGED** 
(** 
Object** #
obj**$ '
)**' (
{++ 	
if,, 
(,, 
obj,, 
=,, 
m_TextComponent,, %
),,% &
hasTextChanged-- 
=--  
true--! %
;--% &
}.. 	
IEnumerator44 
AnimateVertexColors44 '
(44' (
)44( )
{55 	
m_TextComponent99 
.99 
ForceMeshUpdate99 +
(99+ ,
)99, -
;99- .
TMP_TextInfo;; 
textInfo;; !
=;;" #
m_TextComponent;;$ 3
.;;3 4
textInfo;;4 <
;;;< =
	Matrix4x4== 
matrix== 
;== 
Vector3>> 
[>> 
]>> 
[>> 
]>> 
copyOfVertices>> &
=>>' (
new>>) ,
Vector3>>- 4
[>>4 5
$num>>5 6
]>>6 7
[>>7 8
]>>8 9
;>>9 :
hasTextChanged@@ 
=@@ 
true@@ !
;@@! "
whileBB 
(BB 
trueBB 
)BB 
{CC 
ifEE 
(EE 
hasTextChangedEE "
)EE" #
{FF 
ifGG 
(GG 
copyOfVerticesGG &
.GG& '
LengthGG' -
<GG. /
textInfoGG0 8
.GG8 9
meshInfoGG9 A
.GGA B
LengthGGB H
)GGH I
copyOfVerticesHH &
=HH' (
newHH) ,
Vector3HH- 4
[HH4 5
textInfoHH5 =
.HH= >
meshInfoHH> F
.HHF G
LengthHHG M
]HHM N
[HHN O
]HHO P
;HHP Q
forJJ 
(JJ 
intJJ 
iJJ 
=JJ  
$numJJ! "
;JJ" #
iJJ$ %
<JJ& '
textInfoJJ( 0
.JJ0 1
meshInfoJJ1 9
.JJ9 :
LengthJJ: @
;JJ@ A
iJJB C
++JJC E
)JJE F
{KK 
intLL 
lengthLL "
=LL# $
textInfoLL% -
.LL- .
meshInfoLL. 6
[LL6 7
iLL7 8
]LL8 9
.LL9 :
verticesLL: B
.LLB C
LengthLLC I
;LLI J
copyOfVerticesMM &
[MM& '
iMM' (
]MM( )
=MM* +
newMM, /
Vector3MM0 7
[MM7 8
lengthMM8 >
]MM> ?
;MM? @
}NN 
hasTextChangedPP "
=PP# $
falsePP% *
;PP* +
}QQ 
intSS 
characterCountSS "
=SS# $
textInfoSS% -
.SS- .
characterCountSS. <
;SS< =
ifVV 
(VV 
characterCountVV "
==VV# %
$numVV& '
)VV' (
{WW 
yieldXX 
returnXX  
newXX! $
WaitForSecondsXX% 3
(XX3 4
$numXX4 9
)XX9 :
;XX: ;
continueYY 
;YY 
}ZZ 
int\\ 
	lineCount\\ 
=\\ 
textInfo\\  (
.\\( )
	lineCount\\) 2
;\\2 3
for__ 
(__ 
int__ 
i__ 
=__ 
$num__ 
;__ 
i__  !
<__" #
	lineCount__$ -
;__- .
i__/ 0
++__0 2
)__2 3
{`` 
intbb 
firstbb 
=bb 
textInfobb  (
.bb( )
lineInfobb) 1
[bb1 2
ibb2 3
]bb3 4
.bb4 5
firstCharacterIndexbb5 H
;bbH I
intcc 
lastcc 
=cc 
textInfocc '
.cc' (
lineInfocc( 0
[cc0 1
icc1 2
]cc2 3
.cc3 4
lastCharacterIndexcc4 F
;ccF G
Vector3ff 
centerOfLineff (
=ff) *
(ff+ ,
textInfoff, 4
.ff4 5
characterInfoff5 B
[ffB C
firstffC H
]ffH I
.ffI J

bottomLeftffJ T
+ffU V
textInfoffW _
.ff_ `
characterInfoff` m
[ffm n
lastffn r
]ffr s
.ffs t
topRightfft |
)ff| }
/ff~ 
$num
ffÄ Å
;
ffÅ Ç

Quaterniongg 
rotationgg '
=gg( )

Quaterniongg* 4
.gg4 5
Eulergg5 :
(gg: ;
$numgg; <
,gg< =
$numgg> ?
,gg? @
RandomggA G
.ggG H
RangeggH M
(ggM N
-ggN O
$numggO T
,ggT U
$numggV [
)gg[ \
)gg\ ]
;gg] ^
forjj 
(jj 
intjj 
jjj 
=jj  
firstjj! &
;jj& '
jjj( )
<=jj* ,
lastjj- 1
;jj1 2
jjj3 4
++jj4 6
)jj6 7
{kk 
ifmm 
(mm 
!mm 
textInfomm %
.mm% &
characterInfomm& 3
[mm3 4
jmm4 5
]mm5 6
.mm6 7
	isVisiblemm7 @
)mm@ A
continuenn $
;nn$ %
intqq 
materialIndexqq )
=qq* +
textInfoqq, 4
.qq4 5
characterInfoqq5 B
[qqB C
jqqC D
]qqD E
.qqE F"
materialReferenceIndexqqF \
;qq\ ]
inttt 
vertexIndextt '
=tt( )
textInfott* 2
.tt2 3
characterInfott3 @
[tt@ A
jttA B
]ttB C
.ttC D
vertexIndexttD O
;ttO P
Vector3ww 
[ww  
]ww  !
sourceVerticesww" 0
=ww1 2
textInfoww3 ;
.ww; <
meshInfoww< D
[wwD E
materialIndexwwE R
]wwR S
.wwS T
verticeswwT \
;ww\ ]
Vector3zz 

charCenterzz  *
=zz+ ,
(zz- .
sourceVerticeszz. <
[zz< =
vertexIndexzz= H
+zzI J
$numzzK L
]zzL M
+zzN O
sourceVerticeszzP ^
[zz^ _
vertexIndexzz_ j
+zzk l
$numzzm n
]zzn o
)zzo p
/zzq r
$numzzs t
;zzt u
copyOfVertices~~ &
[~~& '
materialIndex~~' 4
]~~4 5
[~~5 6
vertexIndex~~6 A
+~~B C
$num~~D E
]~~E F
=~~G H
sourceVertices~~I W
[~~W X
vertexIndex~~X c
+~~d e
$num~~f g
]~~g h
-~~i j

charCenter~~k u
;~~u v
copyOfVertices &
[& '
materialIndex' 4
]4 5
[5 6
vertexIndex6 A
+B C
$numD E
]E F
=G H
sourceVerticesI W
[W X
vertexIndexX c
+d e
$numf g
]g h
-i j

charCenterk u
;u v
copyOfVertices
ÄÄ &
[
ÄÄ& '
materialIndex
ÄÄ' 4
]
ÄÄ4 5
[
ÄÄ5 6
vertexIndex
ÄÄ6 A
+
ÄÄB C
$num
ÄÄD E
]
ÄÄE F
=
ÄÄG H
sourceVertices
ÄÄI W
[
ÄÄW X
vertexIndex
ÄÄX c
+
ÄÄd e
$num
ÄÄf g
]
ÄÄg h
-
ÄÄi j

charCenter
ÄÄk u
;
ÄÄu v
copyOfVertices
ÅÅ &
[
ÅÅ& '
materialIndex
ÅÅ' 4
]
ÅÅ4 5
[
ÅÅ5 6
vertexIndex
ÅÅ6 A
+
ÅÅB C
$num
ÅÅD E
]
ÅÅE F
=
ÅÅG H
sourceVertices
ÅÅI W
[
ÅÅW X
vertexIndex
ÅÅX c
+
ÅÅd e
$num
ÅÅf g
]
ÅÅg h
-
ÅÅi j

charCenter
ÅÅk u
;
ÅÅu v
float
ÑÑ 
randomScale
ÑÑ )
=
ÑÑ* +
Random
ÑÑ, 2
.
ÑÑ2 3
Range
ÑÑ3 8
(
ÑÑ8 9
$num
ÑÑ9 >
,
ÑÑ> ?
$num
ÑÑ@ E
)
ÑÑE F
;
ÑÑF G
matrix
áá 
=
áá  
	Matrix4x4
áá! *
.
áá* +
TRS
áá+ .
(
áá. /
Vector3
áá/ 6
.
áá6 7
one
áá7 :
,
áá: ;

Quaternion
áá< F
.
ááF G
identity
ááG O
,
ááO P
Vector3
ááQ X
.
ááX Y
one
ááY \
*
áá] ^
randomScale
áá_ j
)
ááj k
;
áák l
copyOfVertices
ää &
[
ää& '
materialIndex
ää' 4
]
ää4 5
[
ää5 6
vertexIndex
ää6 A
+
ääB C
$num
ääD E
]
ääE F
=
ääG H
matrix
ääI O
.
ääO P
MultiplyPoint3x4
ääP `
(
ää` a
copyOfVertices
ääa o
[
ääo p
materialIndex
ääp }
]
ää} ~
[
ää~ 
vertexIndexää ä
+ääã å
$numääç é
]ääé è
)ääè ê
;ääê ë
copyOfVertices
ãã &
[
ãã& '
materialIndex
ãã' 4
]
ãã4 5
[
ãã5 6
vertexIndex
ãã6 A
+
ããB C
$num
ããD E
]
ããE F
=
ããG H
matrix
ããI O
.
ããO P
MultiplyPoint3x4
ããP `
(
ãã` a
copyOfVertices
ããa o
[
ãão p
materialIndex
ããp }
]
ãã} ~
[
ãã~ 
vertexIndexãã ä
+ããã å
$numããç é
]ããé è
)ããè ê
;ããê ë
copyOfVertices
åå &
[
åå& '
materialIndex
åå' 4
]
åå4 5
[
åå5 6
vertexIndex
åå6 A
+
ååB C
$num
ååD E
]
ååE F
=
ååG H
matrix
ååI O
.
ååO P
MultiplyPoint3x4
ååP `
(
åå` a
copyOfVertices
ååa o
[
ååo p
materialIndex
ååp }
]
åå} ~
[
åå~ 
vertexIndexåå ä
+ååã å
$numååç é
]ååé è
)ååè ê
;ååê ë
copyOfVertices
çç &
[
çç& '
materialIndex
çç' 4
]
çç4 5
[
çç5 6
vertexIndex
çç6 A
+
ççB C
$num
ççD E
]
ççE F
=
ççG H
matrix
ççI O
.
ççO P
MultiplyPoint3x4
ççP `
(
çç` a
copyOfVertices
çça o
[
çço p
materialIndex
ççp }
]
çç} ~
[
çç~ 
vertexIndexçç ä
+ççã å
$numççç é
]ççé è
)ççè ê
;ççê ë
copyOfVertices
êê &
[
êê& '
materialIndex
êê' 4
]
êê4 5
[
êê5 6
vertexIndex
êê6 A
+
êêB C
$num
êêD E
]
êêE F
+=
êêG I

charCenter
êêJ T
;
êêT U
copyOfVertices
ëë &
[
ëë& '
materialIndex
ëë' 4
]
ëë4 5
[
ëë5 6
vertexIndex
ëë6 A
+
ëëB C
$num
ëëD E
]
ëëE F
+=
ëëG I

charCenter
ëëJ T
;
ëëT U
copyOfVertices
íí &
[
íí& '
materialIndex
íí' 4
]
íí4 5
[
íí5 6
vertexIndex
íí6 A
+
ííB C
$num
ííD E
]
ííE F
+=
ííG I

charCenter
ííJ T
;
ííT U
copyOfVertices
ìì &
[
ìì& '
materialIndex
ìì' 4
]
ìì4 5
[
ìì5 6
vertexIndex
ìì6 A
+
ììB C
$num
ììD E
]
ììE F
+=
ììG I

charCenter
ììJ T
;
ììT U
copyOfVertices
óó &
[
óó& '
materialIndex
óó' 4
]
óó4 5
[
óó5 6
vertexIndex
óó6 A
+
óóB C
$num
óóD E
]
óóE F
-=
óóG I
centerOfLine
óóJ V
;
óóV W
copyOfVertices
òò &
[
òò& '
materialIndex
òò' 4
]
òò4 5
[
òò5 6
vertexIndex
òò6 A
+
òòB C
$num
òòD E
]
òòE F
-=
òòG I
centerOfLine
òòJ V
;
òòV W
copyOfVertices
ôô &
[
ôô& '
materialIndex
ôô' 4
]
ôô4 5
[
ôô5 6
vertexIndex
ôô6 A
+
ôôB C
$num
ôôD E
]
ôôE F
-=
ôôG I
centerOfLine
ôôJ V
;
ôôV W
copyOfVertices
öö &
[
öö& '
materialIndex
öö' 4
]
öö4 5
[
öö5 6
vertexIndex
öö6 A
+
ööB C
$num
ööD E
]
ööE F
-=
ööG I
centerOfLine
ööJ V
;
ööV W
matrix
ùù 
=
ùù  
	Matrix4x4
ùù! *
.
ùù* +
TRS
ùù+ .
(
ùù. /
Vector3
ùù/ 6
.
ùù6 7
one
ùù7 :
,
ùù: ;
rotation
ùù< D
,
ùùD E
Vector3
ùùF M
.
ùùM N
one
ùùN Q
)
ùùQ R
;
ùùR S
copyOfVertices
†† &
[
††& '
materialIndex
††' 4
]
††4 5
[
††5 6
vertexIndex
††6 A
+
††B C
$num
††D E
]
††E F
=
††G H
matrix
††I O
.
††O P
MultiplyPoint3x4
††P `
(
††` a
copyOfVertices
††a o
[
††o p
materialIndex
††p }
]
††} ~
[
††~ 
vertexIndex†† ä
+††ã å
$num††ç é
]††é è
)††è ê
;††ê ë
copyOfVertices
°° &
[
°°& '
materialIndex
°°' 4
]
°°4 5
[
°°5 6
vertexIndex
°°6 A
+
°°B C
$num
°°D E
]
°°E F
=
°°G H
matrix
°°I O
.
°°O P
MultiplyPoint3x4
°°P `
(
°°` a
copyOfVertices
°°a o
[
°°o p
materialIndex
°°p }
]
°°} ~
[
°°~ 
vertexIndex°° ä
+°°ã å
$num°°ç é
]°°é è
)°°è ê
;°°ê ë
copyOfVertices
¢¢ &
[
¢¢& '
materialIndex
¢¢' 4
]
¢¢4 5
[
¢¢5 6
vertexIndex
¢¢6 A
+
¢¢B C
$num
¢¢D E
]
¢¢E F
=
¢¢G H
matrix
¢¢I O
.
¢¢O P
MultiplyPoint3x4
¢¢P `
(
¢¢` a
copyOfVertices
¢¢a o
[
¢¢o p
materialIndex
¢¢p }
]
¢¢} ~
[
¢¢~ 
vertexIndex¢¢ ä
+¢¢ã å
$num¢¢ç é
]¢¢é è
)¢¢è ê
;¢¢ê ë
copyOfVertices
££ &
[
££& '
materialIndex
££' 4
]
££4 5
[
££5 6
vertexIndex
££6 A
+
££B C
$num
££D E
]
££E F
=
££G H
matrix
££I O
.
££O P
MultiplyPoint3x4
££P `
(
££` a
copyOfVertices
££a o
[
££o p
materialIndex
££p }
]
££} ~
[
££~ 
vertexIndex££ ä
+££ã å
$num££ç é
]££é è
)££è ê
;££ê ë
copyOfVertices
¶¶ &
[
¶¶& '
materialIndex
¶¶' 4
]
¶¶4 5
[
¶¶5 6
vertexIndex
¶¶6 A
+
¶¶B C
$num
¶¶D E
]
¶¶E F
+=
¶¶G I
centerOfLine
¶¶J V
;
¶¶V W
copyOfVertices
ßß &
[
ßß& '
materialIndex
ßß' 4
]
ßß4 5
[
ßß5 6
vertexIndex
ßß6 A
+
ßßB C
$num
ßßD E
]
ßßE F
+=
ßßG I
centerOfLine
ßßJ V
;
ßßV W
copyOfVertices
®® &
[
®®& '
materialIndex
®®' 4
]
®®4 5
[
®®5 6
vertexIndex
®®6 A
+
®®B C
$num
®®D E
]
®®E F
+=
®®G I
centerOfLine
®®J V
;
®®V W
copyOfVertices
©© &
[
©©& '
materialIndex
©©' 4
]
©©4 5
[
©©5 6
vertexIndex
©©6 A
+
©©B C
$num
©©D E
]
©©E F
+=
©©G I
centerOfLine
©©J V
;
©©V W
}
™™ 
}
´´ 
for
ÆÆ 
(
ÆÆ 
int
ÆÆ 
i
ÆÆ 
=
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
i
ÆÆ  !
<
ÆÆ" #
textInfo
ÆÆ$ ,
.
ÆÆ, -
meshInfo
ÆÆ- 5
.
ÆÆ5 6
Length
ÆÆ6 <
;
ÆÆ< =
i
ÆÆ> ?
++
ÆÆ? A
)
ÆÆA B
{
ØØ 
textInfo
∞∞ 
.
∞∞ 
meshInfo
∞∞ %
[
∞∞% &
i
∞∞& '
]
∞∞' (
.
∞∞( )
mesh
∞∞) -
.
∞∞- .
vertices
∞∞. 6
=
∞∞7 8
copyOfVertices
∞∞9 G
[
∞∞G H
i
∞∞H I
]
∞∞I J
;
∞∞J K
m_TextComponent
±± #
.
±±# $
UpdateGeometry
±±$ 2
(
±±2 3
textInfo
±±3 ;
.
±±; <
meshInfo
±±< D
[
±±D E
i
±±E F
]
±±F G
.
±±G H
mesh
±±H L
,
±±L M
i
±±N O
)
±±O P
;
±±P Q
}
≤≤ 
yield
¥¥ 
return
¥¥ 
new
¥¥  
WaitForSeconds
¥¥! /
(
¥¥/ 0
$num
¥¥0 4
)
¥¥4 5
;
¥¥5 6
}
µµ 
}
∂∂ 	
}
∏∏ 
}ππ Ô
IF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ToggleTextChanger.cs
[ 
ExecuteInEditMode 
] 
public 
class 
ToggleTextChanger 
:  
MonoBehaviour! .
{ 
private 
Text	 
thisText 
; 
public 
string 
onText 
; 
public 
string 
offText 
; 
void 
Awake 
( 
) 
{ 
thisText 

= 

gameObject 
. 
GetComponent $
<$ %
Text% )
>) *
(* +
)+ ,
;, -
} 
public 
void 

ToggleText 
( 
bool 
isToggledOn (
)( )
{ 
thisText 

.
 
text 
= 
isToggledOn 
? 
onText  &
:' (
offText) 0
;0 1
} 
} Ω5
?F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\FileReading.cs
public		 
class		 
FileReading		 
:		 
MonoBehaviour		 (
{

 
private 
List 
< 
string 
> 
questionList %
=& '
new( +
List, 0
<0 1
string1 7
>7 8
(8 9
)9 :
;: ;
private 
List 
< 
string 
> 
rightAnswerList (
=) *
new+ .
List/ 3
<3 4
string4 :
>: ;
(; <
)< =
;= >
private 
List 
< 
string 
[ 
] 
> 
wrongAnswerListList .
=/ 0
new1 4
List5 9
<9 :
string: @
[@ A
]A B
>B C
(C D
)D E
;E F
public 

string 
fileName 
; 
void 
Start	 
( 
) 
{ 
SceneSwitchQuiz 
Quiz 
= 

GameObject )
.) *
Find* .
(. /
$str/ =
)= >
.> ?
GetComponent? K
<K L
SceneSwitchQuizL [
>[ \
(\ ]
)] ^
;^ _
ReadFile 
( 
fileName 
) 
; 
} 
public 

void 
ReadFile 
( 
string 
fileName  (
)( )
{ 
string 
filePath 
= 
Application %
.% &
dataPath& .
+/ 0
$str1 4
+5 6
fileName7 ?
;? @
UnityEngine 
. 
Debug 
. 
Log 
( 
filePath &
)& '
;' (
List"" 
<"" 
string"" 
>"" 
wrongAnswerList"" $
=""% &
new""' *
List""+ /
<""/ 0
string""0 6
>""6 7
(""7 8
)""8 9
;""9 :
foreach&& 
(&& 
string&& 
fileLine&&  
in&&! #
System&&$ *
.&&* +
IO&&+ -
.&&- .
File&&. 2
.&&2 3
	ReadLines&&3 <
(&&< =
	@filePath&&= F
)&&F G
)&&G H
{'' 	
string)) 
[)) 
])) 
lineArr)) 
=)) 
fileLine)) '
.))' (
Split))( -
())- .
$char)). 1
)))1 2
;))2 3
this33 
.33 
questionList33 
.33 
Add33 !
(33! "
lineArr33" )
[33) *
$num33* +
]33+ ,
)33, -
;33- .
this44 
.44 
rightAnswerList44  
.44  !
Add44! $
(44$ %
lineArr44% ,
[44, -
$num44- .
]44. /
)44/ 0
;440 1
wrongAnswerList55 
.55 
Add55 
(55  
lineArr55  '
[55' (
$num55( )
]55) *
)55* +
;55+ ,
wrongAnswerList66 
.66 
Add66 
(66  
lineArr66  '
[66' (
$num66( )
]66) *
)66* +
;66+ ,
wrongAnswerList77 
.77 
Add77 
(77  
lineArr77  '
[77' (
$num77( )
]77) *
)77* +
;77+ ,
string:: 
[:: 
]:: 
wrongAnswerArr:: #
=::$ %
wrongAnswerList::& 5
.::5 6
ToArray::6 =
(::= >
)::> ?
;::? @
this== 
.== 
wrongAnswerListList== $
.==$ %
Add==% (
(==( )
wrongAnswerArr==) 7
)==7 8
;==8 9
wrongAnswerList@@ 
.@@ 
Clear@@ !
(@@! "
)@@" #
;@@# $
}BB 	
foreachEE 
(EE 
varEE 
arrEE 
inEE 
wrongAnswerListListEE /
)EE/ 0
{FF 	
foreachGG 
(GG 
varGG 
strGG 
inGG 
arrGG  #
)GG# $
{HH 
}JJ 
}KK 	
}LL 
publicNN 

stringNN 
[NN 
]NN 
getQuestionArrNN "
(NN" #
)NN# $
{OO 
SceneSwitchQuizPP 
QuizPP 
=PP 

GameObjectPP )
.PP) *
FindPP* .
(PP. /
$strPP/ =
)PP= >
.PP> ?
GetComponentPP? K
<PPK L
SceneSwitchQuizPPL [
>PP[ \
(PP\ ]
)PP] ^
;PP^ _
ReadFileQQ 
(QQ 
fileNameQQ 
)QQ 
;QQ 
returnRR 
thisRR 
.RR 
questionListRR  
.RR  !
ToArrayRR! (
(RR( )
)RR) *
;RR* +
}SS 
publicUU 

stringUU 
[UU 
]UU 
getRightAnswerArrUU %
(UU% &
)UU& '
{VV 
SceneSwitchQuizWW 
QuizWW 
=WW 

GameObjectWW )
.WW) *
FindWW* .
(WW. /
$strWW/ =
)WW= >
.WW> ?
GetComponentWW? K
<WWK L
SceneSwitchQuizWWL [
>WW[ \
(WW\ ]
)WW] ^
;WW^ _
ReadFileXX 
(XX 
fileNameXX 
)XX 
;XX 
returnYY 
thisYY 
.YY 
rightAnswerListYY #
.YY# $
ToArrayYY$ +
(YY+ ,
)YY, -
;YY- .
}ZZ 
public\\ 

string\\ 
[\\ 
]\\ 
[\\ 
]\\ !
getWrongAnswerListArr\\ +
(\\+ ,
)\\, -
{]] 
SceneSwitchQuiz^^ 
Quiz^^ 
=^^ 

GameObject^^ )
.^^) *
Find^^* .
(^^. /
$str^^/ =
)^^= >
.^^> ?
GetComponent^^? K
<^^K L
SceneSwitchQuiz^^L [
>^^[ \
(^^\ ]
)^^] ^
;^^^ _
ReadFile__ 
(__ 
fileName__ 
)__ 
;__ 
return`` 
this`` 
.`` 
wrongAnswerListList`` '
.``' (
ToArray``( /
(``/ 0
)``0 1
;``1 2
}aa 
}bb í
ZF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\EnvMapAnimator.cs
public 
class 
EnvMapAnimator 
: 
MonoBehaviour +
{, -
public 

Vector3 
RotationSpeeds !
;! "
private		 
TMP_Text		 
m_textMeshPro		 "
;		" #
private

 
Material

 

m_material

 
;

  
void 
Awake	 
( 
) 
{ 
m_textMeshPro 
= 
GetComponent $
<$ %
TMP_Text% -
>- .
(. /
)/ 0
;0 1

m_material 
= 
m_textMeshPro "
." #
fontSharedMaterial# 5
;5 6
} 
IEnumerator 
Start 
( 
) 
{ 
	Matrix4x4 
matrix 
= 
new 
	Matrix4x4 (
(( )
)) *
;* +
while 
( 
true 
) 
{ 	
matrix 
. 
SetTRS 
( 
Vector3 "
." #
zero# '
,' (

Quaternion) 3
.3 4
Euler4 9
(9 :
Time: >
.> ?
time? C
*D E
RotationSpeedsF T
.T U
xU V
,V W
TimeX \
.\ ]
time] a
*b c
RotationSpeedsd r
.r s
ys t
,u v
Timew {
.{ |
time	| Ä
*
Å Ç
RotationSpeeds
É ë
.
ë í
z
í ì
)
ì î
,
î ï
Vector3
ñ ù
.
ù û
one
û °
)
° ¢
;
¢ £

m_material 
. 
	SetMatrix  
(  !
$str! -
,- .
matrix/ 5
)5 6
;6 7
yield   
return   
null   
;   
}!! 	
}"" 
}## ÚX
bF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_UiFrameRateCounter.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class "
TMP_UiFrameRateCounter '
:( )
MonoBehaviour* 7
{		 
public

 
float

 
UpdateInterval

 #
=

$ %
$num

& *
;

* +
private 
float 
m_LastInterval $
=% &
$num' (
;( )
private 
int 
m_Frames 
= 
$num  
;  !
public 
enum %
FpsCounterAnchorPositions -
{. /
TopLeft0 7
,7 8

BottomLeft9 C
,C D
TopRightE M
,M N
BottomRightO Z
}[ \
;\ ]
public %
FpsCounterAnchorPositions (
AnchorPosition) 7
=8 9%
FpsCounterAnchorPositions: S
.S T
TopRightT \
;\ ]
private 
string 
htmlColorTag #
;# $
private 
const 
string 
fpsLabel %
=& '
$str( a
;a b
private 
TextMeshProUGUI 
m_TextMeshPro  -
;- .
private 
RectTransform $
m_frameCounter_transform 6
;6 7
private %
FpsCounterAnchorPositions )
last_AnchorPosition* =
;= >
void 
Awake 
( 
) 
{ 	
if 
( 
! 
enabled 
) 
return 
; 
Application 
. 
targetFrameRate '
=( )
$num* .
;. /

GameObject!! 
frameCounter!! #
=!!$ %
new!!& )

GameObject!!* 4
(!!4 5
$str!!5 D
)!!D E
;!!E F$
m_frameCounter_transform"" $
=""% &
frameCounter""' 3
.""3 4
AddComponent""4 @
<""@ A
RectTransform""A N
>""N O
(""O P
)""P Q
;""Q R$
m_frameCounter_transform$$ $
.$$$ %
	SetParent$$% .
($$. /
this$$/ 3
.$$3 4
	transform$$4 =
,$$= >
false$$? D
)$$D E
;$$E F
m_TextMeshPro&& 
=&& 
frameCounter&& (
.&&( )
AddComponent&&) 5
<&&5 6
TextMeshProUGUI&&6 E
>&&E F
(&&F G
)&&G H
;&&H I
m_TextMeshPro'' 
.'' 
font'' 
=''  
	Resources''! *
.''* +
Load''+ /
<''/ 0
TMP_FontAsset''0 =
>''= >
(''> ?
$str''? e
)''e f
;''f g
m_TextMeshPro(( 
.(( 
fontSharedMaterial(( ,
=((- .
	Resources((/ 8
.((8 9
Load((9 =
<((= >
Material((> F
>((F G
(((G H
$str((H x
)((x y
;((y z
m_TextMeshPro** 
.** 
enableWordWrapping** ,
=**- .
false**/ 4
;**4 5
m_TextMeshPro++ 
.++ 
fontSize++ "
=++# $
$num++% '
;++' (
m_TextMeshPro-- 
.-- 
	isOverlay-- #
=--$ %
true--& *
;--* +%
Set_FrameCounter_Position// %
(//% &
AnchorPosition//& 4
)//4 5
;//5 6
last_AnchorPosition00 
=00  !
AnchorPosition00" 0
;000 1
}11 	
void44 
Start44 
(44 
)44 
{55 	
m_LastInterval66 
=66 
Time66 !
.66! " 
realtimeSinceStartup66" 6
;666 7
m_Frames77 
=77 
$num77 
;77 
}88 	
void;; 
Update;; 
(;; 
);; 
{<< 	
if== 
(== 
AnchorPosition== 
!=== !
last_AnchorPosition==" 5
)==5 6%
Set_FrameCounter_Position>> )
(>>) *
AnchorPosition>>* 8
)>>8 9
;>>9 :
last_AnchorPosition@@ 
=@@  !
AnchorPosition@@" 0
;@@0 1
m_FramesBB 
+=BB 
$numBB 
;BB 
floatCC 
timeNowCC 
=CC 
TimeCC  
.CC  ! 
realtimeSinceStartupCC! 5
;CC5 6
ifEE 
(EE 
timeNowEE 
>EE 
m_LastIntervalEE (
+EE) *
UpdateIntervalEE+ 9
)EE9 :
{FF 
floatHH 
fpsHH 
=HH 
m_FramesHH $
/HH% &
(HH' (
timeNowHH( /
-HH0 1
m_LastIntervalHH2 @
)HH@ A
;HHA B
floatII 
msII 
=II 
$numII "
/II# $
MathfII% *
.II* +
MaxII+ .
(II. /
fpsII/ 2
,II2 3
$numII4 <
)II< =
;II= >
ifKK 
(KK 
fpsKK 
<KK 
$numKK 
)KK 
htmlColorTagLL  
=LL! "
$strLL# 3
;LL3 4
elseMM 
ifMM 
(MM 
fpsMM 
<MM 
$numMM !
)MM! "
htmlColorTagNN  
=NN! "
$strNN# 0
;NN0 1
elseOO 
htmlColorTagPP  
=PP! "
$strPP# 2
;PP2 3
m_TextMeshProRR 
.RR 
SetTextRR %
(RR% &
htmlColorTagRR& 2
+RR3 4
fpsLabelRR5 =
,RR= >
fpsRR? B
,RRB C
msRRD F
)RRF G
;RRG H
m_FramesTT 
=TT 
$numTT 
;TT 
m_LastIntervalUU 
=UU  
timeNowUU! (
;UU( )
}VV 
}WW 	
voidZZ %
Set_FrameCounter_PositionZZ &
(ZZ& '%
FpsCounterAnchorPositionsZZ' @
anchor_positionZZA P
)ZZP Q
{[[ 	
switch\\ 
(\\ 
anchor_position\\ #
)\\# $
{]] 
case^^ %
FpsCounterAnchorPositions^^ .
.^^. /
TopLeft^^/ 6
:^^6 7
m_TextMeshPro__ !
.__! "
	alignment__" +
=__, - 
TextAlignmentOptions__. B
.__B C
TopLeft__C J
;__J K$
m_frameCounter_transform`` ,
.``, -
pivot``- 2
=``3 4
new``5 8
Vector2``9 @
(``@ A
$num``A B
,``B C
$num``D E
)``E F
;``F G$
m_frameCounter_transformaa ,
.aa, -
	anchorMinaa- 6
=aa7 8
newaa9 <
Vector2aa= D
(aaD E
$numaaE J
,aaJ K
$numaaL Q
)aaQ R
;aaR S$
m_frameCounter_transformbb ,
.bb, -
	anchorMaxbb- 6
=bb7 8
newbb9 <
Vector2bb= D
(bbD E
$numbbE J
,bbJ K
$numbbL Q
)bbQ R
;bbR S$
m_frameCounter_transformcc ,
.cc, -
anchoredPositioncc- =
=cc> ?
newcc@ C
Vector2ccD K
(ccK L
$numccL M
,ccM N
$numccO P
)ccP Q
;ccQ R
breakdd 
;dd 
caseee %
FpsCounterAnchorPositionsee .
.ee. /

BottomLeftee/ 9
:ee9 :
m_TextMeshProff !
.ff! "
	alignmentff" +
=ff, - 
TextAlignmentOptionsff. B
.ffB C

BottomLeftffC M
;ffM N$
m_frameCounter_transformgg ,
.gg, -
pivotgg- 2
=gg3 4
newgg5 8
Vector2gg9 @
(gg@ A
$numggA B
,ggB C
$numggD E
)ggE F
;ggF G$
m_frameCounter_transformhh ,
.hh, -
	anchorMinhh- 6
=hh7 8
newhh9 <
Vector2hh= D
(hhD E
$numhhE J
,hhJ K
$numhhL Q
)hhQ R
;hhR S$
m_frameCounter_transformii ,
.ii, -
	anchorMaxii- 6
=ii7 8
newii9 <
Vector2ii= D
(iiD E
$numiiE J
,iiJ K
$numiiL Q
)iiQ R
;iiR S$
m_frameCounter_transformjj ,
.jj, -
anchoredPositionjj- =
=jj> ?
newjj@ C
Vector2jjD K
(jjK L
$numjjL M
,jjM N
$numjjO P
)jjP Q
;jjQ R
breakkk 
;kk 
casell %
FpsCounterAnchorPositionsll .
.ll. /
TopRightll/ 7
:ll7 8
m_TextMeshPromm !
.mm! "
	alignmentmm" +
=mm, - 
TextAlignmentOptionsmm. B
.mmB C
TopRightmmC K
;mmK L$
m_frameCounter_transformnn ,
.nn, -
pivotnn- 2
=nn3 4
newnn5 8
Vector2nn9 @
(nn@ A
$numnnA B
,nnB C
$numnnD E
)nnE F
;nnF G$
m_frameCounter_transformoo ,
.oo, -
	anchorMinoo- 6
=oo7 8
newoo9 <
Vector2oo= D
(ooD E
$numooE J
,ooJ K
$numooL Q
)ooQ R
;ooR S$
m_frameCounter_transformpp ,
.pp, -
	anchorMaxpp- 6
=pp7 8
newpp9 <
Vector2pp= D
(ppD E
$numppE J
,ppJ K
$numppL Q
)ppQ R
;ppR S$
m_frameCounter_transformqq ,
.qq, -
anchoredPositionqq- =
=qq> ?
newqq@ C
Vector2qqD K
(qqK L
$numqqL M
,qqM N
$numqqO P
)qqP Q
;qqQ R
breakrr 
;rr 
casess %
FpsCounterAnchorPositionsss .
.ss. /
BottomRightss/ :
:ss: ;
m_TextMeshPrott !
.tt! "
	alignmenttt" +
=tt, - 
TextAlignmentOptionstt. B
.ttB C
BottomRightttC N
;ttN O$
m_frameCounter_transformuu ,
.uu, -
pivotuu- 2
=uu3 4
newuu5 8
Vector2uu9 @
(uu@ A
$numuuA B
,uuB C
$numuuD E
)uuE F
;uuF G$
m_frameCounter_transformvv ,
.vv, -
	anchorMinvv- 6
=vv7 8
newvv9 <
Vector2vv= D
(vvD E
$numvvE J
,vvJ K
$numvvL Q
)vvQ R
;vvR S$
m_frameCounter_transformww ,
.ww, -
	anchorMaxww- 6
=ww7 8
newww9 <
Vector2ww= D
(wwD E
$numwwE J
,wwJ K
$numwwL Q
)wwQ R
;wwR S$
m_frameCounter_transformxx ,
.xx, -
anchoredPositionxx- =
=xx> ?
newxx@ C
Vector2xxD K
(xxK L
$numxxL M
,xxM N
$numxxO P
)xxP Q
;xxQ R
breakyy 
;yy 
}zz 
}{{ 	
}|| 
}}} ‘
GF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\CheckBoxToggler.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
CheckBoxToggler 
: 
MonoBehaviour  -
,- . 
IPointerClickHandler/ C
{ 
public 
Toggle	 
	theToggle 
; 
public 
void	 
OnPointerClick 
( 
PointerEventData .
data/ 3
)3 4
{ 
if 
( 
	theToggle 
. 
interactable 
) 
	theToggle 
. 
isOn 
= 
! 
	theToggle 
.  
isOn  $
;$ %
} 
} 
} †±
\F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\CameraController.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
CameraController !
:" #
MonoBehaviour$ 1
{		 
public

 
enum

 
CameraModes

 
{

  !
Follow

" (
,

( )
	Isometric

* 3
,

3 4
Free

5 9
}

: ;
private 
	Transform 
cameraTransform )
;) *
private 
	Transform 
dummyTarget %
;% &
public 
	Transform 
CameraTarget %
;% &
public 
float 
FollowDistance #
=$ %
$num& +
;+ ,
public 
float 
MaxFollowDistance &
=' (
$num) /
;/ 0
public 
float 
MinFollowDistance &
=' (
$num) -
;- .
public 
float 
ElevationAngle #
=$ %
$num& +
;+ ,
public 
float 
MaxElevationAngle &
=' (
$num) .
;. /
public 
float 
MinElevationAngle &
=' (
$num) +
;+ ,
public 
float 
OrbitalAngle !
=" #
$num$ &
;& '
public 
CameraModes 

CameraMode %
=& '
CameraModes( 3
.3 4
Follow4 :
;: ;
public 
bool 
MovementSmoothing %
=& '
true( ,
;, -
public 
bool 
RotationSmoothing %
=& '
false( -
;- .
private 
bool 
previousSmoothing &
;& '
public!! 
float!! "
MovementSmoothingValue!! +
=!!, -
$num!!. 1
;!!1 2
public"" 
float"" "
RotationSmoothingValue"" +
="", -
$num"". 2
;""2 3
public$$ 
float$$ 
MoveSensitivity$$ $
=$$% &
$num$$' +
;$$+ ,
private&& 
Vector3&& 
currentVelocity&& '
=&&( )
Vector3&&* 1
.&&1 2
zero&&2 6
;&&6 7
private'' 
Vector3'' 
desiredPosition'' '
;''' (
private(( 
float(( 
mouseX(( 
;(( 
private)) 
float)) 
mouseY)) 
;)) 
private** 
Vector3** 

moveVector** "
;**" #
private++ 
float++ 

mouseWheel++  
;++  !
private11 
const11 
string11  
event_SmoothingValue11 1
=112 3
$str114 N
;11N O
private22 
const22 
string22  
event_FollowDistance22 1
=222 3
$str224 J
;22J K
void55 
Awake55 
(55 
)55 
{66 	
if77 
(77 
QualitySettings77 
.77  

vSyncCount77  *
>77+ ,
$num77- .
)77. /
Application88 
.88 
targetFrameRate88 +
=88, -
$num88. 0
;880 1
else99 
Application:: 
.:: 
targetFrameRate:: +
=::, -
-::. /
$num::/ 0
;::0 1
if<< 
(<< 
Application<< 
.<< 
platform<< $
==<<% '
RuntimePlatform<<( 7
.<<7 8
IPhonePlayer<<8 D
||<<E G
Application<<H S
.<<S T
platform<<T \
==<<] _
RuntimePlatform<<` o
.<<o p
Android<<p w
)<<w x
Input== 
.== $
simulateMouseWithTouches== .
===/ 0
false==1 6
;==6 7
cameraTransform?? 
=?? 
	transform?? '
;??' (
previousSmoothing@@ 
=@@ 
MovementSmoothing@@  1
;@@1 2
}AA 	
voidEE 
StartEE 
(EE 
)EE 
{FF 	
ifGG 
(GG 
CameraTargetGG 
==GG 
nullGG  $
)GG$ %
{HH 
dummyTargetJJ 
=JJ 
newJJ !

GameObjectJJ" ,
(JJ, -
$strJJ- <
)JJ< =
.JJ= >
	transformJJ> G
;JJG H
CameraTargetKK 
=KK 
dummyTargetKK *
;KK* +
}LL 
}MM 	
voidPP 

LateUpdatePP 
(PP 
)PP 
{QQ 	
GetPlayerInputRR 
(RR 
)RR 
;RR 
ifVV 
(VV 
CameraTargetVV 
!=VV 
nullVV  $
)VV$ %
{WW 
ifXX 
(XX 

CameraModeXX 
==XX !
CameraModesXX" -
.XX- .
	IsometricXX. 7
)XX7 8
{YY 
desiredPositionZZ #
=ZZ$ %
CameraTargetZZ& 2
.ZZ2 3
positionZZ3 ;
+ZZ< =

QuaternionZZ> H
.ZZH I
EulerZZI N
(ZZN O
ElevationAngleZZO ]
,ZZ] ^
OrbitalAngleZZ_ k
,ZZk l
$numZZm o
)ZZo p
*ZZq r
newZZs v
Vector3ZZw ~
(ZZ~ 
$num	ZZ Ä
,
ZZÄ Å
$num
ZZÇ É
,
ZZÉ Ñ
-
ZZÖ Ü
FollowDistance
ZZÜ î
)
ZZî ï
;
ZZï ñ
}[[ 
else\\ 
if\\ 
(\\ 

CameraMode\\ #
==\\$ &
CameraModes\\' 2
.\\2 3
Follow\\3 9
)\\9 :
{]] 
desiredPosition^^ #
=^^$ %
CameraTarget^^& 2
.^^2 3
position^^3 ;
+^^< =
CameraTarget^^> J
.^^J K
TransformDirection^^K ]
(^^] ^

Quaternion^^^ h
.^^h i
Euler^^i n
(^^n o
ElevationAngle^^o }
,^^} ~
OrbitalAngle	^^ ã
,
^^ã å
$num
^^ç è
)
^^è ê
*
^^ë í
(
^^ì î
new
^^î ó
Vector3
^^ò ü
(
^^ü †
$num
^^† °
,
^^° ¢
$num
^^£ §
,
^^§ •
-
^^¶ ß
FollowDistance
^^ß µ
)
^^µ ∂
)
^^∂ ∑
)
^^∑ ∏
;
^^∏ π
}__ 
else`` 
{aa 
}cc 
ifee 
(ee 
MovementSmoothingee %
==ee& (
trueee) -
)ee- .
{ff 
cameraTransformhh #
.hh# $
positionhh$ ,
=hh- .
Vector3hh/ 6
.hh6 7

SmoothDamphh7 A
(hhA B
cameraTransformhhB Q
.hhQ R
positionhhR Z
,hhZ [
desiredPositionhh\ k
,hhk l
refhhm p
currentVelocity	hhq Ä
,
hhÄ Å$
MovementSmoothingValue
hhÇ ò
*
hhô ö
Time
hhõ ü
.
hhü †
fixedDeltaTime
hh† Æ
)
hhÆ Ø
;
hhØ ∞
}jj 
elsekk 
{ll 
cameraTransformnn #
.nn# $
positionnn$ ,
=nn- .
desiredPositionnn/ >
;nn> ?
}oo 
ifqq 
(qq 
RotationSmoothingqq %
==qq& (
trueqq) -
)qq- .
cameraTransformrr #
.rr# $
rotationrr$ ,
=rr- .

Quaternionrr/ 9
.rr9 :
Lerprr: >
(rr> ?
cameraTransformrr? N
.rrN O
rotationrrO W
,rrW X

QuaternionrrY c
.rrc d
LookRotationrrd p
(rrp q
CameraTargetrrq }
.rr} ~
position	rr~ Ü
-
rrá à
cameraTransform
rrâ ò
.
rrò ô
position
rrô °
)
rr° ¢
,
rr¢ £$
RotationSmoothingValue
rr§ ∫
*
rrª º
Time
rrΩ ¡
.
rr¡ ¬
	deltaTime
rr¬ À
)
rrÀ Ã
;
rrÃ Õ
elsess 
{tt 
cameraTransformuu #
.uu# $
LookAtuu$ *
(uu* +
CameraTargetuu+ 7
)uu7 8
;uu8 9
}vv 
}xx 
}zz 	
void~~ 
GetPlayerInput~~ 
(~~ 
)~~ 
{ 	

moveVector
ÄÄ 
=
ÄÄ 
Vector3
ÄÄ  
.
ÄÄ  !
zero
ÄÄ! %
;
ÄÄ% &

mouseWheel
ÉÉ 
=
ÉÉ 
Input
ÉÉ 
.
ÉÉ 
GetAxis
ÉÉ &
(
ÉÉ& '
$str
ÉÉ' :
)
ÉÉ: ;
;
ÉÉ; <
float
ÖÖ 

touchCount
ÖÖ 
=
ÖÖ 
Input
ÖÖ $
.
ÖÖ$ %

touchCount
ÖÖ% /
;
ÖÖ/ 0
if
áá 
(
áá 
Input
áá 
.
áá 
GetKey
áá 
(
áá 
KeyCode
áá $
.
áá$ %
	LeftShift
áá% .
)
áá. /
||
áá0 2
Input
áá3 8
.
áá8 9
GetKey
áá9 ?
(
áá? @
KeyCode
áá@ G
.
ááG H

RightShift
ááH R
)
ááR S
||
ááT V

touchCount
ááW a
>
ááb c
$num
áád e
)
ááe f
{
àà 

mouseWheel
ââ 
*=
ââ 
$num
ââ  
;
ââ  !
if
ãã 
(
ãã 
Input
ãã 
.
ãã 

GetKeyDown
ãã $
(
ãã$ %
KeyCode
ãã% ,
.
ãã, -
I
ãã- .
)
ãã. /
)
ãã/ 0

CameraMode
åå 
=
åå  
CameraModes
åå! ,
.
åå, -
	Isometric
åå- 6
;
åå6 7
if
éé 
(
éé 
Input
éé 
.
éé 

GetKeyDown
éé $
(
éé$ %
KeyCode
éé% ,
.
éé, -
F
éé- .
)
éé. /
)
éé/ 0

CameraMode
èè 
=
èè  
CameraModes
èè! ,
.
èè, -
Follow
èè- 3
;
èè3 4
if
ëë 
(
ëë 
Input
ëë 
.
ëë 

GetKeyDown
ëë $
(
ëë$ %
KeyCode
ëë% ,
.
ëë, -
S
ëë- .
)
ëë. /
)
ëë/ 0
MovementSmoothing
íí %
=
íí& '
!
íí( )
MovementSmoothing
íí) :
;
íí: ;
if
ññ 
(
ññ 
Input
ññ 
.
ññ 
GetMouseButton
ññ (
(
ññ( )
$num
ññ) *
)
ññ* +
)
ññ+ ,
{
óó 
mouseY
òò 
=
òò 
Input
òò "
.
òò" #
GetAxis
òò# *
(
òò* +
$str
òò+ 4
)
òò4 5
;
òò5 6
mouseX
ôô 
=
ôô 
Input
ôô "
.
ôô" #
GetAxis
ôô# *
(
ôô* +
$str
ôô+ 4
)
ôô4 5
;
ôô5 6
if
õõ 
(
õõ 
mouseY
õõ 
>
õõ  
$num
õõ! &
||
õõ' )
mouseY
õõ* 0
<
õõ1 2
-
õõ3 4
$num
õõ4 9
)
õõ9 :
{
úú 
ElevationAngle
ùù &
-=
ùù' )
mouseY
ùù* 0
*
ùù1 2
MoveSensitivity
ùù3 B
;
ùùB C
ElevationAngle
üü &
=
üü' (
Mathf
üü) .
.
üü. /
Clamp
üü/ 4
(
üü4 5
ElevationAngle
üü5 C
,
üüC D
MinElevationAngle
üüE V
,
üüV W
MaxElevationAngle
üüX i
)
üüi j
;
üüj k
}
†† 
if
¢¢ 
(
¢¢ 
mouseX
¢¢ 
>
¢¢  
$num
¢¢! &
||
¢¢' )
mouseX
¢¢* 0
<
¢¢1 2
-
¢¢3 4
$num
¢¢4 9
)
¢¢9 :
{
££ 
OrbitalAngle
§§ $
+=
§§% '
mouseX
§§( .
*
§§/ 0
MoveSensitivity
§§1 @
;
§§@ A
if
•• 
(
•• 
OrbitalAngle
•• (
>
••) *
$num
••+ .
)
••. /
OrbitalAngle
¶¶ (
-=
¶¶) +
$num
¶¶, /
;
¶¶/ 0
if
ßß 
(
ßß 
OrbitalAngle
ßß (
<
ßß) *
$num
ßß+ ,
)
ßß, -
OrbitalAngle
®® (
+=
®®) +
$num
®®, /
;
®®/ 0
}
©© 
}
™™ 
if
≠≠ 
(
≠≠ 

touchCount
≠≠ 
==
≠≠ !
$num
≠≠" #
&&
≠≠$ &
Input
≠≠' ,
.
≠≠, -
GetTouch
≠≠- 5
(
≠≠5 6
$num
≠≠6 7
)
≠≠7 8
.
≠≠8 9
phase
≠≠9 >
==
≠≠? A

TouchPhase
≠≠B L
.
≠≠L M
Moved
≠≠M R
)
≠≠R S
{
ÆÆ 
Vector2
ØØ 
deltaPosition
ØØ )
=
ØØ* +
Input
ØØ, 1
.
ØØ1 2
GetTouch
ØØ2 :
(
ØØ: ;
$num
ØØ; <
)
ØØ< =
.
ØØ= >
deltaPosition
ØØ> K
;
ØØK L
if
≤≤ 
(
≤≤ 
deltaPosition
≤≤ %
.
≤≤% &
y
≤≤& '
>
≤≤( )
$num
≤≤* /
||
≤≤0 2
deltaPosition
≤≤3 @
.
≤≤@ A
y
≤≤A B
<
≤≤C D
-
≤≤E F
$num
≤≤F K
)
≤≤K L
{
≥≥ 
ElevationAngle
¥¥ &
-=
¥¥' )
deltaPosition
¥¥* 7
.
¥¥7 8
y
¥¥8 9
*
¥¥: ;
$num
¥¥< @
;
¥¥@ A
ElevationAngle
∂∂ &
=
∂∂' (
Mathf
∂∂) .
.
∂∂. /
Clamp
∂∂/ 4
(
∂∂4 5
ElevationAngle
∂∂5 C
,
∂∂C D
MinElevationAngle
∂∂E V
,
∂∂V W
MaxElevationAngle
∂∂X i
)
∂∂i j
;
∂∂j k
}
∑∑ 
if
ªª 
(
ªª 
deltaPosition
ªª %
.
ªª% &
x
ªª& '
>
ªª( )
$num
ªª* /
||
ªª0 2
deltaPosition
ªª3 @
.
ªª@ A
x
ªªA B
<
ªªC D
-
ªªE F
$num
ªªF K
)
ªªK L
{
ºº 
OrbitalAngle
ΩΩ $
+=
ΩΩ% '
deltaPosition
ΩΩ( 5
.
ΩΩ5 6
x
ΩΩ6 7
*
ΩΩ8 9
$num
ΩΩ: >
;
ΩΩ> ?
if
ææ 
(
ææ 
OrbitalAngle
ææ (
>
ææ) *
$num
ææ+ .
)
ææ. /
OrbitalAngle
øø (
-=
øø) +
$num
øø, /
;
øø/ 0
if
¿¿ 
(
¿¿ 
OrbitalAngle
¿¿ (
<
¿¿) *
$num
¿¿+ ,
)
¿¿, -
OrbitalAngle
¡¡ (
+=
¡¡) +
$num
¡¡, /
;
¡¡/ 0
}
¬¬ 
}
ƒƒ 
if
«« 
(
«« 
Input
«« 
.
«« 
GetMouseButton
«« (
(
««( )
$num
««) *
)
««* +
)
««+ ,
{
»» 
Ray
…… 
ray
…… 
=
…… 
Camera
…… $
.
……$ %
main
……% )
.
……) *
ScreenPointToRay
……* :
(
……: ;
Input
……; @
.
……@ A
mousePosition
……A N
)
……N O
;
……O P

RaycastHit
   
hit
   "
;
  " #
if
ÃÃ 
(
ÃÃ 
Physics
ÃÃ 
.
ÃÃ  
Raycast
ÃÃ  '
(
ÃÃ' (
ray
ÃÃ( +
,
ÃÃ+ ,
out
ÃÃ- 0
hit
ÃÃ1 4
,
ÃÃ4 5
$num
ÃÃ6 9
,
ÃÃ9 :
$num
ÃÃ; <
<<
ÃÃ= ?
$num
ÃÃ@ B
|
ÃÃC D
$num
ÃÃE F
<<
ÃÃG I
$num
ÃÃJ L
|
ÃÃM N
$num
ÃÃO P
<<
ÃÃQ S
$num
ÃÃT V
|
ÃÃW X
$num
ÃÃY Z
<<
ÃÃ[ ]
$num
ÃÃ^ `
)
ÃÃ` a
)
ÃÃa b
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 
hit
ŒŒ 
.
ŒŒ  
	transform
ŒŒ  )
==
ŒŒ* ,
CameraTarget
ŒŒ- 9
)
ŒŒ9 :
{
œœ 
OrbitalAngle
—— (
=
——) *
$num
——+ ,
;
——, -
}
““ 
else
”” 
{
‘‘ 
CameraTarget
’’ (
=
’’) *
hit
’’+ .
.
’’. /
	transform
’’/ 8
;
’’8 9
OrbitalAngle
÷÷ (
=
÷÷) *
$num
÷÷+ ,
;
÷÷, -
MovementSmoothing
◊◊ -
=
◊◊. /
previousSmoothing
◊◊0 A
;
◊◊A B
}
ÿÿ 
}
⁄⁄ 
}
€€ 
if
ﬁﬁ 
(
ﬁﬁ 
Input
ﬁﬁ 
.
ﬁﬁ 
GetMouseButton
ﬁﬁ (
(
ﬁﬁ( )
$num
ﬁﬁ) *
)
ﬁﬁ* +
)
ﬁﬁ+ ,
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
dummyTarget
‡‡ #
==
‡‡$ &
null
‡‡' +
)
‡‡+ ,
{
·· 
dummyTarget
„„ #
=
„„$ %
new
„„& )

GameObject
„„* 4
(
„„4 5
$str
„„5 D
)
„„D E
.
„„E F
	transform
„„F O
;
„„O P
dummyTarget
‰‰ #
.
‰‰# $
position
‰‰$ ,
=
‰‰- .
CameraTarget
‰‰/ ;
.
‰‰; <
position
‰‰< D
;
‰‰D E
dummyTarget
ÂÂ #
.
ÂÂ# $
rotation
ÂÂ$ ,
=
ÂÂ- .
CameraTarget
ÂÂ/ ;
.
ÂÂ; <
rotation
ÂÂ< D
;
ÂÂD E
CameraTarget
ÊÊ $
=
ÊÊ% &
dummyTarget
ÊÊ' 2
;
ÊÊ2 3
previousSmoothing
ÁÁ )
=
ÁÁ* +
MovementSmoothing
ÁÁ, =
;
ÁÁ= >
MovementSmoothing
ËË )
=
ËË* +
false
ËË, 1
;
ËË1 2
}
ÈÈ 
else
ÍÍ 
if
ÍÍ 
(
ÍÍ 
dummyTarget
ÍÍ (
!=
ÍÍ) +
CameraTarget
ÍÍ, 8
)
ÍÍ8 9
{
ÎÎ 
dummyTarget
ÌÌ #
.
ÌÌ# $
position
ÌÌ$ ,
=
ÌÌ- .
CameraTarget
ÌÌ/ ;
.
ÌÌ; <
position
ÌÌ< D
;
ÌÌD E
dummyTarget
ÓÓ #
.
ÓÓ# $
rotation
ÓÓ$ ,
=
ÓÓ- .
CameraTarget
ÓÓ/ ;
.
ÓÓ; <
rotation
ÓÓ< D
;
ÓÓD E
CameraTarget
ÔÔ $
=
ÔÔ% &
dummyTarget
ÔÔ' 2
;
ÔÔ2 3
previousSmoothing
 )
=
* +
MovementSmoothing
, =
;
= >
MovementSmoothing
ÒÒ )
=
ÒÒ* +
false
ÒÒ, 1
;
ÒÒ1 2
}
ÚÚ 
mouseY
ıı 
=
ıı 
Input
ıı "
.
ıı" #
GetAxis
ıı# *
(
ıı* +
$str
ıı+ 4
)
ıı4 5
;
ıı5 6
mouseX
ˆˆ 
=
ˆˆ 
Input
ˆˆ "
.
ˆˆ" #
GetAxis
ˆˆ# *
(
ˆˆ* +
$str
ˆˆ+ 4
)
ˆˆ4 5
;
ˆˆ5 6

moveVector
¯¯ 
=
¯¯  
cameraTransform
¯¯! 0
.
¯¯0 1 
TransformDirection
¯¯1 C
(
¯¯C D
mouseX
¯¯D J
,
¯¯J K
mouseY
¯¯L R
,
¯¯R S
$num
¯¯T U
)
¯¯U V
;
¯¯V W
dummyTarget
˙˙ 
.
˙˙  
	Translate
˙˙  )
(
˙˙) *
-
˙˙* +

moveVector
˙˙+ 5
,
˙˙5 6
Space
˙˙7 <
.
˙˙< =
World
˙˙= B
)
˙˙B C
;
˙˙C D
}
¸¸ 
}
˛˛ 
if
ÅÅ 
(
ÅÅ 

touchCount
ÅÅ 
==
ÅÅ 
$num
ÅÅ 
)
ÅÅ  
{
ÇÇ 
Touch
ÉÉ 
touch0
ÉÉ 
=
ÉÉ 
Input
ÉÉ $
.
ÉÉ$ %
GetTouch
ÉÉ% -
(
ÉÉ- .
$num
ÉÉ. /
)
ÉÉ/ 0
;
ÉÉ0 1
Touch
ÑÑ 
touch1
ÑÑ 
=
ÑÑ 
Input
ÑÑ $
.
ÑÑ$ %
GetTouch
ÑÑ% -
(
ÑÑ- .
$num
ÑÑ. /
)
ÑÑ/ 0
;
ÑÑ0 1
Vector2
ÜÜ 
touch0PrevPos
ÜÜ %
=
ÜÜ& '
touch0
ÜÜ( .
.
ÜÜ. /
position
ÜÜ/ 7
-
ÜÜ8 9
touch0
ÜÜ: @
.
ÜÜ@ A
deltaPosition
ÜÜA N
;
ÜÜN O
Vector2
áá 
touch1PrevPos
áá %
=
áá& '
touch1
áá( .
.
áá. /
position
áá/ 7
-
áá8 9
touch1
áá: @
.
áá@ A
deltaPosition
ááA N
;
ááN O
float
ââ 
prevTouchDelta
ââ $
=
ââ% &
(
ââ' (
touch0PrevPos
ââ( 5
-
ââ6 7
touch1PrevPos
ââ8 E
)
ââE F
.
ââF G
	magnitude
ââG P
;
ââP Q
float
ää 

touchDelta
ää  
=
ää! "
(
ää# $
touch0
ää$ *
.
ää* +
position
ää+ 3
-
ää4 5
touch1
ää6 <
.
ää< =
position
ää= E
)
ääE F
.
ääF G
	magnitude
ääG P
;
ääP Q
float
åå 
	zoomDelta
åå 
=
åå  !
prevTouchDelta
åå" 0
-
åå1 2

touchDelta
åå3 =
;
åå= >
if
éé 
(
éé 
	zoomDelta
éé 
>
éé 
$num
éé  %
||
éé& (
	zoomDelta
éé) 2
<
éé3 4
-
éé5 6
$num
éé6 ;
)
éé; <
{
èè 
FollowDistance
êê "
+=
êê# %
	zoomDelta
êê& /
*
êê0 1
$num
êê2 7
;
êê7 8
FollowDistance
íí "
=
íí# $
Mathf
íí% *
.
íí* +
Clamp
íí+ 0
(
íí0 1
FollowDistance
íí1 ?
,
íí? @
MinFollowDistance
ííA R
,
ííR S
MaxFollowDistance
ííT e
)
ííe f
;
ííf g
}
ìì 
}
ññ 
if
ôô 
(
ôô 

mouseWheel
ôô 
<
ôô 
-
ôô 
$num
ôô #
||
ôô$ &

mouseWheel
ôô' 1
>
ôô2 3
$num
ôô4 9
)
ôô9 :
{
öö 
FollowDistance
úú 
-=
úú !

mouseWheel
úú" ,
*
úú- .
$num
úú/ 3
;
úú3 4
FollowDistance
ûû 
=
ûû  
Mathf
ûû! &
.
ûû& '
Clamp
ûû' ,
(
ûû, -
FollowDistance
ûû- ;
,
ûû; <
MinFollowDistance
ûû= N
,
ûûN O
MaxFollowDistance
ûûP a
)
ûûa b
;
ûûb c
}
üü 
}
¢¢ 	
}
££ 
}§§ Ö
AF:\Github\CS 230\unityProj\Assets\Scenes\Scripts\ScoringManage.cs
public 
class 
ScoringManage 
: 
MonoBehaviour *
{ 
public 

Text 

pointsText 
; 
public		 

static		 
ScoringManage		 
instance		  (
;		( )
void 
Start	 
( 
) 
{ 
int 
Score 
= 
$num 
; 
QuizManager 
point 
= 

GameObject &
.& '
Find' +
(+ ,
$str, 8
)8 9
.9 :
GetComponent: F
<F G
QuizManagerG R
>R S
(S T
)T U
;U V
Score 
board 
= 

GameObject  
.  !
Find! %
(% &
$str& 2
)2 3
.3 4
GetComponent4 @
<@ A
ScoreA F
>F G
(G H
)H I
;I J
	GetPoints 
( 
point 
) 
; 
} 
public 

void 
	AddPoints 
( 
) 
{ 
Score 
. 

totalScore 
+= 
$num 
; 
} 
public 

void 
	GetPoints 
( 
QuizManager %
point& +
)+ ,
{, -
string 
result 
= 
point 
. 

getCorrect (
(( )
)) *
.* +
ToString+ 3
(3 4
)4 5
+6 7
$str8 =
+> ?
(@ A
pointA F
.F G
getIncorrectG S
(S T
)T U
+V W
pointX ]
.] ^

getCorrect^ h
(h i
)i j
)j k
.k l
ToStringl t
(t u
)u v
;v w

pointsText 
. 
text 
= 
result  
;  !
} 
} Î3
dF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMPro_InstructionOverlay.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class $
TMPro_InstructionOverlay )
:* +
MonoBehaviour, 9
{		 
public 
enum %
FpsCounterAnchorPositions -
{. /
TopLeft0 7
,7 8

BottomLeft9 C
,C D
TopRightE M
,M N
BottomRightO Z
}[ \
;\ ]
public %
FpsCounterAnchorPositions (
AnchorPosition) 7
=8 9%
FpsCounterAnchorPositions: S
.S T

BottomLeftT ^
;^ _
private 
const 
string 
instructions )
=* +
$str, y
;y z
private 
TextMeshPro 
m_TextMeshPro )
;) *
private 
TextContainer 
m_textContainer -
;- .
private 
	Transform $
m_frameCounter_transform 2
;2 3
private 
Camera 
m_camera 
;  
void 
Awake 
( 
) 
{ 	
if 
( 
! 
enabled 
) 
return 
; 
m_camera 
= 
Camera 
. 
main "
;" #

GameObject 
frameCounter #
=$ %
new& )

GameObject* 4
(4 5
$str5 D
)D E
;E F$
m_frameCounter_transform   $
=  % &
frameCounter  ' 3
.  3 4
	transform  4 =
;  = >$
m_frameCounter_transform!! $
.!!$ %
parent!!% +
=!!, -
m_camera!!. 6
.!!6 7
	transform!!7 @
;!!@ A$
m_frameCounter_transform"" $
.""$ %
localRotation""% 2
=""3 4

Quaternion""5 ?
.""? @
identity""@ H
;""H I
m_TextMeshPro%% 
=%% 
frameCounter%% (
.%%( )
AddComponent%%) 5
<%%5 6
TextMeshPro%%6 A
>%%A B
(%%B C
)%%C D
;%%D E
m_TextMeshPro&& 
.&& 
font&& 
=&&  
	Resources&&! *
.&&* +
Load&&+ /
<&&/ 0
TMP_FontAsset&&0 =
>&&= >
(&&> ?
$str&&? e
)&&e f
;&&f g
m_TextMeshPro'' 
.'' 
fontSharedMaterial'' ,
=''- .
	Resources''/ 8
.''8 9
Load''9 =
<''= >
Material''> F
>''F G
(''G H
$str''H x
)''x y
;''y z
m_TextMeshPro)) 
.)) 
fontSize)) "
=))# $
$num))% '
;))' (
m_TextMeshPro++ 
.++ 
	isOverlay++ #
=++$ %
true++& *
;++* +
m_textContainer,, 
=,, 
frameCounter,, *
.,,* +
GetComponent,,+ 7
<,,7 8
TextContainer,,8 E
>,,E F
(,,F G
),,G H
;,,H I%
Set_FrameCounter_Position.. %
(..% &
AnchorPosition..& 4
)..4 5
;..5 6
m_TextMeshPro11 
.11 
text11 
=11  
instructions11! -
;11- .
}33 	
void88 %
Set_FrameCounter_Position88 &
(88& '%
FpsCounterAnchorPositions88' @
anchor_position88A P
)88P Q
{99 	
switch;; 
(;; 
anchor_position;; #
);;# $
{<< 
case== %
FpsCounterAnchorPositions== .
.==. /
TopLeft==/ 6
:==6 7
m_textContainer?? #
.??# $
anchorPosition??$ 2
=??3 4 
TextContainerAnchors??5 I
.??I J
TopLeft??J Q
;??Q R$
m_frameCounter_transform@@ ,
.@@, -
position@@- 5
=@@6 7
m_camera@@8 @
.@@@ A 
ViewportToWorldPoint@@A U
(@@U V
new@@V Y
Vector3@@Z a
(@@a b
$num@@b c
,@@c d
$num@@e f
,@@f g
$num@@h n
)@@n o
)@@o p
;@@p q
breakAA 
;AA 
caseBB %
FpsCounterAnchorPositionsBB .
.BB. /

BottomLeftBB/ 9
:BB9 :
m_textContainerDD #
.DD# $
anchorPositionDD$ 2
=DD3 4 
TextContainerAnchorsDD5 I
.DDI J

BottomLeftDDJ T
;DDT U$
m_frameCounter_transformEE ,
.EE, -
positionEE- 5
=EE6 7
m_cameraEE8 @
.EE@ A 
ViewportToWorldPointEEA U
(EEU V
newEEV Y
Vector3EEZ a
(EEa b
$numEEb c
,EEc d
$numEEe f
,EEf g
$numEEh n
)EEn o
)EEo p
;EEp q
breakFF 
;FF 
caseGG %
FpsCounterAnchorPositionsGG .
.GG. /
TopRightGG/ 7
:GG7 8
m_textContainerII #
.II# $
anchorPositionII$ 2
=II3 4 
TextContainerAnchorsII5 I
.III J
TopRightIIJ R
;IIR S$
m_frameCounter_transformJJ ,
.JJ, -
positionJJ- 5
=JJ6 7
m_cameraJJ8 @
.JJ@ A 
ViewportToWorldPointJJA U
(JJU V
newJJV Y
Vector3JJZ a
(JJa b
$numJJb c
,JJc d
$numJJe f
,JJf g
$numJJh n
)JJn o
)JJo p
;JJp q
breakKK 
;KK 
caseLL %
FpsCounterAnchorPositionsLL .
.LL. /
BottomRightLL/ :
:LL: ;
m_textContainerNN #
.NN# $
anchorPositionNN$ 2
=NN3 4 
TextContainerAnchorsNN5 I
.NNI J
BottomRightNNJ U
;NNU V$
m_frameCounter_transformOO ,
.OO, -
positionOO- 5
=OO6 7
m_cameraOO8 @
.OO@ A 
ViewportToWorldPointOOA U
(OOU V
newOOV Y
Vector3OOZ a
(OOa b
$numOOb c
,OOc d
$numOOe f
,OOf g
$numOOh n
)OOn o
)OOo p
;OOp q
breakPP 
;PP 
}QQ 
}RR 	
}SS 
}TT ﬂ
`F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_ExampleScript_01.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public

 

class

  
TMP_ExampleScript_01

 %
:

& '
MonoBehaviour

( 5
{ 
public 
enum 

objectType 
{  
TextMeshPro! ,
=- .
$num/ 0
,0 1
TextMeshProUGUI2 A
=B C
$numD E
}F G
;G H
public 

objectType 

ObjectType $
;$ %
public 
bool 
isStatic 
; 
private 
TMP_Text 
m_text 
;  
private 
const 
string 
k_label $
=% &
$str' J
;J K
private 
int 
count 
; 
void 
Awake 
( 
) 
{ 	
if 
( 

ObjectType 
== 
$num 
)  
m_text 
= 
GetComponent %
<% &
TextMeshPro& 1
>1 2
(2 3
)3 4
??5 7

gameObject8 B
.B C
AddComponentC O
<O P
TextMeshProP [
>[ \
(\ ]
)] ^
;^ _
else 
m_text   
=   
GetComponent   %
<  % &
TextMeshProUGUI  & 5
>  5 6
(  6 7
)  7 8
??  9 ;

gameObject  < F
.  F G
AddComponent  G S
<  S T
TextMeshProUGUI  T c
>  c d
(  d e
)  e f
;  f g
m_text## 
.## 
font## 
=## 
	Resources## #
.### $
Load##$ (
<##( )
TMP_FontAsset##) 6
>##6 7
(##7 8
$str##8 U
)##U V
;##V W
m_text&& 
.&& 
fontSharedMaterial&& %
=&&& '
	Resources&&( 1
.&&1 2
Load&&2 6
<&&6 7
Material&&7 ?
>&&? @
(&&@ A
$str&&A l
)&&l m
;&&m n
m_text)) 
.)) 
fontSize)) 
=)) 
$num)) !
;))! "
m_text,, 
.,, 
text,, 
=,, 
$str,, C
;,,C D
Vector2// 
size// 
=// 
m_text// !
.//! "
GetPreferredValues//" 4
(//4 5
Mathf//5 :
.//: ;
Infinity//; C
,//C D
Mathf//E J
.//J K
Infinity//K S
)//S T
;//T U
m_text22 
.22 
rectTransform22  
.22  !
	sizeDelta22! *
=22+ ,
new22- 0
Vector2221 8
(228 9
size229 =
.22= >
x22> ?
,22? @
size22A E
.22E F
y22F G
)22G H
;22H I
}33 	
void66 
Update66 
(66 
)66 
{77 	
if88 
(88 
!88 
isStatic88 
)88 
{99 
m_text:: 
.:: 
SetText:: 
(:: 
k_label:: &
,::& '
count::( -
%::. /
$num::0 4
)::4 5
;::5 6
count;; 
+=;; 
$num;; 
;;; 
}<< 
}== 	
}?? 
}@@ ï1
`F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TextConsoleSimulator.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class  
TextConsoleSimulator %
:& '
MonoBehaviour( 5
{ 
private		 
TMP_Text		 
m_TextComponent		 (
;		( )
private

 
bool

 
hasTextChanged

 #
;

# $
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 

gameObject (
.( )
GetComponent) 5
<5 6
TMP_Text6 >
>> ?
(? @
)@ A
;A B
} 	
void 
Start 
( 
) 
{ 	
StartCoroutine 
( 
RevealCharacters +
(+ ,
m_TextComponent, ;
); <
)< =
;= >
} 	
void 
OnEnable 
( 
) 
{ 	
TMPro_EventManager 
. 
TEXT_CHANGED_EVENT 1
.1 2
Add2 5
(5 6
ON_TEXT_CHANGED6 E
)E F
;F G
} 	
void 
	OnDisable 
( 
) 
{   	
TMPro_EventManager!! 
.!! 
TEXT_CHANGED_EVENT!! 1
.!!1 2
Remove!!2 8
(!!8 9
ON_TEXT_CHANGED!!9 H
)!!H I
;!!I J
}"" 	
void&& 
ON_TEXT_CHANGED&& 
(&& 
Object&& #
obj&&$ '
)&&' (
{'' 	
hasTextChanged(( 
=(( 
true(( !
;((! "
})) 	
IEnumerator00 
RevealCharacters00 $
(00$ %
TMP_Text00% -
textComponent00. ;
)00; <
{11 	
textComponent22 
.22 
ForceMeshUpdate22 )
(22) *
)22* +
;22+ ,
TMP_TextInfo44 
textInfo44 !
=44" #
textComponent44$ 1
.441 2
textInfo442 :
;44: ;
int66 "
totalVisibleCharacters66 &
=66' (
textInfo66) 1
.661 2
characterCount662 @
;66@ A
int77 
visibleCount77 
=77 
$num77  
;77  !
while99 
(99 
true99 
)99 
{:: 
if;; 
(;; 
hasTextChanged;; "
);;" #
{<< "
totalVisibleCharacters== *
===+ ,
textInfo==- 5
.==5 6
characterCount==6 D
;==D E
hasTextChanged>> "
=>># $
false>>% *
;>>* +
}?? 
ifAA 
(AA 
visibleCountAA  
>AA! ""
totalVisibleCharactersAA# 9
)AA9 :
{BB 
yieldCC 
returnCC  
newCC! $
WaitForSecondsCC% 3
(CC3 4
$numCC4 8
)CC8 9
;CC9 :
visibleCountDD  
=DD! "
$numDD# $
;DD$ %
}EE 
textComponentGG 
.GG  
maxVisibleCharactersGG 2
=GG3 4
visibleCountGG5 A
;GGA B
visibleCountII 
+=II 
$numII  !
;II! "
yieldKK 
returnKK 
nullKK !
;KK! "
}LL 
}MM 	
IEnumeratorTT 
RevealWordsTT 
(TT  
TMP_TextTT  (
textComponentTT) 6
)TT6 7
{UU 	
textComponentVV 
.VV 
ForceMeshUpdateVV )
(VV) *
)VV* +
;VV+ ,
intXX 
totalWordCountXX 
=XX  
textComponentXX! .
.XX. /
textInfoXX/ 7
.XX7 8
	wordCountXX8 A
;XXA B
intYY "
totalVisibleCharactersYY &
=YY' (
textComponentYY) 6
.YY6 7
textInfoYY7 ?
.YY? @
characterCountYY@ N
;YYN O
intZZ 
counterZZ 
=ZZ 
$numZZ 
;ZZ 
int[[ 
currentWord[[ 
=[[ 
$num[[ 
;[[  
int\\ 
visibleCount\\ 
=\\ 
$num\\  
;\\  !
while^^ 
(^^ 
true^^ 
)^^ 
{__ 
currentWord`` 
=`` 
counter`` %
%``& '
(``( )
totalWordCount``) 7
+``8 9
$num``: ;
)``; <
;``< =
ifcc 
(cc 
currentWordcc 
==cc  "
$numcc# $
)cc$ %
visibleCountdd  
=dd! "
$numdd# $
;dd$ %
elseee 
ifee 
(ee 
currentWordee $
<ee% &
totalWordCountee' 5
)ee5 6
visibleCountff  
=ff! "
textComponentff# 0
.ff0 1
textInfoff1 9
.ff9 :
wordInfoff: B
[ffB C
currentWordffC N
-ffO P
$numffQ R
]ffR S
.ffS T
lastCharacterIndexffT f
+ffg h
$numffi j
;ffj k
elsegg 
ifgg 
(gg 
currentWordgg $
==gg% '
totalWordCountgg( 6
)gg6 7
visibleCounthh  
=hh! ""
totalVisibleCharactershh# 9
;hh9 :
textComponentjj 
.jj  
maxVisibleCharactersjj 2
=jj3 4
visibleCountjj5 A
;jjA B
ifmm 
(mm 
visibleCountmm  
>=mm! #"
totalVisibleCharactersmm$ :
)mm: ;
{nn 
yieldoo 
returnoo  
newoo! $
WaitForSecondsoo% 3
(oo3 4
$numoo4 8
)oo8 9
;oo9 :
}pp 
counterrr 
+=rr 
$numrr 
;rr 
yieldtt 
returntt 
newtt  
WaitForSecondstt! /
(tt/ 0
$numtt0 4
)tt4 5
;tt5 6
}uu 
}vv 	
}xx 
}yy Ÿ%
VF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\ObjectSpin.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 

ObjectSpin 
: 
MonoBehaviour +
{		 
public 
float 
	SpinSpeed 
=  
$num! "
;" #
public 
int 
RotationRange  
=! "
$num# %
;% &
private 
	Transform 
m_transform %
;% &
private 
float 
m_time 
; 
private 
Vector3 
	m_prevPOS !
;! "
private 
Vector3 
m_initial_Rotation *
;* +
private 
Vector3 
m_initial_Position *
;* +
private 
Color32 
m_lightColor $
;$ %
private 
int 
frames 
= 
$num 
; 
public 
enum 

MotionType 
{  
Rotation! )
,) *
BackAndForth+ 7
,7 8
Translation9 D
}E F
;F G
public 

MotionType 
Motion  
;  !
void 
Awake 
( 
) 
{ 	
m_transform 
= 
	transform #
;# $
m_initial_Rotation 
=  
m_transform! ,
., -
rotation- 5
.5 6
eulerAngles6 A
;A B
m_initial_Position 
=  
m_transform! ,
., -
position- 5
;5 6
Light!! 
light!! 
=!! 
GetComponent!! &
<!!& '
Light!!' ,
>!!, -
(!!- .
)!!. /
;!!/ 0
m_lightColor"" 
="" 
light""  
!=""! #
null""$ (
?"") *
light""+ 0
.""0 1
color""1 6
:""7 8
Color""9 >
.""> ?
black""? D
;""D E
}## 	
void'' 
Update'' 
('' 
)'' 
{(( 	
if)) 
()) 
Motion)) 
==)) 

MotionType)) $
.))$ %
Rotation))% -
)))- .
{** 
m_transform++ 
.++ 
Rotate++ "
(++" #
$num++# $
,++$ %
	SpinSpeed++& /
*++0 1
Time++2 6
.++6 7
	deltaTime++7 @
,++@ A
$num++B C
)++C D
;++D E
},, 
else-- 
if-- 
(-- 
Motion-- 
==-- 

MotionType-- )
.--) *
BackAndForth--* 6
)--6 7
{.. 
m_time// 
+=// 
	SpinSpeed// #
*//$ %
Time//& *
.//* +
	deltaTime//+ 4
;//4 5
m_transform00 
.00 
rotation00 $
=00% &

Quaternion00' 1
.001 2
Euler002 7
(007 8
m_initial_Rotation008 J
.00J K
x00K L
,00L M
Mathf00N S
.00S T
Sin00T W
(00W X
m_time00X ^
)00^ _
*00` a
RotationRange00b o
+00p q
m_initial_Rotation	00r Ñ
.
00Ñ Ö
y
00Ö Ü
,
00Ü á 
m_initial_Rotation
00à ö
.
00ö õ
z
00õ ú
)
00ú ù
;
00ù û
}11 
else22 
{33 
m_time44 
+=44 
	SpinSpeed44 #
*44$ %
Time44& *
.44* +
	deltaTime44+ 4
;444 5
float66 
x66 
=66 
$num66 
*66 
Mathf66 $
.66$ %
Cos66% (
(66( )
m_time66) /
*660 1
$num662 6
)666 7
;667 8
float77 
y77 
=77 
$num77 
;77 
float88 
z88 
=88 
$num88 
;88 
m_transform:: 
.:: 
position:: $
=::% &
m_initial_Position::' 9
+::: ;
new::< ?
Vector3::@ G
(::G H
x::H I
,::I J
z::K L
,::L M
y::N O
)::O P
;::P Q
	m_prevPOS@@ 
=@@ 
m_transform@@ '
.@@' (
position@@( 0
;@@0 1
framesAA 
+=AA 
$numAA 
;AA 
}BB 
}CC 	
}DD 
}EE ∞Ò
aF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_TextInfoDebugTool.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public

 

class

 !
TMP_TextInfoDebugTool

 &
:

' (
MonoBehaviour

) 6
{ 
public 
bool 
ShowCharacters "
;" #
public 
bool 
	ShowWords 
; 
public 
bool 
	ShowLinks 
; 
public 
bool 
	ShowLines 
; 
public 
bool 
ShowMeshBounds "
;" #
public 
bool 
ShowTextBounds "
;" #
[ 	
Space	 
( 
$num 
) 
] 
[ 	
TextArea	 
( 
$num 
, 
$num 
) 
] 
public 
string 
ObjectStats !
;! "
[ 	
SerializeField	 
] 
private 
TMP_Text 
m_TextComponent (
;( )
private 
	Transform 
m_Transform %
;% &
private 
TMP_TextInfo 

m_TextInfo '
;' (
private 
float 
m_ScaleMultiplier '
;' (
private   
float   
m_HandleSize   "
;  " #
void## 
OnDrawGizmos## 
(## 
)## 
{$$ 	
if%% 
(%% 
m_TextComponent%% 
==%%  "
null%%# '
)%%' (
{&& 
m_TextComponent'' 
=''  !
GetComponent''" .
<''. /
TMP_Text''/ 7
>''7 8
(''8 9
)''9 :
;'': ;
if)) 
()) 
m_TextComponent)) #
==))$ &
null))' +
)))+ ,
return** 
;** 
}++ 
m_Transform-- 
=-- 
m_TextComponent-- )
.--) *
	transform--* 3
;--3 4

m_TextInfo00 
=00 
m_TextComponent00 (
.00( )
textInfo00) 1
;001 2
ObjectStats33 
=33 
$str33 (
+33) *

m_TextInfo33+ 5
.335 6
characterCount336 D
+33E F
$str33G S
+33T U

m_TextInfo33V `
.33` a
	wordCount33a j
+33k l
$str33m z
+33{ |

m_TextInfo	33} á
.
33á à

spaceCount
33à í
+
33ì î
$str
33ï £
+
33§ •

m_TextInfo
33¶ ∞
.
33∞ ±
spriteCount
33± º
+
33Ω æ
$str
33ø À
+
33Ã Õ

m_TextInfo
33Œ ÿ
.
33ÿ Ÿ
	linkCount
33Ÿ ‚
+44 
$str44 '
+44( )

m_TextInfo44* 4
.444 5
	lineCount445 >
+44? @
$str44A M
+44N O

m_TextInfo44P Z
.44Z [
	pageCount44[ d
;44d e
m_ScaleMultiplier77 
=77 
m_TextComponent77  /
.77/ 0
GetType770 7
(777 8
)778 9
==77: <
typeof77= C
(77C D
TextMeshPro77D O
)77O P
?77Q R
$num77S T
:77U V
$num77W [
;77[ \
m_HandleSize88 
=88 
HandleUtility88 (
.88( )
GetHandleSize88) 6
(886 7
m_Transform887 B
.88B C
position88C K
)88K L
*88M N
m_ScaleMultiplier88O `
;88` a
if<< 
(<< 
	ShowLines<< 
)<< 
DrawLineBounds== 
(== 
)==  
;==  !
ifBB 
(BB 
	ShowWordsBB 
)BB 
DrawWordBoundsCC 
(CC 
)CC  
;CC  !
ifHH 
(HH 
ShowCharactersHH 
)HH  
DrawCharactersBoundsII $
(II$ %
)II% &
;II& '
ifNN 
(NN 
	ShowLinksNN 
)NN 
DrawLinkBoundsOO 
(OO 
)OO  
;OO  !
ifTT 
(TT 
ShowMeshBoundsTT 
)TT 

DrawBoundsUU 
(UU 
)UU 
;UU 
ifZZ 
(ZZ 
ShowTextBoundsZZ 
)ZZ 
DrawTextBounds[[ 
([[ 
)[[  
;[[  !
}]] 	
voiddd  
DrawCharactersBoundsdd !
(dd! "
)dd" #
{ee 	
intff 
characterCountff 
=ff  

m_TextInfoff! +
.ff+ ,
characterCountff, :
;ff: ;
forhh 
(hh 
inthh 
ihh 
=hh 
$numhh 
;hh 
ihh 
<hh 
characterCounthh  .
;hh. /
ihh0 1
++hh1 3
)hh3 4
{ii 
TMP_CharacterInfokk !
characterInfokk" /
=kk0 1

m_TextInfokk2 <
.kk< =
characterInfokk= J
[kkJ K
ikkK L
]kkL M
;kkM N
boolmm 
isCharacterVisiblemm '
=mm( )
imm* +
<mm, -
m_TextComponentmm. =
.mm= > 
maxVisibleCharactersmm> R
&&mmS U
characterInfonn* 7
.nn7 8

lineNumbernn8 B
<nnC D
m_TextComponentnnE T
.nnT U
maxVisibleLinesnnU d
&&nne g
ioo* +
>=oo, .
m_TextComponentoo/ >
.oo> ?!
firstVisibleCharacteroo? T
;ooT U
ifqq 
(qq 
m_TextComponentqq #
.qq# $
overflowModeqq$ 0
==qq1 3
TextOverflowModesqq4 E
.qqE F
PageqqF J
)qqJ K
isCharacterVisiblerr &
=rr' (
isCharacterVisiblerr) ;
&&rr< >
characterInforr? L
.rrL M

pageNumberrrM W
+rrX Y
$numrrZ [
==rr\ ^
m_TextComponentrr_ n
.rrn o
pageToDisplayrro |
;rr| }
iftt 
(tt 
!tt 
isCharacterVisiblett '
)tt' (
continueuu 
;uu 
floatww 
dottedLineSizeww $
=ww% &
$numww' (
;ww( )
Vector3zz 

bottomLeftzz "
=zz# $
m_Transformzz% 0
.zz0 1
TransformPointzz1 ?
(zz? @
characterInfozz@ M
.zzM N

bottomLeftzzN X
)zzX Y
;zzY Z
Vector3{{ 
topLeft{{ 
={{  !
m_Transform{{" -
.{{- .
TransformPoint{{. <
({{< =
new{{= @
Vector3{{A H
({{H I
characterInfo{{I V
.{{V W
topLeft{{W ^
.{{^ _
x{{_ `
,{{` a
characterInfo{{b o
.{{o p
topLeft{{p w
.{{w x
y{{x y
,{{y z
$num{{{ |
){{| }
){{} ~
;{{~ 
Vector3|| 
topRight||  
=||! "
m_Transform||# .
.||. /
TransformPoint||/ =
(||= >
characterInfo||> K
.||K L
topRight||L T
)||T U
;||U V
Vector3}} 
bottomRight}} #
=}}$ %
m_Transform}}& 1
.}}1 2
TransformPoint}}2 @
(}}@ A
new}}A D
Vector3}}E L
(}}L M
characterInfo}}M Z
.}}Z [
bottomRight}}[ f
.}}f g
x}}g h
,}}h i
characterInfo}}j w
.}}w x
bottomRight	}}x É
.
}}É Ñ
y
}}Ñ Ö
,
}}Ö Ü
$num
}}á à
)
}}à â
)
}}â ä
;
}}ä ã
if
ÄÄ 
(
ÄÄ 
characterInfo
ÄÄ !
.
ÄÄ! "
	isVisible
ÄÄ" +
)
ÄÄ+ ,
{
ÅÅ 
Color
ÇÇ 
color
ÇÇ 
=
ÇÇ  !
Color
ÇÇ" '
.
ÇÇ' (
green
ÇÇ( -
;
ÇÇ- .!
DrawDottedRectangle
ÉÉ '
(
ÉÉ' (

bottomLeft
ÉÉ( 2
,
ÉÉ2 3
topRight
ÉÉ4 <
,
ÉÉ< =
color
ÉÉ> C
)
ÉÉC D
;
ÉÉD E
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
Color
áá 
color
áá 
=
áá  !
Color
áá" '
.
áá' (
grey
áá( ,
;
áá, -
float
ââ 
whiteSpaceAdvance
ââ +
=
ââ, -
Math
ââ. 2
.
ââ2 3
Abs
ââ3 6
(
ââ6 7
characterInfo
ââ7 D
.
ââD E
origin
ââE K
-
ââL M
characterInfo
ââN [
.
ââ[ \
xAdvance
ââ\ d
)
ââd e
>
ââf g
$num
ââh m
?
âân o
characterInfo
ââp }
.
ââ} ~
xAdvanceââ~ Ü
:ââá à
characterInfoâââ ñ
.ââñ ó
originââó ù
+ââû ü
(ââ† °
characterInfoââ° Æ
.ââÆ Ø
ascenderââØ ∑
-ââ∏ π
characterInfoââ∫ «
.ââ« »
	descenderââ» —
)ââ— “
*ââ” ‘
$numââ’ ⁄
;ââ⁄ €!
DrawDottedRectangle
ää '
(
ää' (
m_Transform
ää( 3
.
ää3 4
TransformPoint
ää4 B
(
ääB C
new
ääC F
Vector3
ääG N
(
ääN O
characterInfo
ääO \
.
ää\ ]
origin
ää] c
,
ääc d
characterInfo
ääe r
.
äär s
	descender
ääs |
,
ää| }
$num
ää~ 
)ää Ä
)ääÄ Å
,ääÅ Ç
m_TransformääÉ é
.ääé è
TransformPointääè ù
(ääù û
newääû °
Vector3ää¢ ©
(ää© ™!
whiteSpaceAdvanceää™ ª
,ääª º
characterInfoääΩ  
.ää  À
ascenderääÀ ”
,ää” ‘
$numää’ ÷
)ää÷ ◊
)ää◊ ÿ
,ääÿ Ÿ
colorää⁄ ﬂ
,ääﬂ ‡
$numää· ‚
)ää‚ „
;ää„ ‰
}
ãã 
float
çç 
origin
çç 
=
çç 
characterInfo
çç ,
.
çç, -
origin
çç- 3
;
çç3 4
float
éé 
advance
éé 
=
éé 
characterInfo
éé  -
.
éé- .
xAdvance
éé. 6
;
éé6 7
float
èè 

ascentline
èè  
=
èè! "
characterInfo
èè# 0
.
èè0 1
ascender
èè1 9
;
èè9 :
float
êê 
baseline
êê 
=
êê  
characterInfo
êê! .
.
êê. /
baseLine
êê/ 7
;
êê7 8
float
ëë 
descentline
ëë !
=
ëë" #
characterInfo
ëë$ 1
.
ëë1 2
	descender
ëë2 ;
;
ëë; <
Vector3
îî 
ascentlineStart
îî '
=
îî( )
m_Transform
îî* 5
.
îî5 6
TransformPoint
îî6 D
(
îîD E
new
îîE H
Vector3
îîI P
(
îîP Q
origin
îîQ W
,
îîW X

ascentline
îîY c
,
îîc d
$num
îîe f
)
îîf g
)
îîg h
;
îîh i
Vector3
ïï 
ascentlineEnd
ïï %
=
ïï& '
m_Transform
ïï( 3
.
ïï3 4
TransformPoint
ïï4 B
(
ïïB C
new
ïïC F
Vector3
ïïG N
(
ïïN O
advance
ïïO V
,
ïïV W

ascentline
ïïX b
,
ïïb c
$num
ïïd e
)
ïïe f
)
ïïf g
;
ïïg h
Handles
óó 
.
óó 
color
óó 
=
óó 
Color
óó  %
.
óó% &
cyan
óó& *
;
óó* +
Handles
òò 
.
òò 
DrawDottedLine
òò &
(
òò& '
ascentlineStart
òò' 6
,
òò6 7
ascentlineEnd
òò8 E
,
òòE F
dottedLineSize
òòG U
)
òòU V
;
òòV W
float
õõ 
capline
õõ 
=
õõ 
characterInfo
õõ  -
.
õõ- .
	fontAsset
õõ. 7
==
õõ8 :
null
õõ; ?
?
õõ@ A
$num
õõB C
:
õõD E
baseline
õõF N
+
õõO P
characterInfo
õõQ ^
.
õõ^ _
	fontAsset
õõ_ h
.
õõh i
faceInfo
õõi q
.
õõq r
capLine
õõr y
*
õõz {
characterInfoõõ| â
.õõâ ä
scaleõõä è
;õõè ê
Vector3
úú 
capHeightStart
úú &
=
úú' (
new
úú) ,
Vector3
úú- 4
(
úú4 5
topLeft
úú5 <
.
úú< =
x
úú= >
,
úú> ?
m_Transform
úú@ K
.
úúK L
TransformPoint
úúL Z
(
úúZ [
new
úú[ ^
Vector3
úú_ f
(
úúf g
$num
úúg h
,
úúh i
capline
úúj q
,
úúq r
$num
úús t
)
úút u
)
úúu v
.
úúv w
y
úúw x
,
úúx y
$num
úúz {
)
úú{ |
;
úú| }
Vector3
ùù 
capHeightEnd
ùù $
=
ùù% &
new
ùù' *
Vector3
ùù+ 2
(
ùù2 3
topRight
ùù3 ;
.
ùù; <
x
ùù< =
,
ùù= >
m_Transform
ùù? J
.
ùùJ K
TransformPoint
ùùK Y
(
ùùY Z
new
ùùZ ]
Vector3
ùù^ e
(
ùùe f
$num
ùùf g
,
ùùg h
capline
ùùi p
,
ùùp q
$num
ùùr s
)
ùùs t
)
ùùt u
.
ùùu v
y
ùùv w
,
ùùw x
$num
ùùy z
)
ùùz {
;
ùù{ |
float
üü 
meanline
üü 
=
üü  
characterInfo
üü! .
.
üü. /
	fontAsset
üü/ 8
==
üü9 ;
null
üü< @
?
üüA B
$num
üüC D
:
üüE F
baseline
üüG O
+
üüP Q
characterInfo
üüR _
.
üü_ `
	fontAsset
üü` i
.
üüi j
faceInfo
üüj r
.
üür s
meanLine
üüs {
*
üü| }
characterInfoüü~ ã
.üüã å
scaleüüå ë
;üüë í
Vector3
†† 
meanlineStart
†† %
=
††& '
new
††( +
Vector3
††, 3
(
††3 4
topLeft
††4 ;
.
††; <
x
††< =
,
††= >
m_Transform
††? J
.
††J K
TransformPoint
††K Y
(
††Y Z
new
††Z ]
Vector3
††^ e
(
††e f
$num
††f g
,
††g h
meanline
††i q
,
††q r
$num
††s t
)
††t u
)
††u v
.
††v w
y
††w x
,
††x y
$num
††z {
)
††{ |
;
††| }
Vector3
°° 
meanlineEnd
°° #
=
°°$ %
new
°°& )
Vector3
°°* 1
(
°°1 2
topRight
°°2 :
.
°°: ;
x
°°; <
,
°°< =
m_Transform
°°> I
.
°°I J
TransformPoint
°°J X
(
°°X Y
new
°°Y \
Vector3
°°] d
(
°°d e
$num
°°e f
,
°°f g
meanline
°°h p
,
°°p q
$num
°°r s
)
°°s t
)
°°t u
.
°°u v
y
°°v w
,
°°w x
$num
°°y z
)
°°z {
;
°°{ |
if
££ 
(
££ 
characterInfo
££ !
.
££! "
	isVisible
££" +
)
££+ ,
{
§§ 
Handles
¶¶ 
.
¶¶ 
color
¶¶ !
=
¶¶" #
Color
¶¶$ )
.
¶¶) *
cyan
¶¶* .
;
¶¶. /
Handles
ßß 
.
ßß 
DrawDottedLine
ßß *
(
ßß* +
capHeightStart
ßß+ 9
,
ßß9 :
capHeightEnd
ßß; G
,
ßßG H
dottedLineSize
ßßI W
)
ßßW X
;
ßßX Y
Handles
™™ 
.
™™ 
color
™™ !
=
™™" #
Color
™™$ )
.
™™) *
cyan
™™* .
;
™™. /
Handles
´´ 
.
´´ 
DrawDottedLine
´´ *
(
´´* +
meanlineStart
´´+ 8
,
´´8 9
meanlineEnd
´´: E
,
´´E F
dottedLineSize
´´G U
)
´´U V
;
´´V W
}
¨¨ 
Vector3
ØØ 
baselineStart
ØØ %
=
ØØ& '
m_Transform
ØØ( 3
.
ØØ3 4
TransformPoint
ØØ4 B
(
ØØB C
new
ØØC F
Vector3
ØØG N
(
ØØN O
origin
ØØO U
,
ØØU V
baseline
ØØW _
,
ØØ_ `
$num
ØØa b
)
ØØb c
)
ØØc d
;
ØØd e
Vector3
∞∞ 
baselineEnd
∞∞ #
=
∞∞$ %
m_Transform
∞∞& 1
.
∞∞1 2
TransformPoint
∞∞2 @
(
∞∞@ A
new
∞∞A D
Vector3
∞∞E L
(
∞∞L M
advance
∞∞M T
,
∞∞T U
baseline
∞∞V ^
,
∞∞^ _
$num
∞∞` a
)
∞∞a b
)
∞∞b c
;
∞∞c d
Handles
≤≤ 
.
≤≤ 
color
≤≤ 
=
≤≤ 
Color
≤≤  %
.
≤≤% &
cyan
≤≤& *
;
≤≤* +
Handles
≥≥ 
.
≥≥ 
DrawDottedLine
≥≥ &
(
≥≥& '
baselineStart
≥≥' 4
,
≥≥4 5
baselineEnd
≥≥6 A
,
≥≥A B
dottedLineSize
≥≥C Q
)
≥≥Q R
;
≥≥R S
Vector3
∂∂ 
descentlineStart
∂∂ (
=
∂∂) *
m_Transform
∂∂+ 6
.
∂∂6 7
TransformPoint
∂∂7 E
(
∂∂E F
new
∂∂F I
Vector3
∂∂J Q
(
∂∂Q R
origin
∂∂R X
,
∂∂X Y
descentline
∂∂Z e
,
∂∂e f
$num
∂∂g h
)
∂∂h i
)
∂∂i j
;
∂∂j k
Vector3
∑∑ 
descentlineEnd
∑∑ &
=
∑∑' (
m_Transform
∑∑) 4
.
∑∑4 5
TransformPoint
∑∑5 C
(
∑∑C D
new
∑∑D G
Vector3
∑∑H O
(
∑∑O P
advance
∑∑P W
,
∑∑W X
descentline
∑∑Y d
,
∑∑d e
$num
∑∑f g
)
∑∑g h
)
∑∑h i
;
∑∑i j
Handles
ππ 
.
ππ 
color
ππ 
=
ππ 
Color
ππ  %
.
ππ% &
cyan
ππ& *
;
ππ* +
Handles
∫∫ 
.
∫∫ 
DrawDottedLine
∫∫ &
(
∫∫& '
descentlineStart
∫∫' 7
,
∫∫7 8
descentlineEnd
∫∫9 G
,
∫∫G H
dottedLineSize
∫∫I W
)
∫∫W X
;
∫∫X Y
Vector3
ΩΩ 
originPosition
ΩΩ &
=
ΩΩ' (
m_Transform
ΩΩ) 4
.
ΩΩ4 5
TransformPoint
ΩΩ5 C
(
ΩΩC D
new
ΩΩD G
Vector3
ΩΩH O
(
ΩΩO P
origin
ΩΩP V
,
ΩΩV W
baseline
ΩΩX `
,
ΩΩ` a
$num
ΩΩb c
)
ΩΩc d
)
ΩΩd e
;
ΩΩe f
DrawCrosshair
ææ 
(
ææ 
originPosition
ææ ,
,
ææ, -
$num
ææ. 3
/
ææ4 5
m_ScaleMultiplier
ææ6 G
,
ææG H
Color
ææI N
.
ææN O
cyan
ææO S
)
ææS T
;
ææT U
Vector3
¡¡ 
advancePosition
¡¡ '
=
¡¡( )
m_Transform
¡¡* 5
.
¡¡5 6
TransformPoint
¡¡6 D
(
¡¡D E
new
¡¡E H
Vector3
¡¡I P
(
¡¡P Q
advance
¡¡Q X
,
¡¡X Y
baseline
¡¡Z b
,
¡¡b c
$num
¡¡d e
)
¡¡e f
)
¡¡f g
;
¡¡g h

DrawSquare
¬¬ 
(
¬¬ 
advancePosition
¬¬ *
,
¬¬* +
$num
¬¬, 2
/
¬¬3 4
m_ScaleMultiplier
¬¬5 F
,
¬¬F G
Color
¬¬H M
.
¬¬M N
yellow
¬¬N T
)
¬¬T U
;
¬¬U V
DrawCrosshair
√√ 
(
√√ 
advancePosition
√√ -
,
√√- .
$num
√√/ 6
/
√√7 8
m_ScaleMultiplier
√√9 J
,
√√J K
Color
√√L Q
.
√√Q R
yellow
√√R X
)
√√X Y
;
√√Y Z
if
∆∆ 
(
∆∆ 
m_HandleSize
∆∆ 
<
∆∆  !
$num
∆∆" &
)
∆∆& '
{
«« 
GUIStyle
»» 
style
»» !
=
»»" #
new
»»$ '
GUIStyle
»»( 0
(
»»0 1
GUI
»»1 4
.
»»4 5
skin
»»5 9
.
»»9 :
GetStyle
»»: B
(
»»B C
$str
»»C J
)
»»J K
)
»»K L
;
»»L M
style
…… 
.
…… 
normal
…… 
.
……  
	textColor
……  )
=
……* +
new
……, /
Color
……0 5
(
……5 6
$num
……6 :
,
……: ;
$num
……< @
,
……@ A
$num
……B F
,
……F G
$num
……H L
)
……L M
;
……M N
style
   
.
   
fontSize
   !
=
  " #
$num
  $ &
;
  & '
style
ÀÀ 
.
ÀÀ 

fixedWidth
ÀÀ #
=
ÀÀ$ %
$num
ÀÀ& )
;
ÀÀ) *
style
ÃÃ 
.
ÃÃ 
fixedHeight
ÃÃ $
=
ÃÃ% &
$num
ÃÃ' )
;
ÃÃ) *
Vector3
ŒŒ 
labelPosition
ŒŒ (
;
ŒŒ( )
float
œœ 
center
œœ 
=
œœ  !
(
œœ" #
origin
œœ# )
+
œœ* +
advance
œœ, 3
)
œœ3 4
/
œœ5 6
$num
œœ7 8
;
œœ8 9
labelPosition
ÿÿ  
=
ÿÿ! "
m_Transform
ÿÿ# .
.
ÿÿ. /
TransformPoint
ÿÿ/ =
(
ÿÿ= >
new
ÿÿ> A
Vector3
ÿÿB I
(
ÿÿI J
center
ÿÿJ P
,
ÿÿP Q

ascentline
ÿÿR \
,
ÿÿ\ ]
$num
ÿÿ^ _
)
ÿÿ_ `
)
ÿÿ` a
;
ÿÿa b
style
ŸŸ 
.
ŸŸ 
	alignment
ŸŸ "
=
ŸŸ# $

TextAnchor
ŸŸ% /
.
ŸŸ/ 0
UpperCenter
ŸŸ0 ;
;
ŸŸ; <
Handles
⁄⁄ 
.
⁄⁄ 
Label
⁄⁄  
(
⁄⁄  !
labelPosition
⁄⁄! .
,
⁄⁄. /
$str
⁄⁄0 =
,
⁄⁄= >
style
⁄⁄? D
)
⁄⁄D E
;
⁄⁄E F
labelPosition
ﬁﬁ  
=
ﬁﬁ! "
m_Transform
ﬁﬁ# .
.
ﬁﬁ. /
TransformPoint
ﬁﬁ/ =
(
ﬁﬁ= >
new
ﬁﬁ> A
Vector3
ﬁﬁB I
(
ﬁﬁI J
center
ﬁﬁJ P
,
ﬁﬁP Q
baseline
ﬁﬁR Z
,
ﬁﬁZ [
$num
ﬁﬁ\ ]
)
ﬁﬁ] ^
)
ﬁﬁ^ _
;
ﬁﬁ_ `
Handles
ﬂﬂ 
.
ﬂﬂ 
Label
ﬂﬂ  
(
ﬂﬂ  !
labelPosition
ﬂﬂ! .
,
ﬂﬂ. /
$str
ﬂﬂ0 ;
,
ﬂﬂ; <
style
ﬂﬂ= B
)
ﬂﬂB C
;
ﬂﬂC D
labelPosition
„„  
=
„„! "
m_Transform
„„# .
.
„„. /
TransformPoint
„„/ =
(
„„= >
new
„„> A
Vector3
„„B I
(
„„I J
center
„„J P
,
„„P Q
descentline
„„R ]
,
„„] ^
$num
„„_ `
)
„„` a
)
„„a b
;
„„b c
Handles
‰‰ 
.
‰‰ 
Label
‰‰  
(
‰‰  !
labelPosition
‰‰! .
,
‰‰. /
$str
‰‰0 >
,
‰‰> ?
style
‰‰@ E
)
‰‰E F
;
‰‰F G
if
ÁÁ 
(
ÁÁ 
characterInfo
ÁÁ $
.
ÁÁ$ %
	isVisible
ÁÁ% .
)
ÁÁ. /
{
ËË 
labelPosition
ÍÍ $
=
ÍÍ% &
m_Transform
ÍÍ' 2
.
ÍÍ2 3
TransformPoint
ÍÍ3 A
(
ÍÍA B
new
ÍÍB E
Vector3
ÍÍF M
(
ÍÍM N
center
ÍÍN T
,
ÍÍT U
capline
ÍÍV ]
,
ÍÍ] ^
$num
ÍÍ_ `
)
ÍÍ` a
)
ÍÍa b
;
ÍÍb c
style
ÎÎ 
.
ÎÎ 
	alignment
ÎÎ &
=
ÎÎ' (

TextAnchor
ÎÎ) 3
.
ÎÎ3 4
UpperCenter
ÎÎ4 ?
;
ÎÎ? @
Handles
ÏÏ 
.
ÏÏ 
Label
ÏÏ $
(
ÏÏ$ %
labelPosition
ÏÏ% 2
,
ÏÏ2 3
$str
ÏÏ4 >
,
ÏÏ> ?
style
ÏÏ@ E
)
ÏÏE F
;
ÏÏF G
labelPosition
 $
=
% &
m_Transform
' 2
.
2 3
TransformPoint
3 A
(
A B
new
B E
Vector3
F M
(
M N
center
N T
,
T U
meanline
V ^
,
^ _
$num
` a
)
a b
)
b c
;
c d
style
ÒÒ 
.
ÒÒ 
	alignment
ÒÒ &
=
ÒÒ' (

TextAnchor
ÒÒ) 3
.
ÒÒ3 4
UpperCenter
ÒÒ4 ?
;
ÒÒ? @
Handles
ÚÚ 
.
ÚÚ 
Label
ÚÚ $
(
ÚÚ$ %
labelPosition
ÚÚ% 2
,
ÚÚ2 3
$str
ÚÚ4 ?
,
ÚÚ? @
style
ÚÚA F
)
ÚÚF G
;
ÚÚG H
labelPosition
ˆˆ $
=
ˆˆ% &
m_Transform
ˆˆ' 2
.
ˆˆ2 3
TransformPoint
ˆˆ3 A
(
ˆˆA B
new
ˆˆB E
Vector3
ˆˆF M
(
ˆˆM N
origin
ˆˆN T
,
ˆˆT U
baseline
ˆˆV ^
,
ˆˆ^ _
$num
ˆˆ` a
)
ˆˆa b
)
ˆˆb c
;
ˆˆc d
style
˜˜ 
.
˜˜ 
	alignment
˜˜ &
=
˜˜' (

TextAnchor
˜˜) 3
.
˜˜3 4

UpperRight
˜˜4 >
;
˜˜> ?
Handles
¯¯ 
.
¯¯ 
Label
¯¯ $
(
¯¯$ %
labelPosition
¯¯% 2
,
¯¯2 3
$str
¯¯4 =
,
¯¯= >
style
¯¯? D
)
¯¯D E
;
¯¯E F
labelPosition
˚˚ $
=
˚˚% &
m_Transform
˚˚' 2
.
˚˚2 3
TransformPoint
˚˚3 A
(
˚˚A B
new
˚˚B E
Vector3
˚˚F M
(
˚˚M N
advance
˚˚N U
,
˚˚U V
baseline
˚˚W _
,
˚˚_ `
$num
˚˚a b
)
˚˚b c
)
˚˚c d
;
˚˚d e
style
¸¸ 
.
¸¸ 
	alignment
¸¸ &
=
¸¸' (

TextAnchor
¸¸) 3
.
¸¸3 4
	UpperLeft
¸¸4 =
;
¸¸= >
Handles
˝˝ 
.
˝˝ 
Label
˝˝ $
(
˝˝$ %
labelPosition
˝˝% 2
,
˝˝2 3
$str
˝˝4 ?
,
˝˝? @
style
˝˝A F
)
˝˝F G
;
˝˝G H
}
˛˛ 
}
ˇˇ 
}
ÄÄ 
}
ÅÅ 	
void
àà 
DrawWordBounds
àà 
(
àà 
)
àà 
{
ââ 	
for
ää 
(
ää 
int
ää 
i
ää 
=
ää 
$num
ää 
;
ää 
i
ää 
<
ää 

m_TextInfo
ää  *
.
ää* +
	wordCount
ää+ 4
;
ää4 5
i
ää6 7
++
ää7 9
)
ää9 :
{
ãã 
TMP_WordInfo
åå 
wInfo
åå "
=
åå# $

m_TextInfo
åå% /
.
åå/ 0
wordInfo
åå0 8
[
åå8 9
i
åå9 :
]
åå: ;
;
åå; <
bool
éé 
isBeginRegion
éé "
=
éé# $
false
éé% *
;
éé* +
Vector3
êê 

bottomLeft
êê "
=
êê# $
Vector3
êê% ,
.
êê, -
zero
êê- 1
;
êê1 2
Vector3
ëë 
topLeft
ëë 
=
ëë  !
Vector3
ëë" )
.
ëë) *
zero
ëë* .
;
ëë. /
Vector3
íí 
bottomRight
íí #
=
íí$ %
Vector3
íí& -
.
íí- .
zero
íí. 2
;
íí2 3
Vector3
ìì 
topRight
ìì  
=
ìì! "
Vector3
ìì# *
.
ìì* +
zero
ìì+ /
;
ìì/ 0
float
ïï 
maxAscender
ïï !
=
ïï" #
-
ïï$ %
Mathf
ïï% *
.
ïï* +
Infinity
ïï+ 3
;
ïï3 4
float
ññ 
minDescender
ññ "
=
ññ# $
Mathf
ññ% *
.
ññ* +
Infinity
ññ+ 3
;
ññ3 4
Color
òò 
	wordColor
òò 
=
òò  !
Color
òò" '
.
òò' (
green
òò( -
;
òò- .
for
õõ 
(
õõ 
int
õõ 
j
õõ 
=
õõ 
$num
õõ 
;
õõ 
j
õõ  !
<
õõ" #
wInfo
õõ$ )
.
õõ) *
characterCount
õõ* 8
;
õõ8 9
j
õõ: ;
++
õõ; =
)
õõ= >
{
úú 
int
ùù 
characterIndex
ùù &
=
ùù' (
wInfo
ùù) .
.
ùù. /!
firstCharacterIndex
ùù/ B
+
ùùC D
j
ùùE F
;
ùùF G
TMP_CharacterInfo
ûû %
currentCharInfo
ûû& 5
=
ûû6 7

m_TextInfo
ûû8 B
.
ûûB C
characterInfo
ûûC P
[
ûûP Q
characterIndex
ûûQ _
]
ûû_ `
;
ûû` a
int
üü 
currentLine
üü #
=
üü$ %
currentCharInfo
üü& 5
.
üü5 6

lineNumber
üü6 @
;
üü@ A
bool
°°  
isCharacterVisible
°° +
=
°°, -
characterIndex
°°. <
>
°°= >
m_TextComponent
°°? N
.
°°N O"
maxVisibleCharacters
°°O c
||
°°d f
currentCharInfo
¢¢. =
.
¢¢= >

lineNumber
¢¢> H
>
¢¢I J
m_TextComponent
¢¢K Z
.
¢¢Z [
maxVisibleLines
¢¢[ j
||
¢¢k m
(
££- .
m_TextComponent
££. =
.
££= >
overflowMode
££> J
==
££K M
TextOverflowModes
££N _
.
££_ `
Page
££` d
&&
££e g
currentCharInfo
££h w
.
££w x

pageNumber££x Ç
+££É Ñ
$num££Ö Ü
!=££á â
m_TextComponent££ä ô
.££ô ö
pageToDisplay££ö ß
)££ß ®
?££© ™
false££´ ∞
:££± ≤
true££≥ ∑
;££∑ ∏
maxAscender
¶¶ 
=
¶¶  !
Mathf
¶¶" '
.
¶¶' (
Max
¶¶( +
(
¶¶+ ,
maxAscender
¶¶, 7
,
¶¶7 8
currentCharInfo
¶¶9 H
.
¶¶H I
ascender
¶¶I Q
)
¶¶Q R
;
¶¶R S
minDescender
ßß  
=
ßß! "
Mathf
ßß# (
.
ßß( )
Min
ßß) ,
(
ßß, -
minDescender
ßß- 9
,
ßß9 :
currentCharInfo
ßß; J
.
ßßJ K
	descender
ßßK T
)
ßßT U
;
ßßU V
if
©© 
(
©© 
isBeginRegion
©© %
==
©©& (
false
©©) .
&&
©©/ 1 
isCharacterVisible
©©2 D
)
©©D E
{
™™ 
isBeginRegion
´´ %
=
´´& '
true
´´( ,
;
´´, -

bottomLeft
≠≠ "
=
≠≠# $
new
≠≠% (
Vector3
≠≠) 0
(
≠≠0 1
currentCharInfo
≠≠1 @
.
≠≠@ A

bottomLeft
≠≠A K
.
≠≠K L
x
≠≠L M
,
≠≠M N
currentCharInfo
≠≠O ^
.
≠≠^ _
	descender
≠≠_ h
,
≠≠h i
$num
≠≠j k
)
≠≠k l
;
≠≠l m
topLeft
ÆÆ 
=
ÆÆ  !
new
ÆÆ" %
Vector3
ÆÆ& -
(
ÆÆ- .
currentCharInfo
ÆÆ. =
.
ÆÆ= >

bottomLeft
ÆÆ> H
.
ÆÆH I
x
ÆÆI J
,
ÆÆJ K
currentCharInfo
ÆÆL [
.
ÆÆ[ \
ascender
ÆÆ\ d
,
ÆÆd e
$num
ÆÆf g
)
ÆÆg h
;
ÆÆh i
if
≥≥ 
(
≥≥ 
wInfo
≥≥ !
.
≥≥! "
characterCount
≥≥" 0
==
≥≥1 3
$num
≥≥4 5
)
≥≥5 6
{
¥¥ 
isBeginRegion
µµ )
=
µµ* +
false
µµ, 1
;
µµ1 2
topLeft
∑∑ #
=
∑∑$ %
m_Transform
∑∑& 1
.
∑∑1 2
TransformPoint
∑∑2 @
(
∑∑@ A
new
∑∑A D
Vector3
∑∑E L
(
∑∑L M
topLeft
∑∑M T
.
∑∑T U
x
∑∑U V
,
∑∑V W
maxAscender
∑∑X c
,
∑∑c d
$num
∑∑e f
)
∑∑f g
)
∑∑g h
;
∑∑h i

bottomLeft
∏∏ &
=
∏∏' (
m_Transform
∏∏) 4
.
∏∏4 5
TransformPoint
∏∏5 C
(
∏∏C D
new
∏∏D G
Vector3
∏∏H O
(
∏∏O P

bottomLeft
∏∏P Z
.
∏∏Z [
x
∏∏[ \
,
∏∏\ ]
minDescender
∏∏^ j
,
∏∏j k
$num
∏∏l m
)
∏∏m n
)
∏∏n o
;
∏∏o p
bottomRight
ππ '
=
ππ( )
m_Transform
ππ* 5
.
ππ5 6
TransformPoint
ππ6 D
(
ππD E
new
ππE H
Vector3
ππI P
(
ππP Q
currentCharInfo
ππQ `
.
ππ` a
topRight
ππa i
.
ππi j
x
ππj k
,
ππk l
minDescender
ππm y
,
ππy z
$num
ππ{ |
)
ππ| }
)
ππ} ~
;
ππ~ 
topRight
∫∫ $
=
∫∫% &
m_Transform
∫∫' 2
.
∫∫2 3
TransformPoint
∫∫3 A
(
∫∫A B
new
∫∫B E
Vector3
∫∫F M
(
∫∫M N
currentCharInfo
∫∫N ]
.
∫∫] ^
topRight
∫∫^ f
.
∫∫f g
x
∫∫g h
,
∫∫h i
maxAscender
∫∫j u
,
∫∫u v
$num
∫∫w x
)
∫∫x y
)
∫∫y z
;
∫∫z {
DrawRectangle
ΩΩ )
(
ΩΩ) *

bottomLeft
ΩΩ* 4
,
ΩΩ4 5
topLeft
ΩΩ6 =
,
ΩΩ= >
topRight
ΩΩ? G
,
ΩΩG H
bottomRight
ΩΩI T
,
ΩΩT U
	wordColor
ΩΩV _
)
ΩΩ_ `
;
ΩΩ` a
}
¿¿ 
}
¡¡ 
if
ƒƒ 
(
ƒƒ 
isBeginRegion
ƒƒ %
&&
ƒƒ& (
j
ƒƒ) *
==
ƒƒ+ -
wInfo
ƒƒ. 3
.
ƒƒ3 4
characterCount
ƒƒ4 B
-
ƒƒC D
$num
ƒƒE F
)
ƒƒF G
{
≈≈ 
isBeginRegion
∆∆ %
=
∆∆& '
false
∆∆( -
;
∆∆- .
topLeft
»» 
=
»»  !
m_Transform
»»" -
.
»»- .
TransformPoint
»». <
(
»»< =
new
»»= @
Vector3
»»A H
(
»»H I
topLeft
»»I P
.
»»P Q
x
»»Q R
,
»»R S
maxAscender
»»T _
,
»»_ `
$num
»»a b
)
»»b c
)
»»c d
;
»»d e

bottomLeft
…… "
=
……# $
m_Transform
……% 0
.
……0 1
TransformPoint
……1 ?
(
……? @
new
……@ C
Vector3
……D K
(
……K L

bottomLeft
……L V
.
……V W
x
……W X
,
……X Y
minDescender
……Z f
,
……f g
$num
……h i
)
……i j
)
……j k
;
……k l
bottomRight
   #
=
  $ %
m_Transform
  & 1
.
  1 2
TransformPoint
  2 @
(
  @ A
new
  A D
Vector3
  E L
(
  L M
currentCharInfo
  M \
.
  \ ]
topRight
  ] e
.
  e f
x
  f g
,
  g h
minDescender
  i u
,
  u v
$num
  w x
)
  x y
)
  y z
;
  z {
topRight
ÀÀ  
=
ÀÀ! "
m_Transform
ÀÀ# .
.
ÀÀ. /
TransformPoint
ÀÀ/ =
(
ÀÀ= >
new
ÀÀ> A
Vector3
ÀÀB I
(
ÀÀI J
currentCharInfo
ÀÀJ Y
.
ÀÀY Z
topRight
ÀÀZ b
.
ÀÀb c
x
ÀÀc d
,
ÀÀd e
maxAscender
ÀÀf q
,
ÀÀq r
$num
ÀÀs t
)
ÀÀt u
)
ÀÀu v
;
ÀÀv w
DrawRectangle
ŒŒ %
(
ŒŒ% &

bottomLeft
ŒŒ& 0
,
ŒŒ0 1
topLeft
ŒŒ2 9
,
ŒŒ9 :
topRight
ŒŒ; C
,
ŒŒC D
bottomRight
ŒŒE P
,
ŒŒP Q
	wordColor
ŒŒR [
)
ŒŒ[ \
;
ŒŒ\ ]
}
—— 
else
”” 
if
”” 
(
”” 
isBeginRegion
”” *
&&
””+ -
currentLine
””. 9
!=
””: <

m_TextInfo
””= G
.
””G H
characterInfo
””H U
[
””U V
characterIndex
””V d
+
””e f
$num
””g h
]
””h i
.
””i j

lineNumber
””j t
)
””t u
{
‘‘ 
isBeginRegion
’’ %
=
’’& '
false
’’( -
;
’’- .
topLeft
◊◊ 
=
◊◊  !
m_Transform
◊◊" -
.
◊◊- .
TransformPoint
◊◊. <
(
◊◊< =
new
◊◊= @
Vector3
◊◊A H
(
◊◊H I
topLeft
◊◊I P
.
◊◊P Q
x
◊◊Q R
,
◊◊R S
maxAscender
◊◊T _
,
◊◊_ `
$num
◊◊a b
)
◊◊b c
)
◊◊c d
;
◊◊d e

bottomLeft
ÿÿ "
=
ÿÿ# $
m_Transform
ÿÿ% 0
.
ÿÿ0 1
TransformPoint
ÿÿ1 ?
(
ÿÿ? @
new
ÿÿ@ C
Vector3
ÿÿD K
(
ÿÿK L

bottomLeft
ÿÿL V
.
ÿÿV W
x
ÿÿW X
,
ÿÿX Y
minDescender
ÿÿZ f
,
ÿÿf g
$num
ÿÿh i
)
ÿÿi j
)
ÿÿj k
;
ÿÿk l
bottomRight
ŸŸ #
=
ŸŸ$ %
m_Transform
ŸŸ& 1
.
ŸŸ1 2
TransformPoint
ŸŸ2 @
(
ŸŸ@ A
new
ŸŸA D
Vector3
ŸŸE L
(
ŸŸL M
currentCharInfo
ŸŸM \
.
ŸŸ\ ]
topRight
ŸŸ] e
.
ŸŸe f
x
ŸŸf g
,
ŸŸg h
minDescender
ŸŸi u
,
ŸŸu v
$num
ŸŸw x
)
ŸŸx y
)
ŸŸy z
;
ŸŸz {
topRight
⁄⁄  
=
⁄⁄! "
m_Transform
⁄⁄# .
.
⁄⁄. /
TransformPoint
⁄⁄/ =
(
⁄⁄= >
new
⁄⁄> A
Vector3
⁄⁄B I
(
⁄⁄I J
currentCharInfo
⁄⁄J Y
.
⁄⁄Y Z
topRight
⁄⁄Z b
.
⁄⁄b c
x
⁄⁄c d
,
⁄⁄d e
maxAscender
⁄⁄f q
,
⁄⁄q r
$num
⁄⁄s t
)
⁄⁄t u
)
⁄⁄u v
;
⁄⁄v w
DrawRectangle
›› %
(
››% &

bottomLeft
››& 0
,
››0 1
topLeft
››2 9
,
››9 :
topRight
››; C
,
››C D
bottomRight
››E P
,
››P Q
	wordColor
››R [
)
››[ \
;
››\ ]
maxAscender
ﬂﬂ #
=
ﬂﬂ$ %
-
ﬂﬂ& '
Mathf
ﬂﬂ' ,
.
ﬂﬂ, -
Infinity
ﬂﬂ- 5
;
ﬂﬂ5 6
minDescender
‡‡ $
=
‡‡% &
Mathf
‡‡' ,
.
‡‡, -
Infinity
‡‡- 5
;
‡‡5 6
}
‚‚ 
}
„„ 
}
ÊÊ 
}
ÈÈ 	
void
 
DrawLinkBounds
 
(
 
)
 
{
ÒÒ 	
TMP_TextInfo
ÚÚ 
textInfo
ÚÚ !
=
ÚÚ" #
m_TextComponent
ÚÚ$ 3
.
ÚÚ3 4
textInfo
ÚÚ4 <
;
ÚÚ< =
for
ÙÙ 
(
ÙÙ 
int
ÙÙ 
i
ÙÙ 
=
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
i
ÙÙ 
<
ÙÙ 
textInfo
ÙÙ  (
.
ÙÙ( )
	linkCount
ÙÙ) 2
;
ÙÙ2 3
i
ÙÙ4 5
++
ÙÙ5 7
)
ÙÙ7 8
{
ıı 
TMP_LinkInfo
ˆˆ 
linkInfo
ˆˆ %
=
ˆˆ& '
textInfo
ˆˆ( 0
.
ˆˆ0 1
linkInfo
ˆˆ1 9
[
ˆˆ9 :
i
ˆˆ: ;
]
ˆˆ; <
;
ˆˆ< =
bool
¯¯ 
isBeginRegion
¯¯ "
=
¯¯# $
false
¯¯% *
;
¯¯* +
Vector3
˙˙ 

bottomLeft
˙˙ "
=
˙˙# $
Vector3
˙˙% ,
.
˙˙, -
zero
˙˙- 1
;
˙˙1 2
Vector3
˚˚ 
topLeft
˚˚ 
=
˚˚  !
Vector3
˚˚" )
.
˚˚) *
zero
˚˚* .
;
˚˚. /
Vector3
¸¸ 
bottomRight
¸¸ #
=
¸¸$ %
Vector3
¸¸& -
.
¸¸- .
zero
¸¸. 2
;
¸¸2 3
Vector3
˝˝ 
topRight
˝˝  
=
˝˝! "
Vector3
˝˝# *
.
˝˝* +
zero
˝˝+ /
;
˝˝/ 0
float
ˇˇ 
maxAscender
ˇˇ !
=
ˇˇ" #
-
ˇˇ$ %
Mathf
ˇˇ% *
.
ˇˇ* +
Infinity
ˇˇ+ 3
;
ˇˇ3 4
float
ÄÄ 
minDescender
ÄÄ "
=
ÄÄ# $
Mathf
ÄÄ% *
.
ÄÄ* +
Infinity
ÄÄ+ 3
;
ÄÄ3 4
Color32
ÇÇ 
	linkColor
ÇÇ !
=
ÇÇ" #
Color
ÇÇ$ )
.
ÇÇ) *
cyan
ÇÇ* .
;
ÇÇ. /
for
ÖÖ 
(
ÖÖ 
int
ÖÖ 
j
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
j
ÖÖ  !
<
ÖÖ" #
linkInfo
ÖÖ$ ,
.
ÖÖ, -
linkTextLength
ÖÖ- ;
;
ÖÖ; <
j
ÖÖ= >
++
ÖÖ> @
)
ÖÖ@ A
{
ÜÜ 
int
áá 
characterIndex
áá &
=
áá' (
linkInfo
áá) 1
.
áá1 2)
linkTextfirstCharacterIndex
áá2 M
+
ááN O
j
ááP Q
;
ááQ R
TMP_CharacterInfo
àà %
currentCharInfo
àà& 5
=
àà6 7
textInfo
àà8 @
.
àà@ A
characterInfo
ààA N
[
ààN O
characterIndex
ààO ]
]
àà] ^
;
àà^ _
int
ââ 
currentLine
ââ #
=
ââ$ %
currentCharInfo
ââ& 5
.
ââ5 6

lineNumber
ââ6 @
;
ââ@ A
bool
ãã  
isCharacterVisible
ãã +
=
ãã, -
characterIndex
ãã. <
>
ãã= >
m_TextComponent
ãã? N
.
ããN O"
maxVisibleCharacters
ããO c
||
ããd f
currentCharInfo
åå. =
.
åå= >

lineNumber
åå> H
>
ååI J
m_TextComponent
ååK Z
.
ååZ [
maxVisibleLines
åå[ j
||
ååk m
(
çç- .
m_TextComponent
çç. =
.
çç= >
overflowMode
çç> J
==
ççK M
TextOverflowModes
ççN _
.
çç_ `
Page
çç` d
&&
ççe g
currentCharInfo
ççh w
.
ççw x

pageNumberççx Ç
+ççÉ Ñ
$numççÖ Ü
!=ççá â
m_TextComponentççä ô
.ççô ö
pageToDisplayççö ß
)ççß ®
?çç© ™
falseçç´ ∞
:çç± ≤
trueçç≥ ∑
;çç∑ ∏
maxAscender
êê 
=
êê  !
Mathf
êê" '
.
êê' (
Max
êê( +
(
êê+ ,
maxAscender
êê, 7
,
êê7 8
currentCharInfo
êê9 H
.
êêH I
ascender
êêI Q
)
êêQ R
;
êêR S
minDescender
ëë  
=
ëë! "
Mathf
ëë# (
.
ëë( )
Min
ëë) ,
(
ëë, -
minDescender
ëë- 9
,
ëë9 :
currentCharInfo
ëë; J
.
ëëJ K
	descender
ëëK T
)
ëëT U
;
ëëU V
if
ìì 
(
ìì 
isBeginRegion
ìì %
==
ìì& (
false
ìì) .
&&
ìì/ 1 
isCharacterVisible
ìì2 D
)
ììD E
{
îî 
isBeginRegion
ïï %
=
ïï& '
true
ïï( ,
;
ïï, -

bottomLeft
óó "
=
óó# $
new
óó% (
Vector3
óó) 0
(
óó0 1
currentCharInfo
óó1 @
.
óó@ A

bottomLeft
óóA K
.
óóK L
x
óóL M
,
óóM N
currentCharInfo
óóO ^
.
óó^ _
	descender
óó_ h
,
óóh i
$num
óój k
)
óók l
;
óól m
topLeft
òò 
=
òò  !
new
òò" %
Vector3
òò& -
(
òò- .
currentCharInfo
òò. =
.
òò= >

bottomLeft
òò> H
.
òòH I
x
òòI J
,
òòJ K
currentCharInfo
òòL [
.
òò[ \
ascender
òò\ d
,
òòd e
$num
òòf g
)
òòg h
;
òòh i
if
ùù 
(
ùù 
linkInfo
ùù $
.
ùù$ %
linkTextLength
ùù% 3
==
ùù4 6
$num
ùù7 8
)
ùù8 9
{
ûû 
isBeginRegion
üü )
=
üü* +
false
üü, 1
;
üü1 2
topLeft
°° #
=
°°$ %
m_Transform
°°& 1
.
°°1 2
TransformPoint
°°2 @
(
°°@ A
new
°°A D
Vector3
°°E L
(
°°L M
topLeft
°°M T
.
°°T U
x
°°U V
,
°°V W
maxAscender
°°X c
,
°°c d
$num
°°e f
)
°°f g
)
°°g h
;
°°h i

bottomLeft
¢¢ &
=
¢¢' (
m_Transform
¢¢) 4
.
¢¢4 5
TransformPoint
¢¢5 C
(
¢¢C D
new
¢¢D G
Vector3
¢¢H O
(
¢¢O P

bottomLeft
¢¢P Z
.
¢¢Z [
x
¢¢[ \
,
¢¢\ ]
minDescender
¢¢^ j
,
¢¢j k
$num
¢¢l m
)
¢¢m n
)
¢¢n o
;
¢¢o p
bottomRight
££ '
=
££( )
m_Transform
££* 5
.
££5 6
TransformPoint
££6 D
(
££D E
new
££E H
Vector3
££I P
(
££P Q
currentCharInfo
££Q `
.
££` a
topRight
££a i
.
££i j
x
££j k
,
££k l
minDescender
££m y
,
££y z
$num
££{ |
)
££| }
)
££} ~
;
££~ 
topRight
§§ $
=
§§% &
m_Transform
§§' 2
.
§§2 3
TransformPoint
§§3 A
(
§§A B
new
§§B E
Vector3
§§F M
(
§§M N
currentCharInfo
§§N ]
.
§§] ^
topRight
§§^ f
.
§§f g
x
§§g h
,
§§h i
maxAscender
§§j u
,
§§u v
$num
§§w x
)
§§x y
)
§§y z
;
§§z {
DrawRectangle
ßß )
(
ßß) *

bottomLeft
ßß* 4
,
ßß4 5
topLeft
ßß6 =
,
ßß= >
topRight
ßß? G
,
ßßG H
bottomRight
ßßI T
,
ßßT U
	linkColor
ßßV _
)
ßß_ `
;
ßß` a
}
™™ 
}
´´ 
if
ÆÆ 
(
ÆÆ 
isBeginRegion
ÆÆ %
&&
ÆÆ& (
j
ÆÆ) *
==
ÆÆ+ -
linkInfo
ÆÆ. 6
.
ÆÆ6 7
linkTextLength
ÆÆ7 E
-
ÆÆF G
$num
ÆÆH I
)
ÆÆI J
{
ØØ 
isBeginRegion
∞∞ %
=
∞∞& '
false
∞∞( -
;
∞∞- .
topLeft
≤≤ 
=
≤≤  !
m_Transform
≤≤" -
.
≤≤- .
TransformPoint
≤≤. <
(
≤≤< =
new
≤≤= @
Vector3
≤≤A H
(
≤≤H I
topLeft
≤≤I P
.
≤≤P Q
x
≤≤Q R
,
≤≤R S
maxAscender
≤≤T _
,
≤≤_ `
$num
≤≤a b
)
≤≤b c
)
≤≤c d
;
≤≤d e

bottomLeft
≥≥ "
=
≥≥# $
m_Transform
≥≥% 0
.
≥≥0 1
TransformPoint
≥≥1 ?
(
≥≥? @
new
≥≥@ C
Vector3
≥≥D K
(
≥≥K L

bottomLeft
≥≥L V
.
≥≥V W
x
≥≥W X
,
≥≥X Y
minDescender
≥≥Z f
,
≥≥f g
$num
≥≥h i
)
≥≥i j
)
≥≥j k
;
≥≥k l
bottomRight
¥¥ #
=
¥¥$ %
m_Transform
¥¥& 1
.
¥¥1 2
TransformPoint
¥¥2 @
(
¥¥@ A
new
¥¥A D
Vector3
¥¥E L
(
¥¥L M
currentCharInfo
¥¥M \
.
¥¥\ ]
topRight
¥¥] e
.
¥¥e f
x
¥¥f g
,
¥¥g h
minDescender
¥¥i u
,
¥¥u v
$num
¥¥w x
)
¥¥x y
)
¥¥y z
;
¥¥z {
topRight
µµ  
=
µµ! "
m_Transform
µµ# .
.
µµ. /
TransformPoint
µµ/ =
(
µµ= >
new
µµ> A
Vector3
µµB I
(
µµI J
currentCharInfo
µµJ Y
.
µµY Z
topRight
µµZ b
.
µµb c
x
µµc d
,
µµd e
maxAscender
µµf q
,
µµq r
$num
µµs t
)
µµt u
)
µµu v
;
µµv w
DrawRectangle
∏∏ %
(
∏∏% &

bottomLeft
∏∏& 0
,
∏∏0 1
topLeft
∏∏2 9
,
∏∏9 :
topRight
∏∏; C
,
∏∏C D
bottomRight
∏∏E P
,
∏∏P Q
	linkColor
∏∏R [
)
∏∏[ \
;
∏∏\ ]
}
ªª 
else
ΩΩ 
if
ΩΩ 
(
ΩΩ 
isBeginRegion
ΩΩ *
&&
ΩΩ+ -
currentLine
ΩΩ. 9
!=
ΩΩ: <
textInfo
ΩΩ= E
.
ΩΩE F
characterInfo
ΩΩF S
[
ΩΩS T
characterIndex
ΩΩT b
+
ΩΩc d
$num
ΩΩe f
]
ΩΩf g
.
ΩΩg h

lineNumber
ΩΩh r
)
ΩΩr s
{
ææ 
isBeginRegion
øø %
=
øø& '
false
øø( -
;
øø- .
topLeft
¡¡ 
=
¡¡  !
m_Transform
¡¡" -
.
¡¡- .
TransformPoint
¡¡. <
(
¡¡< =
new
¡¡= @
Vector3
¡¡A H
(
¡¡H I
topLeft
¡¡I P
.
¡¡P Q
x
¡¡Q R
,
¡¡R S
maxAscender
¡¡T _
,
¡¡_ `
$num
¡¡a b
)
¡¡b c
)
¡¡c d
;
¡¡d e

bottomLeft
¬¬ "
=
¬¬# $
m_Transform
¬¬% 0
.
¬¬0 1
TransformPoint
¬¬1 ?
(
¬¬? @
new
¬¬@ C
Vector3
¬¬D K
(
¬¬K L

bottomLeft
¬¬L V
.
¬¬V W
x
¬¬W X
,
¬¬X Y
minDescender
¬¬Z f
,
¬¬f g
$num
¬¬h i
)
¬¬i j
)
¬¬j k
;
¬¬k l
bottomRight
√√ #
=
√√$ %
m_Transform
√√& 1
.
√√1 2
TransformPoint
√√2 @
(
√√@ A
new
√√A D
Vector3
√√E L
(
√√L M
currentCharInfo
√√M \
.
√√\ ]
topRight
√√] e
.
√√e f
x
√√f g
,
√√g h
minDescender
√√i u
,
√√u v
$num
√√w x
)
√√x y
)
√√y z
;
√√z {
topRight
ƒƒ  
=
ƒƒ! "
m_Transform
ƒƒ# .
.
ƒƒ. /
TransformPoint
ƒƒ/ =
(
ƒƒ= >
new
ƒƒ> A
Vector3
ƒƒB I
(
ƒƒI J
currentCharInfo
ƒƒJ Y
.
ƒƒY Z
topRight
ƒƒZ b
.
ƒƒb c
x
ƒƒc d
,
ƒƒd e
maxAscender
ƒƒf q
,
ƒƒq r
$num
ƒƒs t
)
ƒƒt u
)
ƒƒu v
;
ƒƒv w
DrawRectangle
«« %
(
««% &

bottomLeft
««& 0
,
««0 1
topLeft
««2 9
,
««9 :
topRight
««; C
,
««C D
bottomRight
««E P
,
««P Q
	linkColor
««R [
)
««[ \
;
««\ ]
maxAscender
…… #
=
……$ %
-
……& '
Mathf
……' ,
.
……, -
Infinity
……- 5
;
……5 6
minDescender
   $
=
  % &
Mathf
  ' ,
.
  , -
Infinity
  - 5
;
  5 6
}
ÃÃ 
}
ÕÕ 
}
–– 
}
—— 	
void
ÿÿ 
DrawLineBounds
ÿÿ 
(
ÿÿ 
)
ÿÿ 
{
ŸŸ 	
int
⁄⁄ 
	lineCount
⁄⁄ 
=
⁄⁄ 

m_TextInfo
⁄⁄ &
.
⁄⁄& '
	lineCount
⁄⁄' 0
;
⁄⁄0 1
for
‹‹ 
(
‹‹ 
int
‹‹ 
i
‹‹ 
=
‹‹ 
$num
‹‹ 
;
‹‹ 
i
‹‹ 
<
‹‹ 
	lineCount
‹‹  )
;
‹‹) *
i
‹‹+ ,
++
‹‹, .
)
‹‹. /
{
›› 
TMP_LineInfo
ﬁﬁ 
lineInfo
ﬁﬁ %
=
ﬁﬁ& '

m_TextInfo
ﬁﬁ( 2
.
ﬁﬁ2 3
lineInfo
ﬁﬁ3 ;
[
ﬁﬁ; <
i
ﬁﬁ< =
]
ﬁﬁ= >
;
ﬁﬁ> ?
TMP_CharacterInfo
ﬂﬂ ! 
firstCharacterInfo
ﬂﬂ" 4
=
ﬂﬂ5 6

m_TextInfo
ﬂﬂ7 A
.
ﬂﬂA B
characterInfo
ﬂﬂB O
[
ﬂﬂO P
lineInfo
ﬂﬂP X
.
ﬂﬂX Y!
firstCharacterIndex
ﬂﬂY l
]
ﬂﬂl m
;
ﬂﬂm n
TMP_CharacterInfo
‡‡ !
lastCharacterInfo
‡‡" 3
=
‡‡4 5

m_TextInfo
‡‡6 @
.
‡‡@ A
characterInfo
‡‡A N
[
‡‡N O
lineInfo
‡‡O W
.
‡‡W X 
lastCharacterIndex
‡‡X j
]
‡‡j k
;
‡‡k l
bool
‚‚ 
isLineVisible
‚‚ "
=
‚‚# $
(
‚‚% &
lineInfo
‚‚& .
.
‚‚. /
characterCount
‚‚/ =
==
‚‚> @
$num
‚‚A B
&&
‚‚C E
(
‚‚F G 
firstCharacterInfo
‚‚G Y
.
‚‚Y Z
	character
‚‚Z c
==
‚‚d f
$num
‚‚g i
||
‚‚j l 
firstCharacterInfo
‚‚m 
.‚‚ Ä
	character‚‚Ä â
==‚‚ä å
$num‚‚ç è
||‚‚ê í"
firstCharacterInfo‚‚ì •
.‚‚• ¶
	character‚‚¶ Ø
==‚‚∞ ≤
$num‚‚≥ π
||‚‚∫ º"
firstCharacterInfo‚‚Ω œ
.‚‚œ –
	character‚‚– Ÿ
==‚‚⁄ ‹
$num‚‚› „
)‚‚„ ‰
)‚‚‰ Â
||‚‚Ê Ë
i
„„& '
>
„„( )
m_TextComponent
„„* 9
.
„„9 :
maxVisibleLines
„„: I
||
„„J L
(
‰‰% &
m_TextComponent
‰‰& 5
.
‰‰5 6
overflowMode
‰‰6 B
==
‰‰C E
TextOverflowModes
‰‰F W
.
‰‰W X
Page
‰‰X \
&&
‰‰] _ 
firstCharacterInfo
‰‰` r
.
‰‰r s

pageNumber
‰‰s }
+
‰‰~ 
$num‰‰Ä Å
!=‰‰Ç Ñ
m_TextComponent‰‰Ö î
.‰‰î ï
pageToDisplay‰‰ï ¢
)‰‰¢ £
?‰‰§ •
false‰‰¶ ´
:‰‰¨ ≠
true‰‰Æ ≤
;‰‰≤ ≥
if
ÊÊ 
(
ÊÊ 
!
ÊÊ 
isLineVisible
ÊÊ "
)
ÊÊ" #
continue
ÊÊ$ ,
;
ÊÊ, -
float
ËË 
lineBottomLeft
ËË $
=
ËË% & 
firstCharacterInfo
ËË' 9
.
ËË9 :

bottomLeft
ËË: D
.
ËËD E
x
ËËE F
;
ËËF G
float
ÈÈ 
lineTopRight
ÈÈ "
=
ÈÈ# $
lastCharacterInfo
ÈÈ% 6
.
ÈÈ6 7
topRight
ÈÈ7 ?
.
ÈÈ? @
x
ÈÈ@ A
;
ÈÈA B
float
ÎÎ 

ascentline
ÎÎ  
=
ÎÎ! "
lineInfo
ÎÎ# +
.
ÎÎ+ ,
ascender
ÎÎ, 4
;
ÎÎ4 5
float
ÏÏ 
baseline
ÏÏ 
=
ÏÏ  
lineInfo
ÏÏ! )
.
ÏÏ) *
baseline
ÏÏ* 2
;
ÏÏ2 3
float
ÌÌ 
descentline
ÌÌ !
=
ÌÌ" #
lineInfo
ÌÌ$ ,
.
ÌÌ, -
	descender
ÌÌ- 6
;
ÌÌ6 7
float
ÔÔ 
dottedLineSize
ÔÔ $
=
ÔÔ% &
$num
ÔÔ' )
;
ÔÔ) *!
DrawDottedRectangle
ÚÚ #
(
ÚÚ# $
m_Transform
ÚÚ$ /
.
ÚÚ/ 0
TransformPoint
ÚÚ0 >
(
ÚÚ> ?
lineInfo
ÚÚ? G
.
ÚÚG H
lineExtents
ÚÚH S
.
ÚÚS T
min
ÚÚT W
)
ÚÚW X
,
ÚÚX Y
m_Transform
ÚÚZ e
.
ÚÚe f
TransformPoint
ÚÚf t
(
ÚÚt u
lineInfo
ÚÚu }
.
ÚÚ} ~
lineExtentsÚÚ~ â
.ÚÚâ ä
maxÚÚä ç
)ÚÚç é
,ÚÚé è
ColorÚÚê ï
.ÚÚï ñ
greenÚÚñ õ
,ÚÚõ ú
$numÚÚù û
)ÚÚû ü
;ÚÚü †
Vector3
ıı 
ascentlineStart
ıı '
=
ıı( )
m_Transform
ıı* 5
.
ıı5 6
TransformPoint
ıı6 D
(
ııD E
new
ııE H
Vector3
ııI P
(
ııP Q
lineBottomLeft
ııQ _
,
ıı_ `

ascentline
ııa k
,
ıık l
$num
ıım n
)
ıın o
)
ııo p
;
ııp q
Vector3
ˆˆ 
ascentlineEnd
ˆˆ %
=
ˆˆ& '
m_Transform
ˆˆ( 3
.
ˆˆ3 4
TransformPoint
ˆˆ4 B
(
ˆˆB C
new
ˆˆC F
Vector3
ˆˆG N
(
ˆˆN O
lineTopRight
ˆˆO [
,
ˆˆ[ \

ascentline
ˆˆ] g
,
ˆˆg h
$num
ˆˆi j
)
ˆˆj k
)
ˆˆk l
;
ˆˆl m
Handles
¯¯ 
.
¯¯ 
color
¯¯ 
=
¯¯ 
Color
¯¯  %
.
¯¯% &
yellow
¯¯& ,
;
¯¯, -
Handles
˘˘ 
.
˘˘ 
DrawDottedLine
˘˘ &
(
˘˘& '
ascentlineStart
˘˘' 6
,
˘˘6 7
ascentlineEnd
˘˘8 E
,
˘˘E F
dottedLineSize
˘˘G U
)
˘˘U V
;
˘˘V W
Vector3
¸¸ 
baseLineStart
¸¸ %
=
¸¸& '
m_Transform
¸¸( 3
.
¸¸3 4
TransformPoint
¸¸4 B
(
¸¸B C
new
¸¸C F
Vector3
¸¸G N
(
¸¸N O
lineBottomLeft
¸¸O ]
,
¸¸] ^
baseline
¸¸_ g
,
¸¸g h
$num
¸¸i j
)
¸¸j k
)
¸¸k l
;
¸¸l m
Vector3
˝˝ 
baseLineEnd
˝˝ #
=
˝˝$ %
m_Transform
˝˝& 1
.
˝˝1 2
TransformPoint
˝˝2 @
(
˝˝@ A
new
˝˝A D
Vector3
˝˝E L
(
˝˝L M
lineTopRight
˝˝M Y
,
˝˝Y Z
baseline
˝˝[ c
,
˝˝c d
$num
˝˝e f
)
˝˝f g
)
˝˝g h
;
˝˝h i
Handles
ˇˇ 
.
ˇˇ 
color
ˇˇ 
=
ˇˇ 
Color
ˇˇ  %
.
ˇˇ% &
yellow
ˇˇ& ,
;
ˇˇ, -
Handles
ÄÄ 
.
ÄÄ 
DrawDottedLine
ÄÄ &
(
ÄÄ& '
baseLineStart
ÄÄ' 4
,
ÄÄ4 5
baseLineEnd
ÄÄ6 A
,
ÄÄA B
dottedLineSize
ÄÄC Q
)
ÄÄQ R
;
ÄÄR S
Vector3
ÉÉ 
descentLineStart
ÉÉ (
=
ÉÉ) *
m_Transform
ÉÉ+ 6
.
ÉÉ6 7
TransformPoint
ÉÉ7 E
(
ÉÉE F
new
ÉÉF I
Vector3
ÉÉJ Q
(
ÉÉQ R
lineBottomLeft
ÉÉR `
,
ÉÉ` a
descentline
ÉÉb m
,
ÉÉm n
$num
ÉÉo p
)
ÉÉp q
)
ÉÉq r
;
ÉÉr s
Vector3
ÑÑ 
descentLineEnd
ÑÑ &
=
ÑÑ' (
m_Transform
ÑÑ) 4
.
ÑÑ4 5
TransformPoint
ÑÑ5 C
(
ÑÑC D
new
ÑÑD G
Vector3
ÑÑH O
(
ÑÑO P
lineTopRight
ÑÑP \
,
ÑÑ\ ]
descentline
ÑÑ^ i
,
ÑÑi j
$num
ÑÑk l
)
ÑÑl m
)
ÑÑm n
;
ÑÑn o
Handles
ÜÜ 
.
ÜÜ 
color
ÜÜ 
=
ÜÜ 
Color
ÜÜ  %
.
ÜÜ% &
yellow
ÜÜ& ,
;
ÜÜ, -
Handles
áá 
.
áá 
DrawDottedLine
áá &
(
áá& '
descentLineStart
áá' 7
,
áá7 8
descentLineEnd
áá9 G
,
ááG H
dottedLineSize
ááI W
)
ááW X
;
ááX Y
if
ää 
(
ää 
m_HandleSize
ää  
<
ää! "
$num
ää# '
)
ää' (
{
ãã 
GUIStyle
åå 
style
åå "
=
åå# $
new
åå% (
GUIStyle
åå) 1
(
åå1 2
)
åå2 3
;
åå3 4
style
çç 
.
çç 
normal
çç  
.
çç  !
	textColor
çç! *
=
çç+ ,
new
çç- 0
Color
çç1 6
(
çç6 7
$num
çç7 ;
,
çç; <
$num
çç= A
,
ççA B
$num
ççC G
,
ççG H
$num
ççI M
)
ççM N
;
ççN O
style
éé 
.
éé 
fontSize
éé "
=
éé# $
$num
éé% '
;
éé' (
style
èè 
.
èè 

fixedWidth
èè $
=
èè% &
$num
èè' *
;
èè* +
style
êê 
.
êê 
fixedHeight
êê %
=
êê& '
$num
êê( *
;
êê* +
Vector3
ëë 
labelPosition
ëë )
;
ëë) *
labelPosition
îî !
=
îî" #
m_Transform
îî$ /
.
îî/ 0
TransformPoint
îî0 >
(
îî> ?
new
îî? B
Vector3
îîC J
(
îîJ K
lineBottomLeft
îîK Y
,
îîY Z

ascentline
îî[ e
,
îîe f
$num
îîg h
)
îîh i
)
îîi j
;
îîj k
style
ïï 
.
ïï 
padding
ïï !
=
ïï" #
new
ïï$ '

RectOffset
ïï( 2
(
ïï2 3
$num
ïï3 4
,
ïï4 5
$num
ïï6 8
,
ïï8 9
$num
ïï: ;
,
ïï; <
$num
ïï= >
)
ïï> ?
;
ïï? @
style
ññ 
.
ññ 
	alignment
ññ #
=
ññ$ %

TextAnchor
ññ& 0
.
ññ0 1
MiddleRight
ññ1 <
;
ññ< =
Handles
óó 
.
óó 
Label
óó !
(
óó! "
labelPosition
óó" /
,
óó/ 0
$str
óó1 >
,
óó> ?
style
óó@ E
)
óóE F
;
óóF G
labelPosition
öö !
=
öö" #
m_Transform
öö$ /
.
öö/ 0
TransformPoint
öö0 >
(
öö> ?
new
öö? B
Vector3
ööC J
(
ööJ K
lineBottomLeft
ööK Y
,
ööY Z
baseline
öö[ c
,
ööc d
$num
ööe f
)
ööf g
)
öög h
;
ööh i
Handles
õõ 
.
õõ 
Label
õõ !
(
õõ! "
labelPosition
õõ" /
,
õõ/ 0
$str
õõ1 <
,
õõ< =
style
õõ> C
)
õõC D
;
õõD E
labelPosition
ûû !
=
ûû" #
m_Transform
ûû$ /
.
ûû/ 0
TransformPoint
ûû0 >
(
ûû> ?
new
ûû? B
Vector3
ûûC J
(
ûûJ K
lineBottomLeft
ûûK Y
,
ûûY Z
descentline
ûû[ f
,
ûûf g
$num
ûûh i
)
ûûi j
)
ûûj k
;
ûûk l
Handles
üü 
.
üü 
Label
üü !
(
üü! "
labelPosition
üü" /
,
üü/ 0
$str
üü1 ?
,
üü? @
style
üüA F
)
üüF G
;
üüG H
}
†† 
}
°° 
}
¢¢ 	
void
®® 

DrawBounds
®® 
(
®® 
)
®® 
{
©© 	
Bounds
™™ 

meshBounds
™™ 
=
™™ 
m_TextComponent
™™  /
.
™™/ 0
bounds
™™0 6
;
™™6 7
Vector3
≠≠ 

bottomLeft
≠≠ 
=
≠≠  
m_TextComponent
≠≠! 0
.
≠≠0 1
	transform
≠≠1 :
.
≠≠: ;
position
≠≠; C
+
≠≠D E

meshBounds
≠≠F P
.
≠≠P Q
min
≠≠Q T
;
≠≠T U
Vector3
ÆÆ 
topRight
ÆÆ 
=
ÆÆ 
m_TextComponent
ÆÆ .
.
ÆÆ. /
	transform
ÆÆ/ 8
.
ÆÆ8 9
position
ÆÆ9 A
+
ÆÆB C

meshBounds
ÆÆD N
.
ÆÆN O
max
ÆÆO R
;
ÆÆR S
DrawRectangle
∞∞ 
(
∞∞ 

bottomLeft
∞∞ $
,
∞∞$ %
topRight
∞∞& .
,
∞∞. /
new
∞∞0 3
Color
∞∞4 9
(
∞∞9 :
$num
∞∞: ;
,
∞∞; <
$num
∞∞= A
,
∞∞A B
$num
∞∞C D
)
∞∞D E
)
∞∞E F
;
∞∞F G
}
±± 	
void
¥¥ 
DrawTextBounds
¥¥ 
(
¥¥ 
)
¥¥ 
{
µµ 	
Bounds
∂∂ 

textBounds
∂∂ 
=
∂∂ 
m_TextComponent
∂∂  /
.
∂∂/ 0

textBounds
∂∂0 :
;
∂∂: ;
Vector3
∏∏ 

bottomLeft
∏∏ 
=
∏∏  
m_TextComponent
∏∏! 0
.
∏∏0 1
	transform
∏∏1 :
.
∏∏: ;
position
∏∏; C
+
∏∏D E
(
∏∏F G

textBounds
∏∏G Q
.
∏∏Q R
center
∏∏R X
-
∏∏Y Z

textBounds
∏∏[ e
.
∏∏e f
extents
∏∏f m
)
∏∏m n
;
∏∏n o
Vector3
ππ 
topRight
ππ 
=
ππ 
m_TextComponent
ππ .
.
ππ. /
	transform
ππ/ 8
.
ππ8 9
position
ππ9 A
+
ππB C
(
ππD E

textBounds
ππE O
.
ππO P
center
ππP V
+
ππW X

textBounds
ππY c
.
ππc d
extents
ππd k
)
ππk l
;
ππl m
DrawRectangle
ªª 
(
ªª 

bottomLeft
ªª $
,
ªª$ %
topRight
ªª& .
,
ªª. /
new
ªª0 3
Color
ªª4 9
(
ªª9 :
$num
ªª: <
,
ªª< =
$num
ªª> B
,
ªªB C
$num
ªªD H
)
ªªH I
)
ªªI J
;
ªªJ K
}
ºº 	
void
¿¿ 
DrawRectangle
¿¿ 
(
¿¿ 
Vector3
¿¿ "
BL
¿¿# %
,
¿¿% &
Vector3
¿¿' .
TR
¿¿/ 1
,
¿¿1 2
Color
¿¿3 8
color
¿¿9 >
)
¿¿> ?
{
¡¡ 	
Gizmos
¬¬ 
.
¬¬ 
color
¬¬ 
=
¬¬ 
color
¬¬  
;
¬¬  !
Gizmos
ƒƒ 
.
ƒƒ 
DrawLine
ƒƒ 
(
ƒƒ 
new
ƒƒ 
Vector3
ƒƒ  '
(
ƒƒ' (
BL
ƒƒ( *
.
ƒƒ* +
x
ƒƒ+ ,
,
ƒƒ, -
BL
ƒƒ. 0
.
ƒƒ0 1
y
ƒƒ1 2
,
ƒƒ2 3
$num
ƒƒ4 5
)
ƒƒ5 6
,
ƒƒ6 7
new
ƒƒ8 ;
Vector3
ƒƒ< C
(
ƒƒC D
BL
ƒƒD F
.
ƒƒF G
x
ƒƒG H
,
ƒƒH I
TR
ƒƒJ L
.
ƒƒL M
y
ƒƒM N
,
ƒƒN O
$num
ƒƒP Q
)
ƒƒQ R
)
ƒƒR S
;
ƒƒS T
Gizmos
≈≈ 
.
≈≈ 
DrawLine
≈≈ 
(
≈≈ 
new
≈≈ 
Vector3
≈≈  '
(
≈≈' (
BL
≈≈( *
.
≈≈* +
x
≈≈+ ,
,
≈≈, -
TR
≈≈. 0
.
≈≈0 1
y
≈≈1 2
,
≈≈2 3
$num
≈≈4 5
)
≈≈5 6
,
≈≈6 7
new
≈≈8 ;
Vector3
≈≈< C
(
≈≈C D
TR
≈≈D F
.
≈≈F G
x
≈≈G H
,
≈≈H I
TR
≈≈J L
.
≈≈L M
y
≈≈M N
,
≈≈N O
$num
≈≈P Q
)
≈≈Q R
)
≈≈R S
;
≈≈S T
Gizmos
∆∆ 
.
∆∆ 
DrawLine
∆∆ 
(
∆∆ 
new
∆∆ 
Vector3
∆∆  '
(
∆∆' (
TR
∆∆( *
.
∆∆* +
x
∆∆+ ,
,
∆∆, -
TR
∆∆. 0
.
∆∆0 1
y
∆∆1 2
,
∆∆2 3
$num
∆∆4 5
)
∆∆5 6
,
∆∆6 7
new
∆∆8 ;
Vector3
∆∆< C
(
∆∆C D
TR
∆∆D F
.
∆∆F G
x
∆∆G H
,
∆∆H I
BL
∆∆J L
.
∆∆L M
y
∆∆M N
,
∆∆N O
$num
∆∆P Q
)
∆∆Q R
)
∆∆R S
;
∆∆S T
Gizmos
«« 
.
«« 
DrawLine
«« 
(
«« 
new
«« 
Vector3
««  '
(
««' (
TR
««( *
.
««* +
x
««+ ,
,
««, -
BL
««. 0
.
««0 1
y
««1 2
,
««2 3
$num
««4 5
)
««5 6
,
««6 7
new
««8 ;
Vector3
««< C
(
««C D
BL
««D F
.
««F G
x
««G H
,
««H I
BL
««J L
.
««L M
y
««M N
,
««N O
$num
««P Q
)
««Q R
)
««R S
;
««S T
}
»» 	
void
   !
DrawDottedRectangle
    
(
    !
Vector3
  ! (

bottomLeft
  ) 3
,
  3 4
Vector3
  5 <
topRight
  = E
,
  E F
Color
  G L
color
  M R
,
  R S
float
  T Y
size
  Z ^
=
  _ `
$num
  a e
)
  e f
{
ÀÀ 	
Handles
ÃÃ 
.
ÃÃ 
color
ÃÃ 
=
ÃÃ 
color
ÃÃ !
;
ÃÃ! "
Handles
ÕÕ 
.
ÕÕ 
DrawDottedLine
ÕÕ "
(
ÕÕ" #

bottomLeft
ÕÕ# -
,
ÕÕ- .
new
ÕÕ/ 2
Vector3
ÕÕ3 :
(
ÕÕ: ;

bottomLeft
ÕÕ; E
.
ÕÕE F
x
ÕÕF G
,
ÕÕG H
topRight
ÕÕI Q
.
ÕÕQ R
y
ÕÕR S
,
ÕÕS T

bottomLeft
ÕÕU _
.
ÕÕ_ `
z
ÕÕ` a
)
ÕÕa b
,
ÕÕb c
size
ÕÕd h
)
ÕÕh i
;
ÕÕi j
Handles
ŒŒ 
.
ŒŒ 
DrawDottedLine
ŒŒ "
(
ŒŒ" #
new
ŒŒ# &
Vector3
ŒŒ' .
(
ŒŒ. /

bottomLeft
ŒŒ/ 9
.
ŒŒ9 :
x
ŒŒ: ;
,
ŒŒ; <
topRight
ŒŒ= E
.
ŒŒE F
y
ŒŒF G
,
ŒŒG H

bottomLeft
ŒŒI S
.
ŒŒS T
z
ŒŒT U
)
ŒŒU V
,
ŒŒV W
topRight
ŒŒX `
,
ŒŒ` a
size
ŒŒb f
)
ŒŒf g
;
ŒŒg h
Handles
œœ 
.
œœ 
DrawDottedLine
œœ "
(
œœ" #
topRight
œœ# +
,
œœ+ ,
new
œœ- 0
Vector3
œœ1 8
(
œœ8 9
topRight
œœ9 A
.
œœA B
x
œœB C
,
œœC D

bottomLeft
œœE O
.
œœO P
y
œœP Q
,
œœQ R

bottomLeft
œœS ]
.
œœ] ^
z
œœ^ _
)
œœ_ `
,
œœ` a
size
œœb f
)
œœf g
;
œœg h
Handles
–– 
.
–– 
DrawDottedLine
–– "
(
––" #
new
––# &
Vector3
––' .
(
––. /
topRight
––/ 7
.
––7 8
x
––8 9
,
––9 :

bottomLeft
––; E
.
––E F
y
––F G
,
––G H

bottomLeft
––I S
.
––S T
z
––T U
)
––U V
,
––V W

bottomLeft
––X b
,
––b c
size
––d h
)
––h i
;
––i j
}
—— 	
void
””  
DrawSolidRectangle
”” 
(
””  
Vector3
””  '

bottomLeft
””( 2
,
””2 3
Vector3
””4 ;
topRight
””< D
,
””D E
Color
””F K
color
””L Q
,
””Q R
float
””S X
size
””Y ]
=
””^ _
$num
””` d
)
””d e
{
‘‘ 	
Handles
’’ 
.
’’ 
color
’’ 
=
’’ 
color
’’ !
;
’’! "
Rect
÷÷ 
rect
÷÷ 
=
÷÷ 
new
÷÷ 
Rect
÷÷  
(
÷÷  !

bottomLeft
÷÷! +
,
÷÷+ ,
topRight
÷÷- 5
-
÷÷6 7

bottomLeft
÷÷8 B
)
÷÷B C
;
÷÷C D
Handles
◊◊ 
.
◊◊ +
DrawSolidRectangleWithOutline
◊◊ 1
(
◊◊1 2
rect
◊◊2 6
,
◊◊6 7
color
◊◊8 =
,
◊◊= >
Color
◊◊? D
.
◊◊D E
black
◊◊E J
)
◊◊J K
;
◊◊K L
}
ÿÿ 	
void
⁄⁄ 

DrawSquare
⁄⁄ 
(
⁄⁄ 
Vector3
⁄⁄ 
position
⁄⁄  (
,
⁄⁄( )
float
⁄⁄* /
size
⁄⁄0 4
,
⁄⁄4 5
Color
⁄⁄6 ;
color
⁄⁄< A
)
⁄⁄A B
{
€€ 	
Handles
‹‹ 
.
‹‹ 
color
‹‹ 
=
‹‹ 
color
‹‹ !
;
‹‹! "
Vector3
›› 

bottomLeft
›› 
=
››  
new
››! $
Vector3
››% ,
(
››, -
position
››- 5
.
››5 6
x
››6 7
-
››8 9
size
››: >
,
››> ?
position
››@ H
.
››H I
y
››I J
-
››K L
size
››M Q
,
››Q R
position
››S [
.
››[ \
z
››\ ]
)
››] ^
;
››^ _
Vector3
ﬁﬁ 
topLeft
ﬁﬁ 
=
ﬁﬁ 
new
ﬁﬁ !
Vector3
ﬁﬁ" )
(
ﬁﬁ) *
position
ﬁﬁ* 2
.
ﬁﬁ2 3
x
ﬁﬁ3 4
-
ﬁﬁ5 6
size
ﬁﬁ7 ;
,
ﬁﬁ; <
position
ﬁﬁ= E
.
ﬁﬁE F
y
ﬁﬁF G
+
ﬁﬁH I
size
ﬁﬁJ N
,
ﬁﬁN O
position
ﬁﬁP X
.
ﬁﬁX Y
z
ﬁﬁY Z
)
ﬁﬁZ [
;
ﬁﬁ[ \
Vector3
ﬂﬂ 
topRight
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ "
Vector3
ﬂﬂ# *
(
ﬂﬂ* +
position
ﬂﬂ+ 3
.
ﬂﬂ3 4
x
ﬂﬂ4 5
+
ﬂﬂ6 7
size
ﬂﬂ8 <
,
ﬂﬂ< =
position
ﬂﬂ> F
.
ﬂﬂF G
y
ﬂﬂG H
+
ﬂﬂI J
size
ﬂﬂK O
,
ﬂﬂO P
position
ﬂﬂQ Y
.
ﬂﬂY Z
z
ﬂﬂZ [
)
ﬂﬂ[ \
;
ﬂﬂ\ ]
Vector3
‡‡ 
bottomRight
‡‡ 
=
‡‡  !
new
‡‡" %
Vector3
‡‡& -
(
‡‡- .
position
‡‡. 6
.
‡‡6 7
x
‡‡7 8
+
‡‡9 :
size
‡‡; ?
,
‡‡? @
position
‡‡A I
.
‡‡I J
y
‡‡J K
-
‡‡L M
size
‡‡N R
,
‡‡R S
position
‡‡T \
.
‡‡\ ]
z
‡‡] ^
)
‡‡^ _
;
‡‡_ `
Handles
‚‚ 
.
‚‚ 
DrawLine
‚‚ 
(
‚‚ 

bottomLeft
‚‚ '
,
‚‚' (
topLeft
‚‚) 0
)
‚‚0 1
;
‚‚1 2
Handles
„„ 
.
„„ 
DrawLine
„„ 
(
„„ 
topLeft
„„ $
,
„„$ %
topRight
„„& .
)
„„. /
;
„„/ 0
Handles
‰‰ 
.
‰‰ 
DrawLine
‰‰ 
(
‰‰ 
topRight
‰‰ %
,
‰‰% &
bottomRight
‰‰' 2
)
‰‰2 3
;
‰‰3 4
Handles
ÂÂ 
.
ÂÂ 
DrawLine
ÂÂ 
(
ÂÂ 
bottomRight
ÂÂ (
,
ÂÂ( )

bottomLeft
ÂÂ* 4
)
ÂÂ4 5
;
ÂÂ5 6
}
ÊÊ 	
void
ËË 
DrawCrosshair
ËË 
(
ËË 
Vector3
ËË "
position
ËË# +
,
ËË+ ,
float
ËË- 2
size
ËË3 7
,
ËË7 8
Color
ËË9 >
color
ËË? D
)
ËËD E
{
ÈÈ 	
Handles
ÍÍ 
.
ÍÍ 
color
ÍÍ 
=
ÍÍ 
color
ÍÍ !
;
ÍÍ! "
Handles
ÏÏ 
.
ÏÏ 
DrawLine
ÏÏ 
(
ÏÏ 
new
ÏÏ  
Vector3
ÏÏ! (
(
ÏÏ( )
position
ÏÏ) 1
.
ÏÏ1 2
x
ÏÏ2 3
-
ÏÏ4 5
size
ÏÏ6 :
,
ÏÏ: ;
position
ÏÏ< D
.
ÏÏD E
y
ÏÏE F
,
ÏÏF G
position
ÏÏH P
.
ÏÏP Q
z
ÏÏQ R
)
ÏÏR S
,
ÏÏS T
new
ÏÏU X
Vector3
ÏÏY `
(
ÏÏ` a
position
ÏÏa i
.
ÏÏi j
x
ÏÏj k
+
ÏÏl m
size
ÏÏn r
,
ÏÏr s
position
ÏÏt |
.
ÏÏ| }
y
ÏÏ} ~
,
ÏÏ~ 
positionÏÏÄ à
.ÏÏà â
zÏÏâ ä
)ÏÏä ã
)ÏÏã å
;ÏÏå ç
Handles
ÌÌ 
.
ÌÌ 
DrawLine
ÌÌ 
(
ÌÌ 
new
ÌÌ  
Vector3
ÌÌ! (
(
ÌÌ( )
position
ÌÌ) 1
.
ÌÌ1 2
x
ÌÌ2 3
,
ÌÌ3 4
position
ÌÌ5 =
.
ÌÌ= >
y
ÌÌ> ?
-
ÌÌ@ A
size
ÌÌB F
,
ÌÌF G
position
ÌÌH P
.
ÌÌP Q
z
ÌÌQ R
)
ÌÌR S
,
ÌÌS T
new
ÌÌU X
Vector3
ÌÌY `
(
ÌÌ` a
position
ÌÌa i
.
ÌÌi j
x
ÌÌj k
,
ÌÌk l
position
ÌÌm u
.
ÌÌu v
y
ÌÌv w
+
ÌÌx y
size
ÌÌz ~
,
ÌÌ~ 
positionÌÌÄ à
.ÌÌà â
zÌÌâ ä
)ÌÌä ã
)ÌÌã å
;ÌÌå ç
}
ÓÓ 	
void
ÚÚ 
DrawRectangle
ÚÚ 
(
ÚÚ 
Vector3
ÚÚ "
bl
ÚÚ# %
,
ÚÚ% &
Vector3
ÚÚ' .
tl
ÚÚ/ 1
,
ÚÚ1 2
Vector3
ÚÚ3 :
tr
ÚÚ; =
,
ÚÚ= >
Vector3
ÚÚ? F
br
ÚÚG I
,
ÚÚI J
Color
ÚÚK P
color
ÚÚQ V
)
ÚÚV W
{
ÛÛ 	
Gizmos
ÙÙ 
.
ÙÙ 
color
ÙÙ 
=
ÙÙ 
color
ÙÙ  
;
ÙÙ  !
Gizmos
ˆˆ 
.
ˆˆ 
DrawLine
ˆˆ 
(
ˆˆ 
bl
ˆˆ 
,
ˆˆ 
tl
ˆˆ  "
)
ˆˆ" #
;
ˆˆ# $
Gizmos
˜˜ 
.
˜˜ 
DrawLine
˜˜ 
(
˜˜ 
tl
˜˜ 
,
˜˜ 
tr
˜˜  "
)
˜˜" #
;
˜˜# $
Gizmos
¯¯ 
.
¯¯ 
DrawLine
¯¯ 
(
¯¯ 
tr
¯¯ 
,
¯¯ 
br
¯¯  "
)
¯¯" #
;
¯¯# $
Gizmos
˘˘ 
.
˘˘ 
DrawLine
˘˘ 
(
˘˘ 
br
˘˘ 
,
˘˘ 
bl
˘˘  "
)
˘˘" #
;
˘˘# $
}
˙˙ 	
void
˛˛ !
DrawDottedRectangle
˛˛  
(
˛˛  !
Vector3
˛˛! (
bl
˛˛) +
,
˛˛+ ,
Vector3
˛˛- 4
tl
˛˛5 7
,
˛˛7 8
Vector3
˛˛9 @
tr
˛˛A C
,
˛˛C D
Vector3
˛˛E L
br
˛˛M O
,
˛˛O P
Color
˛˛Q V
color
˛˛W \
)
˛˛\ ]
{
ˇˇ 	
var
ÄÄ 
cam
ÄÄ 
=
ÄÄ 
Camera
ÄÄ 
.
ÄÄ 
current
ÄÄ $
;
ÄÄ$ %
float
ÅÅ 

dotSpacing
ÅÅ 
=
ÅÅ 
(
ÅÅ  
cam
ÅÅ  #
.
ÅÅ# $ 
WorldToScreenPoint
ÅÅ$ 6
(
ÅÅ6 7
br
ÅÅ7 9
)
ÅÅ9 :
.
ÅÅ: ;
x
ÅÅ; <
-
ÅÅ= >
cam
ÅÅ? B
.
ÅÅB C 
WorldToScreenPoint
ÅÅC U
(
ÅÅU V
bl
ÅÅV X
)
ÅÅX Y
.
ÅÅY Z
x
ÅÅZ [
)
ÅÅ[ \
/
ÅÅ] ^
$num
ÅÅ_ b
;
ÅÅb c
UnityEditor
ÇÇ 
.
ÇÇ 
Handles
ÇÇ 
.
ÇÇ  
color
ÇÇ  %
=
ÇÇ& '
color
ÇÇ( -
;
ÇÇ- .
UnityEditor
ÑÑ 
.
ÑÑ 
Handles
ÑÑ 
.
ÑÑ  
DrawDottedLine
ÑÑ  .
(
ÑÑ. /
bl
ÑÑ/ 1
,
ÑÑ1 2
tl
ÑÑ3 5
,
ÑÑ5 6

dotSpacing
ÑÑ7 A
)
ÑÑA B
;
ÑÑB C
UnityEditor
ÖÖ 
.
ÖÖ 
Handles
ÖÖ 
.
ÖÖ  
DrawDottedLine
ÖÖ  .
(
ÖÖ. /
tl
ÖÖ/ 1
,
ÖÖ1 2
tr
ÖÖ3 5
,
ÖÖ5 6

dotSpacing
ÖÖ7 A
)
ÖÖA B
;
ÖÖB C
UnityEditor
ÜÜ 
.
ÜÜ 
Handles
ÜÜ 
.
ÜÜ  
DrawDottedLine
ÜÜ  .
(
ÜÜ. /
tr
ÜÜ/ 1
,
ÜÜ1 2
br
ÜÜ3 5
,
ÜÜ5 6

dotSpacing
ÜÜ7 A
)
ÜÜA B
;
ÜÜB C
UnityEditor
áá 
.
áá 
Handles
áá 
.
áá  
DrawDottedLine
áá  .
(
áá. /
br
áá/ 1
,
áá1 2
bl
áá3 5
,
áá5 6

dotSpacing
áá7 A
)
ááA B
;
ááB C
}
àà 	
}
ää 
}ãã ·>
?F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\QuizManager.cs
public		 
class		 
QuizManager		 
:		 
MonoBehaviour		 (
{ 
public 

static 
QuizManager 
Instance &
{' (
get) ,
;, -
private. 5
set6 9
;9 :
}; <
public 

int 
correct 
; 
public 

int 
	incorrect 
; 
public 

int 
index 
; 
public 

string 
[ 
] 
[ 
] 
wrongAnswerList %
;% &
public 

string 
[ 
] 
rightAnswerList #
;# $
public 

string 
[ 
] 
questionList  
;  !
void 
Start	 
( 
) 
{ 
index 
= 
$num 
; 
correct 
= 
$num 
; 
	incorrect 
= 
$num 
; 
FileReading 
fr 
= 

GameObject #
.# $
Find$ (
(( )
$str) 7
)7 8
.8 9
GetComponent9 E
<E F
FileReadingF Q
>Q R
(R S
)S T
;T U
QuestionDisplay 
q 
= 

GameObject &
.& '
Find' +
(+ ,
$str, =
)= >
.> ?
GetComponent? K
<K L
QuestionDisplayL [
>[ \
(\ ]
)] ^
;^ _
questionsAndAnswers 
( 
fr 
) 
;  
q 	
.	 

display
 
( 
returnQuest 
( 
) 
)  
;  !
} 
void!! 
	OnDisable!!	 
(!! 
)!! 
{"" 
PlayerPrefs## 
.## 
SetInt## 
(## 
$str## $
,##$ %
correct##& -
)##- .
;##. /
PlayerPrefs$$ 
.$$ 
SetInt$$ 
($$ 
$str$$ &
,$$& '
	incorrect$$( 1
)$$1 2
;$$2 3
}%% 
void'' 
OnEnable''	 
('' 
)'' 
{(( 
correct)) 
=)) 
PlayerPrefs)) 
.)) 
GetInt)) $
())$ %
$str))% .
))). /
;))/ 0
	incorrect** 
=** 
PlayerPrefs** 
.**  
GetInt**  &
(**& '
$str**' 2
)**2 3
;**3 4
}++ 
public-- 

void-- 
questionsAndAnswers-- #
(--# $
FileReading--$ /
fr--0 2
)--2 3
{.. 
questionList// 
=// 
fr// 
.// 
getQuestionArr// (
(//( )
)//) *
;//* +
rightAnswerList00 
=00 
fr00 
.00 
getRightAnswerArr00 .
(00. /
)00/ 0
;000 1
wrongAnswerList11 
=11 
fr11 
.11 !
getWrongAnswerListArr11 2
(112 3
)113 4
;114 5
}22 
public44 

string44 
returnQuest44 
(44 
)44 
{55 
string66 
quest66 
=66 
questionList66 #
[66# $
index66$ )
]66) *
;66* +
return77 
quest77 
;77 
}88 
public:: 

string:: 
returnWrong1:: 
(:: 
)::  
{;; 
string<< 
wrong1<< 
=<< 
wrongAnswerList<< '
[<<' (
index<<( -
]<<- .
[<<. /
$num<</ 0
]<<0 1
;<<1 2
return== 
wrong1== 
;== 
}>> 
public@@ 

string@@ 
returnWrong2@@ 
(@@ 
)@@  
{AA 
stringBB 
wrong2BB 
=BB 
wrongAnswerListBB '
[BB' (
indexBB( -
]BB- .
[BB. /
$numBB/ 0
]BB0 1
;BB1 2
returnCC 
wrong2CC 
;CC 
}DD 
publicFF 

stringFF 
returnWrong3FF 
(FF 
)FF  
{GG 
stringHH 
wrong3HH 
=HH 
wrongAnswerListHH '
[HH' (
indexHH( -
]HH- .
[HH. /
$numHH/ 0
]HH0 1
;HH1 2
returnII 
wrong3II 
;II 
}JJ 
publicLL 

stringLL 
	returnAnsLL 
(LL 
)LL 
{MM 
stringNN 
rightNN 
=NN 
rightAnswerListNN &
[NN& '
indexNN' ,
]NN, -
;NN- .
returnOO 
rightOO 
;OO 
}PP 
publicQQ 

voidQQ 
incrementDecrementQQ "
(QQ" #
boolQQ# '
resultQQ( .
)QQ. /
{RR 
ifSS 

(SS 
resultSS 
)SS 
{TT 	
correctUU 
++UU 
;UU 
}WW 	
elseXX 
{YY 	
	incorrectZZ 
++ZZ 
;ZZ 
}\\ 	
if__ 

(__ 
index__ 
<__ 
questionList__  
.__  !
Length__! '
-__' (
$num__( )
)__) *
{`` 	
	refresheraa 
(aa 
)aa 
;aa 
}bb 	
elsecc 
{dd 	
SceneManageree 
.ee 
	LoadSceneee "
(ee" #
$numee# $
)ee$ %
;ee% &
}ff 	
}gg 
publicii 

intii 

getCorrectii 
(ii 
)ii 
{jj 
returnkk 
correctkk 
;kk 
}ll 
publicnn 

intnn 
getIncorrectnn 
(nn 
)nn 
{oo 
returnpp 
	incorrectpp 
;pp 
}qq 
publicss 

voidss 
	refresherss 
(ss 
)ss 
{tt 
indexvv 
++vv 
;vv 

Randomizerww 
resww 
=ww 

GameObjectww #
.ww# $
Findww$ (
(ww( )
$strww) 7
)ww7 8
.ww8 9
GetComponentww9 E
<wwE F

RandomizerwwF P
>wwP Q
(wwQ R
)wwR S
;wwS T
resxx 
.xx 
refreshxx 
(xx 
)xx 
;xx 
Timeryy 
res2yy 
=yy 

GameObjectyy 
.yy  
Findyy  $
(yy$ %
$stryy% ,
)yy, -
.yy- .
GetComponentyy. :
<yy: ;
Timeryy; @
>yy@ A
(yyA B
)yyB C
;yyC D
res2zz 
.zz 
refreshzz 
(zz 
)zz 
;zz 
QuestionDisplay{{ 
q{{ 
={{ 

GameObject{{ &
.{{& '
Find{{' +
({{+ ,
$str{{, =
){{= >
.{{> ?
GetComponent{{? K
<{{K L
QuestionDisplay{{L [
>{{[ \
({{\ ]
){{] ^
;{{^ _
q|| 	
.||	 

display||
 
(|| 
returnQuest|| 
(|| 
)|| 
)||  
;||  !
}}} 
}ÄÄ ﬂT
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SliderConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
SliderConfig 
: 
MonoBehaviour *
,* +
IPointerDownHandler, ?
,? @
IPointerUpHandlerA R
{ 
public 
bool	 
textHasDecimal 
; 
public 
bool	 
hasPopup 
= 
true 
; 
public 
float	 
animationDuration  
=! "
$num# '
;' (
public 
RectTransform	 
handle 
; 
public 
RectTransform	 
popup 
; 
public 
Text	 
	popupText 
; 
Slider 
slider	 
; 
float 
currentPopupScale 
; 
float 
currentHandleScale 
; 
float   

currentPos   
;   
bool"" 

isSelected"" 
;"" 
int## 
state## 
;## 
float%% 
animStartTime%% 
;%% 
float&& 
animDeltaTime&& 
;&& 
Vector3(( 	
tempVec3((
 
;(( 
void** 
Start** 
(** 
)** 
{++ 
slider,, 	
=,,
 

gameObject,, 
.,, 
GetComponent,, #
<,,# $
Slider,,$ *
>,,* +
(,,, -
),,- .
;,,. /
popup.. 
... 	

gameObject..	 
... 
GetComponent..  
<..  !
Image..! &
>..& '
(..( )
)..) *
...* +
color..+ 0
=..1 2
handle..3 9
...9 :

gameObject..: D
...D E
GetComponent..E Q
<..Q R
Image..R W
>..W X
(..Y Z
)..Z [
...[ \
color..\ a
;..a b

UpdateText00 
(00 
)00 
;00 
}11 
void33 
Update33 
(33 
)33 
{44 
if55 
(55 
state55 
==55 
$num55 
)55 
{66 
animDeltaTime77 
=77 
Time77 
.77  
realtimeSinceStartup77 -
-77. /
animStartTime770 =
;77= >
if99 
(99 
animDeltaTime99 
<=99 
animationDuration99 *
)99* +
{:: 
tempVec3;; 
=;; 
handle;; 
.;; 

localScale;; !
;;;! "
tempVec3<< 
.<< 
x<< 
=<< 
Anim<< 
.<< 
Quint<< 
.<< 
Out<<  
(<<  !
currentHandleScale<<! 3
,<<3 4
$num<<5 7
,<<7 8
animDeltaTime<<9 F
,<<F G
animationDuration<<H Y
)<<Y Z
;<<Z [
tempVec3== 
.== 
y== 
=== 
tempVec3== 
.== 
x== 
;== 
tempVec3>> 
.>> 
z>> 
=>> 
tempVec3>> 
.>> 
x>> 
;>> 
handle?? 
.?? 

localScale?? 
=?? 
tempVec3?? !
;??! "
ifAA 
(AA 	
hasPopupAA	 
)AA 
{BB 
tempVec3CC 
=CC 
popupCC 
.CC 

localScaleCC !
;CC! "
tempVec3DD 
.DD 
xDD 
=DD 
AnimDD 
.DD 
QuintDD 
.DD 
OutDD !
(DD! "
currentPopupScaleDD" 3
,DD3 4
$numDD5 7
,DD7 8
animDeltaTimeDD9 F
,DDF G
animationDurationDDH Y
)DDY Z
;DDZ [
tempVec3EE 
.EE 
yEE 
=EE 
tempVec3EE 
.EE 
xEE 
;EE 
tempVec3FF 
.FF 
zFF 
=FF 
tempVec3FF 
.FF 
xFF 
;FF 
popupGG 
.GG 

localScaleGG 
=GG 
tempVec3GG !
;GG! "
tempVec3II 
=II 
popupII 
.II 
localPositionII $
;II$ %
tempVec3JJ 
.JJ 
yJJ 
=JJ 
AnimJJ 
.JJ 
QuintJJ 
.JJ 
OutJJ !
(JJ! "

currentPosJJ" ,
,JJ, -
$numJJ. 1
,JJ1 2
animDeltaTimeJJ3 @
,JJ@ A
animationDurationJJB S
)JJS T
;JJT U
popupKK 
.KK 
localPositionKK 
=KK 
tempVec3KK $
;KK$ %
}LL 
}MM 
elseNN 
{OO 
statePP 

=PP 
$numPP 
;PP 
}QQ 
}RR 
elseSS 
ifSS 

(SS 
stateSS 
==SS 
$numSS 
)SS 
{TT 
animDeltaTimeUU 
=UU 
TimeUU 
.UU  
realtimeSinceStartupUU -
-UU. /
animStartTimeUU0 =
;UU= >
ifWW 
(WW 
animDeltaTimeWW 
<=WW 
animationDurationWW *
)WW* +
{XX 
tempVec3YY 
=YY 
handleYY 
.YY 

localScaleYY !
;YY! "
tempVec3ZZ 
.ZZ 
xZZ 
=ZZ 
AnimZZ 
.ZZ 
QuintZZ 
.ZZ 
OutZZ  
(ZZ  !
currentHandleScaleZZ! 3
,ZZ3 4
$numZZ5 9
,ZZ9 :
animDeltaTimeZZ; H
,ZZH I
animationDurationZZJ [
)ZZ[ \
;ZZ\ ]
tempVec3[[ 
.[[ 
y[[ 
=[[ 
tempVec3[[ 
.[[ 
x[[ 
;[[ 
tempVec3\\ 
.\\ 
z\\ 
=\\ 
tempVec3\\ 
.\\ 
x\\ 
;\\ 
handle]] 
.]] 

localScale]] 
=]] 
tempVec3]] !
;]]! "
if__ 
(__ 	
hasPopup__	 
)__ 
{`` 
tempVec3aa 
=aa 
popupaa 
.aa 

localScaleaa !
;aa! "
tempVec3bb 
.bb 
xbb 
=bb 
Animbb 
.bb 
Quintbb 
.bb 
Outbb !
(bb! "
currentPopupScalebb" 3
,bb3 4
$numbb5 7
,bb7 8
animDeltaTimebb9 F
,bbF G
animationDurationbbH Y
)bbY Z
;bbZ [
tempVec3cc 
.cc 
ycc 
=cc 
tempVec3cc 
.cc 
xcc 
;cc 
tempVec3dd 
.dd 
zdd 
=dd 
tempVec3dd 
.dd 
xdd 
;dd 
popupee 
.ee 

localScaleee 
=ee 
tempVec3ee !
;ee! "
tempVec3gg 
=gg 
popupgg 
.gg 
localPositiongg $
;gg$ %
tempVec3hh 
.hh 
yhh 
=hh 
Animhh 
.hh 
Quinthh 
.hh 
Outhh !
(hh! "

currentPoshh" ,
,hh, -
$numhh. 0
,hh0 1
animDeltaTimehh2 ?
,hh? @
animationDurationhhA R
)hhR S
;hhS T
popupii 
.ii 
localPositionii 
=ii 
tempVec3ii $
;ii$ %
}jj 
}kk 
elsell 
{mm 
statenn 

=nn 
$numnn 
;nn 
}oo 
}pp 
}qq 
publicss 
voidss	 

UpdateTextss 
(ss 
)ss 
{tt 
ifuu 
(uu 
textHasDecimaluu 
)uu 
	popupTextvv 
.vv 
textvv 
=vv 
slidervv 
.vv 
valuevv !
.vv! "
ToStringvv" *
(vv* +
$strvv+ 0
)vv0 1
;vv1 2
elseww 
	popupTextxx 
.xx 
textxx 
=xx 
sliderxx 
.xx 
valuexx !
.xx! "
ToStringxx" *
(xx* +
$strxx+ .
)xx. /
;xx/ 0
}yy 
public{{ 
void{{	 
OnPointerDown{{ 
({{ 
PointerEventData{{ -
data{{. 2
){{2 3
{|| 
currentHandleScale}} 
=}} 
handle}} 
.}} 

localScale}} )
.}}) *
x}}* +
;}}+ ,
currentPopupScale~~ 
=~~ 
popup~~ 
.~~ 

localScale~~ '
.~~' (
x~~( )
;~~) *

currentPos 
= 
popup 
. 
localPosition #
.# $
y$ %
;% &
animStartTime
ÅÅ 
=
ÅÅ 
Time
ÅÅ 
.
ÅÅ "
realtimeSinceStartup
ÅÅ ,
;
ÅÅ, -

isSelected
ÉÉ 
=
ÉÉ 
true
ÉÉ 
;
ÉÉ 
state
ÑÑ 
=
ÑÑ	 

$num
ÑÑ 
;
ÑÑ 
}
ÖÖ 
public
áá 
void
áá	 
OnPointerUp
áá 
(
áá 
PointerEventData
áá +
data
áá, 0
)
áá0 1
{
àà 
if
ââ 
(
ââ 

isSelected
ââ 
)
ââ 
{
ää  
currentHandleScale
ãã 
=
ãã 
handle
ãã 
.
ãã  

localScale
ãã  *
.
ãã* +
x
ãã+ ,
;
ãã, -
currentPopupScale
åå 
=
åå 
popup
åå 
.
åå 

localScale
åå (
.
åå( )
x
åå) *
;
åå* +

currentPos
çç 
=
çç 
popup
çç 
.
çç 
localPosition
çç $
.
çç$ %
y
çç% &
;
çç& '
animStartTime
èè 
=
èè 
Time
èè 
.
èè "
realtimeSinceStartup
èè -
;
èè- .

isSelected
ëë 
=
ëë 
false
ëë 
;
ëë 
state
íí 	
=
íí
 
$num
íí 
;
íí 
}
ìì 
}
îî 
}
ïï 
}ññ ®0
^F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_TextEventCheck.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
TMP_TextEventCheck #
:$ %
MonoBehaviour& 3
{ 
public		  
TMP_TextEventHandler		 #
TextEventHandler		$ 4
;		4 5
private 
TMP_Text 
m_TextComponent (
;( )
void 
OnEnable 
( 
) 
{ 	
if 
( 
TextEventHandler  
!=! #
null$ (
)( )
{ 
m_TextComponent 
=  !
TextEventHandler" 2
.2 3
GetComponent3 ?
<? @
TMP_Text@ H
>H I
(I J
)J K
;K L
TextEventHandler  
.  ! 
onCharacterSelection! 5
.5 6
AddListener6 A
(A B 
OnCharacterSelectionB V
)V W
;W X
TextEventHandler  
.  !
onSpriteSelection! 2
.2 3
AddListener3 >
(> ?
OnSpriteSelection? P
)P Q
;Q R
TextEventHandler  
.  !
onWordSelection! 0
.0 1
AddListener1 <
(< =
OnWordSelection= L
)L M
;M N
TextEventHandler  
.  !
onLineSelection! 0
.0 1
AddListener1 <
(< =
OnLineSelection= L
)L M
;M N
TextEventHandler  
.  !
onLinkSelection! 0
.0 1
AddListener1 <
(< =
OnLinkSelection= L
)L M
;M N
} 
} 	
void 
	OnDisable 
( 
) 
{ 	
if 
( 
TextEventHandler  
!=! #
null$ (
)( )
{   
TextEventHandler!!  
.!!  ! 
onCharacterSelection!!! 5
.!!5 6
RemoveListener!!6 D
(!!D E 
OnCharacterSelection!!E Y
)!!Y Z
;!!Z [
TextEventHandler""  
.""  !
onSpriteSelection""! 2
.""2 3
RemoveListener""3 A
(""A B
OnSpriteSelection""B S
)""S T
;""T U
TextEventHandler##  
.##  !
onWordSelection##! 0
.##0 1
RemoveListener##1 ?
(##? @
OnWordSelection##@ O
)##O P
;##P Q
TextEventHandler$$  
.$$  !
onLineSelection$$! 0
.$$0 1
RemoveListener$$1 ?
($$? @
OnLineSelection$$@ O
)$$O P
;$$P Q
TextEventHandler%%  
.%%  !
onLinkSelection%%! 0
.%%0 1
RemoveListener%%1 ?
(%%? @
OnLinkSelection%%@ O
)%%O P
;%%P Q
}&& 
}'' 	
void**  
OnCharacterSelection** !
(**! "
char**" &
c**' (
,**( )
int*** -
index**. 3
)**3 4
{++ 	
Debug,, 
.,, 
Log,, 
(,, 
$str,, #
+,,$ %
c,,& '
+,,( )
$str,,* 8
+,,9 :
index,,; @
+,,A B
$str,,C X
),,X Y
;,,Y Z
}-- 	
void// 
OnSpriteSelection// 
(// 
char// #
c//$ %
,//% &
int//' *
index//+ 0
)//0 1
{00 	
Debug11 
.11 
Log11 
(11 
$str11  
+11! "
c11# $
+11% &
$str11' 5
+116 7
index118 =
+11> ?
$str11@ U
)11U V
;11V W
}22 	
void44 
OnWordSelection44 
(44 
string44 #
word44$ (
,44( )
int44* -
firstCharacterIndex44. A
,44A B
int44C F
length44G M
)44M N
{55 	
Debug66 
.66 
Log66 
(66 
$str66 
+66  
word66! %
+66& '
$str66( J
+66K L
firstCharacterIndex66M `
+66a b
$str66c t
+66u v
length66w }
+66~ 
$str
66Ä ï
)
66ï ñ
;
66ñ ó
}77 	
void99 
OnLineSelection99 
(99 
string99 #
lineText99$ ,
,99, -
int99. 1
firstCharacterIndex992 E
,99E F
int99G J
length99K Q
)99Q R
{:: 	
Debug;; 
.;; 
Log;; 
(;; 
$str;; 
+;;  
lineText;;! )
+;;* +
$str;;, N
+;;O P
firstCharacterIndex;;Q d
+;;e f
$str;;g x
+;;y z
length	;;{ Å
+
;;Ç É
$str
;;Ñ ô
)
;;ô ö
;
;;ö õ
}<< 	
void>> 
OnLinkSelection>> 
(>> 
string>> #
linkID>>$ *
,>>* +
string>>, 2
linkText>>3 ;
,>>; <
int>>= @
	linkIndex>>A J
)>>J K
{?? 	
if@@ 
(@@ 
m_TextComponent@@ 
!=@@  "
null@@# '
)@@' (
{AA 
TMP_LinkInfoBB 
linkInfoBB %
=BB& '
m_TextComponentBB( 7
.BB7 8
textInfoBB8 @
.BB@ A
linkInfoBBA I
[BBI J
	linkIndexBBJ S
]BBS T
;BBT U
}CC 
DebugEE 
.EE 
LogEE 
(EE 
$strEE $
+EE% &
	linkIndexEE' 0
+EE1 2
$strEE3 ?
+EE@ A
linkIDEEB H
+EEI J
$strEEK Z
+EE[ \
linkTextEE] e
+EEf g
$strEEh 
)	EE Ä
;
EEÄ Å
}FF 	
}HH 
}II ¿
^F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\ShaderPropAnimator.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
ShaderPropAnimator #
:$ %
MonoBehaviour& 3
{		 
private 
Renderer 

m_Renderer #
;# $
private 
Material 

m_Material #
;# $
public 
AnimationCurve 
	GlowCurve '
;' (
public 
float 
m_frame 
; 
void 
Awake 
( 
) 
{ 	

m_Renderer 
= 
GetComponent %
<% &
Renderer& .
>. /
(/ 0
)0 1
;1 2

m_Material 
= 

m_Renderer #
.# $
material$ ,
;, -
} 	
void 
Start 
( 
) 
{ 	
StartCoroutine 
( 
AnimateProperties ,
(, -
)- .
). /
;/ 0
} 	
IEnumerator   
AnimateProperties   %
(  % &
)  & '
{!! 	
float## 
	glowPower## 
;## 
m_frame$$ 
=$$ 
Random$$ 
.$$ 
Range$$ "
($$" #
$num$$# %
,$$% &
$num$$' )
)$$) *
;$$* +
while&& 
(&& 
true&& 
)&& 
{'' 
	glowPower++ 
=++ 
	GlowCurve++ %
.++% &
Evaluate++& .
(++. /
m_frame++/ 6
)++6 7
;++7 8

m_Material,, 
.,, 
SetFloat,, #
(,,# $
ShaderUtilities,,$ 3
.,,3 4
ID_GlowPower,,4 @
,,,@ A
	glowPower,,B K
),,K L
;,,L M
m_frame.. 
+=.. 
Time.. 
...  
	deltaTime..  )
*..* +
Random.., 2
...2 3
Range..3 8
(..8 9
$num..9 =
,..= >
$num..? C
)..C D
;..D E
yield// 
return// 
new//  
WaitForEndOfFrame//! 2
(//2 3
)//3 4
;//4 5
}00 
}11 	
}22 
}33 ¥k
[F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\WarpTextExample.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
WarpTextExample  
:! "
MonoBehaviour# 0
{		 
private 
TMP_Text 
m_TextComponent (
;( )
public 
AnimationCurve 
VertexCurve )
=* +
new, /
AnimationCurve0 >
(> ?
new? B
KeyframeC K
(K L
$numL M
,M N
$numO P
)P Q
,Q R
newS V
KeyframeW _
(_ `
$num` e
,e f
$numg k
)k l
,l m
newn q
Keyframer z
(z {
$num{ 
,	 Ä
$num
Å Ç
)
Ç É
,
É Ñ
new
Ö à
Keyframe
â ë
(
ë í
$num
í ó
,
ó ò
$num
ô ù
)
ù û
,
û ü
new
† £
Keyframe
§ ¨
(
¨ ≠
$num
≠ Æ
,
Æ Ø
$num
∞ ≤
)
≤ ≥
)
≥ ¥
;
¥ µ
public 
float 
AngleMultiplier $
=% &
$num' +
;+ ,
public 
float 
SpeedMultiplier $
=% &
$num' +
;+ ,
public 
float 

CurveScale 
=  !
$num" &
;& '
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 

gameObject (
.( )
GetComponent) 5
<5 6
TMP_Text6 >
>> ?
(? @
)@ A
;A B
} 	
void 
Start 
( 
) 
{ 	
StartCoroutine 
( 
WarpText #
(# $
)$ %
)% &
;& '
} 	
private 
AnimationCurve 
CopyAnimationCurve 1
(1 2
AnimationCurve2 @
curveA F
)F G
{ 	
AnimationCurve   
newCurve   #
=  $ %
new  & )
AnimationCurve  * 8
(  8 9
)  9 :
;  : ;
newCurve"" 
."" 
keys"" 
="" 
curve"" !
.""! "
keys""" &
;""& '
return$$ 
newCurve$$ 
;$$ 
}%% 	
IEnumerator-- 
WarpText-- 
(-- 
)-- 
{.. 	
VertexCurve// 
.// 
preWrapMode// #
=//$ %
WrapMode//& .
.//. /
Clamp/// 4
;//4 5
VertexCurve00 
.00 
postWrapMode00 $
=00% &
WrapMode00' /
.00/ 0
Clamp000 5
;005 6
Vector344 
[44 
]44 
vertices44 
;44 
	Matrix4x455 
matrix55 
;55 
m_TextComponent77 
.77 !
havePropertiesChanged77 1
=772 3
true774 8
;778 9

CurveScale88 
*=88 
$num88 
;88 
float99 
old_CurveScale99  
=99! "

CurveScale99# -
;99- .
AnimationCurve:: 
	old_curve:: $
=::% &
CopyAnimationCurve::' 9
(::9 :
VertexCurve::: E
)::E F
;::F G
while<< 
(<< 
true<< 
)<< 
{== 
if>> 
(>> 
!>> 
m_TextComponent>> $
.>>$ %!
havePropertiesChanged>>% :
&&>>; =
old_CurveScale>>> L
==>>M O

CurveScale>>P Z
&&>>[ ]
	old_curve>>^ g
.>>g h
keys>>h l
[>>l m
$num>>m n
]>>n o
.>>o p
value>>p u
==>>v x
VertexCurve	>>y Ñ
.
>>Ñ Ö
keys
>>Ö â
[
>>â ä
$num
>>ä ã
]
>>ã å
.
>>å ç
value
>>ç í
)
>>í ì
{?? 
yield@@ 
return@@  
null@@! %
;@@% &
continueAA 
;AA 
}BB 
old_CurveScaleDD 
=DD  

CurveScaleDD! +
;DD+ ,
	old_curveEE 
=EE 
CopyAnimationCurveEE .
(EE. /
VertexCurveEE/ :
)EE: ;
;EE; <
m_TextComponentGG 
.GG  
ForceMeshUpdateGG  /
(GG/ 0
)GG0 1
;GG1 2
TMP_TextInfoII 
textInfoII %
=II& '
m_TextComponentII( 7
.II7 8
textInfoII8 @
;II@ A
intJJ 
characterCountJJ "
=JJ# $
textInfoJJ% -
.JJ- .
characterCountJJ. <
;JJ< =
ifMM 
(MM 
characterCountMM "
==MM# %
$numMM& '
)MM' (
continueMM) 1
;MM1 2
floatRR 

boundsMinXRR  
=RR! "
m_TextComponentRR# 2
.RR2 3
boundsRR3 9
.RR9 :
minRR: =
.RR= >
xRR> ?
;RR? @
floatSS 

boundsMaxXSS  
=SS! "
m_TextComponentSS# 2
.SS2 3
boundsSS3 9
.SS9 :
maxSS: =
.SS= >
xSS> ?
;SS? @
forWW 
(WW 
intWW 
iWW 
=WW 
$numWW 
;WW 
iWW  !
<WW" #
characterCountWW$ 2
;WW2 3
iWW4 5
++WW5 7
)WW7 8
{XX 
ifYY 
(YY 
!YY 
textInfoYY !
.YY! "
characterInfoYY" /
[YY/ 0
iYY0 1
]YY1 2
.YY2 3
	isVisibleYY3 <
)YY< =
continueZZ  
;ZZ  !
int\\ 
vertexIndex\\ #
=\\$ %
textInfo\\& .
.\\. /
characterInfo\\/ <
[\\< =
i\\= >
]\\> ?
.\\? @
vertexIndex\\@ K
;\\K L
int__ 
materialIndex__ %
=__& '
textInfo__( 0
.__0 1
characterInfo__1 >
[__> ?
i__? @
]__@ A
.__A B"
materialReferenceIndex__B X
;__X Y
verticesaa 
=aa 
textInfoaa '
.aa' (
meshInfoaa( 0
[aa0 1
materialIndexaa1 >
]aa> ?
.aa? @
verticesaa@ H
;aaH I
Vector3dd 
offsetToMidBaselinedd /
=dd0 1
newdd2 5
Vector2dd6 =
(dd= >
(dd> ?
verticesdd? G
[ddG H
vertexIndexddH S
+ddT U
$numddV W
]ddW X
.ddX Y
xddY Z
+dd[ \
verticesdd] e
[dde f
vertexIndexddf q
+ddr s
$numddt u
]ddu v
.ddv w
xddw x
)ddx y
/ddz {
$numdd| }
,dd} ~
textInfo	dd á
.
ddá à
characterInfo
ddà ï
[
ddï ñ
i
ddñ ó
]
ddó ò
.
ddò ô
baseLine
ddô °
)
dd° ¢
;
dd¢ £
verticeshh 
[hh 
vertexIndexhh (
+hh) *
$numhh+ ,
]hh, -
+=hh. 0
-hh1 2
offsetToMidBaselinehh2 E
;hhE F
verticesii 
[ii 
vertexIndexii (
+ii) *
$numii+ ,
]ii, -
+=ii. 0
-ii1 2
offsetToMidBaselineii2 E
;iiE F
verticesjj 
[jj 
vertexIndexjj (
+jj) *
$numjj+ ,
]jj, -
+=jj. 0
-jj1 2
offsetToMidBaselinejj2 E
;jjE F
verticeskk 
[kk 
vertexIndexkk (
+kk) *
$numkk+ ,
]kk, -
+=kk. 0
-kk1 2
offsetToMidBaselinekk2 E
;kkE F
floatnn 
x0nn 
=nn 
(nn  
offsetToMidBaselinenn  3
.nn3 4
xnn4 5
-nn6 7

boundsMinXnn8 B
)nnB C
/nnD E
(nnF G

boundsMaxXnnG Q
-nnR S

boundsMinXnnT ^
)nn^ _
;nn_ `
floatoo 
x1oo 
=oo 
x0oo !
+oo" #
$numoo$ +
;oo+ ,
floatpp 
y0pp 
=pp 
VertexCurvepp *
.pp* +
Evaluatepp+ 3
(pp3 4
x0pp4 6
)pp6 7
*pp8 9

CurveScalepp: D
;ppD E
floatqq 
y1qq 
=qq 
VertexCurveqq *
.qq* +
Evaluateqq+ 3
(qq3 4
x1qq4 6
)qq6 7
*qq8 9

CurveScaleqq: D
;qqD E
Vector3ss 

horizontalss &
=ss' (
newss) ,
Vector3ss- 4
(ss4 5
$numss5 6
,ss6 7
$numss8 9
,ss9 :
$numss; <
)ss< =
;ss= >
Vector3uu 
tangentuu #
=uu$ %
newuu& )
Vector3uu* 1
(uu1 2
x1uu2 4
*uu5 6
(uu7 8

boundsMaxXuu8 B
-uuC D

boundsMinXuuE O
)uuO P
+uuQ R

boundsMinXuuS ]
,uu] ^
y1uu_ a
)uua b
-uuc d
newuue h
Vector3uui p
(uup q 
offsetToMidBaseline	uuq Ñ
.
uuÑ Ö
x
uuÖ Ü
,
uuÜ á
y0
uuà ä
)
uuä ã
;
uuã å
floatww 
dotww 
=ww 
Mathfww  %
.ww% &
Acosww& *
(ww* +
Vector3ww+ 2
.ww2 3
Dotww3 6
(ww6 7

horizontalww7 A
,wwA B
tangentwwC J
.wwJ K

normalizedwwK U
)wwU V
)wwV W
*wwX Y
$numwwZ e
;wwe f
Vector3xx 
crossxx !
=xx" #
Vector3xx$ +
.xx+ ,
Crossxx, 1
(xx1 2

horizontalxx2 <
,xx< =
tangentxx> E
)xxE F
;xxF G
floatyy 
angleyy 
=yy  !
crossyy" '
.yy' (
zyy( )
>yy* +
$numyy, -
?yy. /
dotyy0 3
:yy4 5
$numyy6 9
-yy: ;
dotyy< ?
;yy? @
matrix{{ 
={{ 
	Matrix4x4{{ &
.{{& '
TRS{{' *
({{* +
new{{+ .
Vector3{{/ 6
({{6 7
$num{{7 8
,{{8 9
y0{{: <
,{{< =
$num{{> ?
){{? @
,{{@ A

Quaternion{{B L
.{{L M
Euler{{M R
({{R S
$num{{S T
,{{T U
$num{{V W
,{{W X
angle{{Y ^
){{^ _
,{{_ `
Vector3{{a h
.{{h i
one{{i l
){{l m
;{{m n
vertices}} 
[}} 
vertexIndex}} (
+}}) *
$num}}+ ,
]}}, -
=}}. /
matrix}}0 6
.}}6 7
MultiplyPoint3x4}}7 G
(}}G H
vertices}}H P
[}}P Q
vertexIndex}}Q \
+}}] ^
$num}}_ `
]}}` a
)}}a b
;}}b c
vertices~~ 
[~~ 
vertexIndex~~ (
+~~) *
$num~~+ ,
]~~, -
=~~. /
matrix~~0 6
.~~6 7
MultiplyPoint3x4~~7 G
(~~G H
vertices~~H P
[~~P Q
vertexIndex~~Q \
+~~] ^
$num~~_ `
]~~` a
)~~a b
;~~b c
vertices 
[ 
vertexIndex (
+) *
$num+ ,
], -
=. /
matrix0 6
.6 7
MultiplyPoint3x47 G
(G H
verticesH P
[P Q
vertexIndexQ \
+] ^
$num_ `
]` a
)a b
;b c
vertices
ÄÄ 
[
ÄÄ 
vertexIndex
ÄÄ (
+
ÄÄ) *
$num
ÄÄ+ ,
]
ÄÄ, -
=
ÄÄ. /
matrix
ÄÄ0 6
.
ÄÄ6 7
MultiplyPoint3x4
ÄÄ7 G
(
ÄÄG H
vertices
ÄÄH P
[
ÄÄP Q
vertexIndex
ÄÄQ \
+
ÄÄ] ^
$num
ÄÄ_ `
]
ÄÄ` a
)
ÄÄa b
;
ÄÄb c
vertices
ÇÇ 
[
ÇÇ 
vertexIndex
ÇÇ (
+
ÇÇ) *
$num
ÇÇ+ ,
]
ÇÇ, -
+=
ÇÇ. 0!
offsetToMidBaseline
ÇÇ1 D
;
ÇÇD E
vertices
ÉÉ 
[
ÉÉ 
vertexIndex
ÉÉ (
+
ÉÉ) *
$num
ÉÉ+ ,
]
ÉÉ, -
+=
ÉÉ. 0!
offsetToMidBaseline
ÉÉ1 D
;
ÉÉD E
vertices
ÑÑ 
[
ÑÑ 
vertexIndex
ÑÑ (
+
ÑÑ) *
$num
ÑÑ+ ,
]
ÑÑ, -
+=
ÑÑ. 0!
offsetToMidBaseline
ÑÑ1 D
;
ÑÑD E
vertices
ÖÖ 
[
ÖÖ 
vertexIndex
ÖÖ (
+
ÖÖ) *
$num
ÖÖ+ ,
]
ÖÖ, -
+=
ÖÖ. 0!
offsetToMidBaseline
ÖÖ1 D
;
ÖÖD E
}
ÜÜ 
m_TextComponent
ää 
.
ää  
UpdateVertexData
ää  0
(
ää0 1
)
ää1 2
;
ää2 3
yield
åå 
return
åå 
new
åå  
WaitForSeconds
åå! /
(
åå/ 0
$num
åå0 6
)
åå6 7
;
åå7 8
}
çç 
}
éé 	
}
èè 
}êê Õ
HF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\MaterialUIScaler.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 
class 
MaterialUIScaler 
:  
MonoBehaviour! .
{		 
private

 	
Vector2


 
referenceResolution

 %
;

% &
private 	
Vector2
 
currentResolution #
;# $
public 
float	 
scaleFactor 
{ 
get  
;  !
private" )
set* -
;- .
}/ 0
private 	
CanvasScaler
 
scaler 
; 
public 
void	 
Update 
( 
) 
{ 
if 
( 
! 
scaler 
) 
scaler 

= 

gameObject 
. 
GetComponent $
<$ %
CanvasScaler% 1
>1 2
(2 3
)3 4
;4 5
if 
( 
scaler 
. 
uiScaleMode 
== 
CanvasScaler )
.) *
	ScaleMode* 3
.3 4
ScaleWithScreenSize4 G
)G H
{ 
referenceResolution 
= 
scaler  
.  !
referenceResolution! 4
;4 5
currentResolution 
= 
new 
Vector2 #
(# $
Screen$ *
.* +
width+ 0
,0 1
Screen2 8
.8 9
height9 ?
)? @
;@ A
scaleFactor 
= 
( 
currentResolution $
.$ %
x% &
*& '
currentResolution' 8
.8 9
y9 :
): ;
/; <
(< =
referenceResolution= P
.P Q
xQ R
*R S
referenceResolutionS f
.f g
yg h
)h i
;i j
} 
else 
if 

( 
scaler 
. 
uiScaleMode 
== !
CanvasScaler" .
.. /
	ScaleMode/ 8
.8 9
ConstantPixelSize9 J
)J K
{ 
scaleFactor 
= 
scaler 
. 
scaleFactor $
;$ %
}   
}!! 
}"" 
}## ò
CF:\Github\CS 230\unityProj\Assets\Scenes\Scripts\ResetGameValues.cs
public 
class 
ResetGameValues 
: 
MonoBehaviour ,
{ 
private 
void 
Start 
( 
) 
{ 
FindObjectOfType 
< 
PointSystem $
>$ %
(% &
)& '
.' (
SetPoint( 0
(0 1
$num1 2
)2 3
;3 4
}		 
}

 É	
^F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_DigitValidator.cs
	namespace 	
TMPro
 
{ 
[

 
Serializable

 
]

 
public 

class 
TMP_DigitValidator #
:$ %
TMP_InputValidator& 8
{ 
public 
override 
char 
Validate %
(% &
ref& )
string* 0
text1 5
,5 6
ref7 :
int; >
pos? B
,B C
charD H
chI K
)K L
{ 	
if 
( 
ch 
>= 
$char 
&& 
ch 
<=  "
$char# &
)& '
{ 
text 
+= 
ch 
; 
pos 
+= 
$num 
; 
return 
ch 
; 
} 
return 
( 
char 
) 
$num 
; 
} 	
} 
} ∞
?F:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\Toaster.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
Toaster 
: 
MonoBehaviour %
{ 
public 
string	 
text 
= 
$str (
;( )
public 
float	 
duration 
= 
$num 
; 
public 
Color	 

panelColor 
= 
new 
Color  %
(& '
$num' )
,) *
$num+ -
,- .
$num/ 1
)1 2
;2 3
public 
Color	 
	textColor 
= 
new 
Color $
(% &
$num& +
,+ ,
$num- 2
,2 3
$num4 9
)9 :
;: ;
public 
int	 
fontSize 
= 
$num 
; 
void 
Start 
( 
) 
{ 
ToastControl 
. 
InitToastSystem 
(  !

gameObject! +
.+ , 
GetComponentInParent, @
<@ A
CanvasA G
>G H
(H I
)I J
)J K
;K L
} 
public 
void	 

PopupToast 
( 
) 
{ 
ToastControl 
. 
	MakeToast 
( 
text 
,  
duration! )
,) *

panelColor+ 5
,5 6
	textColor7 @
,@ A
fontSizeB J
)J K
;K L
}   
}!! 
}"" •Ó
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ScreenConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
ScreenConfig 
: 
MonoBehaviour *
{ 
public 
enum	 
SlideDirection 
{ 
None 
, 
Top 
, 
Left 
, 
Bottom 	
,	 

Right 
} 
public 
enum	 
TransitionType 
{ 
Normal 	
,	 


RippleMask 
} 
public!! 
string!!	 

screenName!! 
;!! 
[## 
HideInInspector## 
]## 
[$$ 
SerializeField$$ 
]$$ 
public%% 
TransitionType%%	 
transitionInType%% (
;%%( )
[&& 
HideInInspector&& 
]&& 
['' 
SerializeField'' 
]'' 
public(( 
TransitionType((	 
transitionOutType(( )
;(() *
[** 
HideInInspector** 
]** 
public++ 
SlideDirection++	 
slideIn++ 
=++  !
SlideDirection++" 0
.++0 1
Bottom++1 7
;++7 8
[,, 
HideInInspector,, 
],, 
public-- 
float--	 
slideInPercent-- 
=-- 
$num--  #
;--# $
[.. 
HideInInspector.. 
].. 
public// 
bool//	 
scaleIn// 
=// 
true// 
;// 
[00 
HideInInspector00 
]00 
public11 
float11	 
scaleInStartValue11  
=11! "
$num11# (
;11( )
[22 
HideInInspector22 
]22 
public33 
bool33	 
fadeIn33 
=33 
true33 
;33 
[44 
HideInInspector44 
]44 
public55 
float55	 
fadeInStartValue55 
=55  !
$num55" $
;55$ %
[77 
HideInInspector77 
]77 
public88 
SlideDirection88	 
slideOut88  
=88! "
SlideDirection88# 1
.881 2
Bottom882 8
;888 9
[99 
HideInInspector99 
]99 
public:: 
float::	 
slideOutPercent:: 
=::  
$num::! $
;::$ %
[;; 
HideInInspector;; 
];; 
public<< 
bool<<	 
scaleOut<< 
=<< 
true<< 
;<< 
[== 
HideInInspector== 
]== 
public>> 
float>>	 
scaleOutEndValue>> 
=>>  !
$num>>" '
;>>' (
[?? 
HideInInspector?? 
]?? 
public@@ 
bool@@	 
fadeOut@@ 
=@@ 
true@@ 
;@@ 
[AA 
HideInInspectorAA 
]AA 
publicBB 
floatBB	 
fadeOutEndValueBB 
=BB  
$numBB! #
;BB# $
[DD 
HideInInspectorDD 
]DD 
privateEE 	
intEE
 
stateEE 
;EE 
[FF 
HideInInspectorFF 
]FF 
privateGG 	
floatGG
 
animStartTimeGG 
;GG 
[HH 
HideInInspectorHH 
]HH 
privateII 	
floatII
 
animDeltaTimeII 
;II 
[JJ 
HideInInspectorJJ 
]JJ 
publicKK 
floatKK	 
animationDurationKK  
;KK  !
[MM 
HideInInspectorMM 
]MM 
privateNN 	
RectTransformNN
 
theRectTransformNN (
;NN( )
[OO 
HideInInspectorOO 
]OO 
privatePP 	
CanvasGroupPP
 
theCanvasGroupPP $
;PP$ %
[QQ 
HideInInspectorQQ 
]QQ 
privateRR 	
Vector2RR
 $
slideInDirectionPositionRR *
;RR* +
[SS 
HideInInspectorSS 
]SS 
privateTT 	
Vector2TT
 %
slideOutDirectionPositionTT +
;TT+ ,
[VV 
HideInInspectorVV 
]VV 
privateWW 	
Vector2WW
 
screenDimensionsWW "
;WW" #
[YY 
HideInInspectorYY 
]YY 
privateZZ 	
Vector2ZZ
 
tempVector2ZZ 
;ZZ 
[[[ 
HideInInspector[[ 
][[ 
private\\ 	
Vector3\\
 
tempVector3\\ 
;\\ 
public^^ 

GameObject^^	 
screenSpace^^ 
;^^  
public`` 
RectTransform``	 
currentRipple`` $
;``$ %
[bb 
HideInInspectorbb 
]bb 
privatecc 	
Vector2cc
 
screenSpacePositioncc %
;cc% &
[ee 
HideInInspectoree 
]ee 
privateff 	
floatff
 

rippleSizeff 
;ff 
[hh 
SerializeFieldhh 
]hh 
privatehh 
Vector2hh "
thisScreenSizehh# 1
;hh1 2
privatejj 	
ScreenConfigjj
 

hideScreenjj !
;jj! "
voidll 
Awakell 
(ll 
)ll 
{mm 
theRectTransformnn 
=nn 
screenSpacenn !
.nn! "
GetComponentnn" .
<nn. /
RectTransformnn/ <
>nn< =
(nn= >
)nn> ?
;nn? @
theCanvasGroupoo 
=oo 
screenSpaceoo 
.oo  
GetComponentoo  ,
<oo, -
CanvasGroupoo- 8
>oo8 9
(oo9 :
)oo: ;
;oo; <
screenDimensionspp 
=pp 
newpp 
Vector2pp !
(pp! "
Screenpp" (
.pp( )
widthpp) .
,pp. /
Screenpp0 6
.pp6 7
heightpp7 =
)pp= >
;pp> ?
}qq 
publicss 
voidss	 !
ShowWithoutTransitionss #
(ss# $
)ss$ %
{tt 
screenSpaceuu 
.uu 
	SetActiveuu 
(uu 
trueuu 
)uu 
;uu 
}vv 
publicxx 
voidxx	 
Showxx 
(xx 
ScreenConfigxx 
screenToHidexx  ,
)xx, -
{yy 

hideScreenzz 
=zz 
screenToHidezz 
;zz 
Show{{ 
({{ 
){{ 	
;{{	 

}|| 
public~~ 
void~~	 
Show~~ 
(~~ 
)~~ 
{ 
if
ÄÄ 
(
ÄÄ 
transitionInType
ÄÄ 
==
ÄÄ 
TransitionType
ÄÄ )
.
ÄÄ) *

RippleMask
ÄÄ* 4
)
ÄÄ4 5
{
ÅÅ 
currentRipple
ÇÇ 
.
ÇÇ 
position
ÇÇ 
=
ÇÇ 
Input
ÇÇ "
.
ÇÇ" #
mousePosition
ÇÇ# 0
;
ÇÇ0 1
thisScreenSize
ÑÑ 
=
ÑÑ 
new
ÑÑ 
Vector2
ÑÑ  
(
ÑÑ  !
theRectTransform
ÑÑ! 1
.
ÑÑ1 2
rect
ÑÑ2 6
.
ÑÑ6 7
width
ÑÑ7 <
,
ÑÑ< =
theRectTransform
ÑÑ> N
.
ÑÑN O
rect
ÑÑO S
.
ÑÑS T
height
ÑÑT Z
)
ÑÑZ [
;
ÑÑ[ \
theRectTransform
ÜÜ 
.
ÜÜ 
anchoredPosition
ÜÜ %
=
ÜÜ& '
Vector2
ÜÜ( /
.
ÜÜ/ 0
zero
ÜÜ0 4
;
ÜÜ4 5
theRectTransform
áá 
.
áá 

localScale
áá 
=
áá  !
new
áá" %
Vector3
áá& -
(
áá- .
$num
áá. 0
,
áá0 1
$num
áá2 4
,
áá4 5
$num
áá6 8
)
áá8 9
;
áá9 :
theCanvasGroup
àà 
.
àà 
alpha
àà 
=
àà 
$num
àà 
;
àà !
screenSpacePosition
ää 
=
ää 
theRectTransform
ää *
.
ää* +
position
ää+ 3
;
ää3 4
theRectTransform
ãã 
.
ãã 
	SetParent
ãã 
(
ãã 
currentRipple
ãã ,
.
ãã, -
	transform
ãã- 6
)
ãã6 7
;
ãã7 8
theRectTransform
åå 
.
åå 
position
åå 
=
åå !
screenSpacePosition
åå  3
;
åå3 4

rippleSize
éé 
=
éé 
screenDimensions
éé !
.
éé! "
x
éé" #
+
éé$ %
screenDimensions
éé& 6
.
éé6 7
y
éé7 8
;
éé8 9
}
èè 
if
ëë 
(
ëë 
slideIn
ëë 
==
ëë 
SlideDirection
ëë  
.
ëë  !
None
ëë! %
)
ëë% &
{
íí &
slideInDirectionPosition
ìì 
=
ìì 
new
ìì "
Vector2
ìì# *
(
ìì* +
$num
ìì+ -
,
ìì- .
$num
ìì/ 1
)
ìì1 2
;
ìì2 3
}
îî 
else
ïï 
if
ïï 

(
ïï 
slideIn
ïï 
==
ïï 
SlideDirection
ïï %
.
ïï% &
Top
ïï& )
)
ïï) *
{
ññ &
slideInDirectionPosition
óó 
=
óó 
new
óó "
Vector2
óó# *
(
óó* +
$num
óó+ -
,
óó- .
screenDimensions
óó/ ?
.
óó? @
y
óó@ A
*
óóB C
$num
óóD I
)
óóI J
;
óóJ K
}
òò 
else
ôô 
if
ôô 

(
ôô 
slideIn
ôô 
==
ôô 
SlideDirection
ôô %
.
ôô% &
Left
ôô& *
)
ôô* +
{
öö &
slideInDirectionPosition
õõ 
=
õõ 
new
õõ "
Vector2
õõ# *
(
õõ* +
-
õõ+ ,
screenDimensions
õõ, <
.
õõ< =
x
õõ= >
*
õõ? @
$num
õõA F
,
õõF G
$num
õõH J
)
õõJ K
;
õõK L
}
úú 
else
ùù 
if
ùù 

(
ùù 
slideIn
ùù 
==
ùù 
SlideDirection
ùù %
.
ùù% &
Bottom
ùù& ,
)
ùù, -
{
ûû &
slideInDirectionPosition
üü 
=
üü 
new
üü "
Vector2
üü# *
(
üü* +
$num
üü+ -
,
üü- .
-
üü/ 0
screenDimensions
üü0 @
.
üü@ A
y
üüA B
*
üüC D
$num
üüE J
)
üüJ K
;
üüK L
}
†† 
else
°° 
if
°° 

(
°° 
slideIn
°° 
==
°° 
SlideDirection
°° %
.
°°% &
Right
°°& +
)
°°+ ,
{
¢¢ &
slideInDirectionPosition
££ 
=
££ 
new
££ "
Vector2
££# *
(
££* +
screenDimensions
££+ ;
.
££; <
x
££< =
*
££> ?
$num
££@ E
,
££E F
$num
££G I
)
££I J
;
££J K
}
§§ 
screenSpace
¶¶ 
.
¶¶ 
	SetActive
¶¶ 
(
¶¶ 
true
¶¶ 
)
¶¶ 
;
¶¶ 
animStartTime
®® 
=
®® 
Time
®® 
.
®® "
realtimeSinceStartup
®® ,
;
®®, -
state
©© 
=
©©	 

$num
©© 
;
©© 
}
™™ 
public
¨¨ 
void
¨¨	 #
HideWithoutTransition
¨¨ #
(
¨¨# $
)
¨¨$ %
{
≠≠ 
screenSpace
ÆÆ 
.
ÆÆ 
	SetActive
ÆÆ 
(
ÆÆ 
false
ÆÆ 
)
ÆÆ 
;
ÆÆ  
}
ØØ 
public
±± 
void
±±	 
Hide
±± 
(
±± 
)
±± 
{
≤≤ 
if
≥≥ 
(
≥≥ 
transitionOutType
≥≥ 
==
≥≥ 
TransitionType
≥≥ *
.
≥≥* +

RippleMask
≥≥+ 5
)
≥≥5 6
{
¥¥ 
thisScreenSize
µµ 
=
µµ 
new
µµ 
Vector2
µµ  
(
µµ  !
theRectTransform
µµ! 1
.
µµ1 2
rect
µµ2 6
.
µµ6 7
width
µµ7 <
,
µµ< =
theRectTransform
µµ> N
.
µµN O
rect
µµO S
.
µµS T
height
µµT Z
)
µµZ [
;
µµ[ \
currentRipple
∑∑ 
.
∑∑ 
position
∑∑ 
=
∑∑ 
Input
∑∑ "
.
∑∑" #
mousePosition
∑∑# 0
;
∑∑0 1

rippleSize
∏∏ 
=
∏∏ 
screenDimensions
∏∏ !
.
∏∏! "
x
∏∏" #
+
∏∏$ %
screenDimensions
∏∏& 6
.
∏∏6 7
y
∏∏7 8
;
∏∏8 9
currentRipple
ππ 
.
ππ 
	sizeDelta
ππ 
=
ππ 
new
ππ !
Vector2
ππ" )
(
ππ) *

rippleSize
ππ* 4
,
ππ4 5

rippleSize
ππ6 @
)
ππ@ A
;
ππA B!
screenSpacePosition
ªª 
=
ªª 
theRectTransform
ªª *
.
ªª* +
position
ªª+ 3
;
ªª3 4
theRectTransform
ºº 
.
ºº 
	SetParent
ºº 
(
ºº 
currentRipple
ºº ,
.
ºº, -
	transform
ºº- 6
)
ºº6 7
;
ºº7 8
theRectTransform
ΩΩ 
.
ΩΩ 
position
ΩΩ 
=
ΩΩ !
screenSpacePosition
ΩΩ  3
;
ΩΩ3 4
}
ææ 
else
øø 
{
¿¿ 
if
¡¡ 
(
¡¡ 
slideOut
¡¡ 
==
¡¡ 
SlideDirection
¡¡ "
.
¡¡" #
None
¡¡# '
)
¡¡' (
{
¬¬ '
slideOutDirectionPosition
√√ 
=
√√  
new
√√! $
Vector2
√√% ,
(
√√, -
$num
√√- /
,
√√/ 0
$num
√√1 3
)
√√3 4
;
√√4 5
}
ƒƒ 
else
≈≈ 
if
≈≈	 
(
≈≈ 
slideOut
≈≈ 
==
≈≈ 
SlideDirection
≈≈ '
.
≈≈' (
Top
≈≈( +
)
≈≈+ ,
{
∆∆ '
slideOutDirectionPosition
«« 
=
««  
new
««! $
Vector2
««% ,
(
««, -
$num
««- /
,
««/ 0
screenDimensions
««1 A
.
««A B
y
««B C
*
««C D
$num
««D I
)
««I J
;
««J K
}
»» 
else
…… 
if
……	 
(
…… 
slideOut
…… 
==
…… 
SlideDirection
…… '
.
……' (
Left
……( ,
)
……, -
{
   '
slideOutDirectionPosition
ÀÀ 
=
ÀÀ  
new
ÀÀ! $
Vector2
ÀÀ% ,
(
ÀÀ, -
-
ÀÀ- .
screenDimensions
ÀÀ. >
.
ÀÀ> ?
x
ÀÀ? @
*
ÀÀ@ A
$num
ÀÀA F
,
ÀÀF G
$num
ÀÀH J
)
ÀÀJ K
;
ÀÀK L
}
ÃÃ 
else
ÕÕ 
if
ÕÕ	 
(
ÕÕ 
slideOut
ÕÕ 
==
ÕÕ 
SlideDirection
ÕÕ '
.
ÕÕ' (
Bottom
ÕÕ( .
)
ÕÕ. /
{
ŒŒ '
slideOutDirectionPosition
œœ 
=
œœ  
new
œœ! $
Vector2
œœ% ,
(
œœ, -
$num
œœ- /
,
œœ/ 0
-
œœ1 2
screenDimensions
œœ2 B
.
œœB C
y
œœC D
*
œœD E
$num
œœE J
)
œœJ K
;
œœK L
}
–– 
else
—— 
if
——	 
(
—— 
slideOut
—— 
==
—— 
SlideDirection
—— '
.
——' (
Right
——( -
)
——- .
{
““ '
slideOutDirectionPosition
”” 
=
””  
new
””! $
Vector2
””% ,
(
””, -
screenDimensions
””- =
.
””= >
x
””> ?
*
””? @
$num
””@ E
,
””E F
$num
””G I
)
””I J
;
””J K
}
‘‘ 
}
’’ 
animStartTime
◊◊ 
=
◊◊ 
Time
◊◊ 
.
◊◊ "
realtimeSinceStartup
◊◊ ,
;
◊◊, -
state
ÿÿ 
=
ÿÿ	 

$num
ÿÿ 
;
ÿÿ 
}
ŸŸ 
void
€€ 
Update
€€ 
(
€€ 
)
€€ 
{
‹‹ 
animDeltaTime
›› 
=
›› 
Time
›› 
.
›› "
realtimeSinceStartup
›› ,
-
››- .
animStartTime
››/ <
;
››< =
if
ﬂﬂ 
(
ﬂﬂ 
state
ﬂﬂ 
==
ﬂﬂ 
$num
ﬂﬂ 
)
ﬂﬂ 
{
‡‡ 
if
·· 
(
·· 
animDeltaTime
·· 
<=
·· 
animationDuration
·· *
)
··* +
{
‚‚ 
if
„„ 
(
„„ 	
transitionInType
„„	 
==
„„ 
TransitionType
„„ +
.
„„+ ,

RippleMask
„„, 6
)
„„6 7
{
‰‰ 
tempVector2
ÂÂ 
=
ÂÂ 
currentRipple
ÂÂ !
.
ÂÂ! "
	sizeDelta
ÂÂ" +
;
ÂÂ+ ,
tempVector2
ÊÊ 
.
ÊÊ 
x
ÊÊ 
=
ÊÊ 
Anim
ÊÊ 
.
ÊÊ 
Quint
ÊÊ  
.
ÊÊ  !
In
ÊÊ! #
(
ÊÊ# $
$num
ÊÊ$ &
,
ÊÊ& '

rippleSize
ÊÊ( 2
,
ÊÊ2 3
animDeltaTime
ÊÊ4 A
,
ÊÊA B
animationDuration
ÊÊC T
)
ÊÊT U
;
ÊÊU V
tempVector2
ÁÁ 
.
ÁÁ 
y
ÁÁ 
=
ÁÁ 
tempVector2
ÁÁ !
.
ÁÁ! "
x
ÁÁ" #
;
ÁÁ# $
currentRipple
ËË 
.
ËË 
	sizeDelta
ËË 
=
ËË 
tempVector2
ËË  +
;
ËË+ ,
theRectTransform
ÍÍ 
.
ÍÍ '
SetSizeWithCurrentAnchors
ÍÍ 0
(
ÍÍ0 1
RectTransform
ÍÍ1 >
.
ÍÍ> ?
Axis
ÍÍ? C
.
ÍÍC D

Horizontal
ÍÍD N
,
ÍÍN O
thisScreenSize
ÍÍP ^
.
ÍÍ^ _
x
ÍÍ_ `
)
ÍÍ` a
;
ÍÍa b
theRectTransform
ÎÎ 
.
ÎÎ '
SetSizeWithCurrentAnchors
ÎÎ 0
(
ÎÎ0 1
RectTransform
ÎÎ1 >
.
ÎÎ> ?
Axis
ÎÎ? C
.
ÎÎC D
Vertical
ÎÎD L
,
ÎÎL M
thisScreenSize
ÎÎN \
.
ÎÎ\ ]
y
ÎÎ] ^
)
ÎÎ^ _
;
ÎÎ_ `
}
ÏÏ 
else
ÌÌ 	
{
ÓÓ 
if
ÔÔ 
(
ÔÔ	 

slideIn
ÔÔ
 
!=
ÔÔ 
SlideDirection
ÔÔ #
.
ÔÔ# $
None
ÔÔ$ (
)
ÔÔ( )
{
 
tempVector2
ÒÒ 
=
ÒÒ 
theRectTransform
ÒÒ %
.
ÒÒ% &
anchoredPosition
ÒÒ& 6
;
ÒÒ6 7
tempVector2
ÚÚ 
.
ÚÚ 
x
ÚÚ 
=
ÚÚ 
Anim
ÚÚ 
.
ÚÚ 
Quint
ÚÚ !
.
ÚÚ! "
Out
ÚÚ" %
(
ÚÚ% &&
slideInDirectionPosition
ÚÚ& >
.
ÚÚ> ?
x
ÚÚ? @
,
ÚÚ@ A
$num
ÚÚB D
,
ÚÚD E
animDeltaTime
ÚÚF S
,
ÚÚS T
animationDuration
ÚÚU f
)
ÚÚf g
;
ÚÚg h
tempVector2
ÛÛ 
.
ÛÛ 
y
ÛÛ 
=
ÛÛ 
Anim
ÛÛ 
.
ÛÛ 
Quint
ÛÛ !
.
ÛÛ! "
Out
ÛÛ" %
(
ÛÛ% &&
slideInDirectionPosition
ÛÛ& >
.
ÛÛ> ?
y
ÛÛ? @
,
ÛÛ@ A
$num
ÛÛB D
,
ÛÛD E
animDeltaTime
ÛÛF S
,
ÛÛS T
animationDuration
ÛÛU f
)
ÛÛf g
;
ÛÛg h
theRectTransform
ÙÙ 
.
ÙÙ 
anchoredPosition
ÙÙ (
=
ÙÙ) *
tempVector2
ÙÙ+ 6
;
ÙÙ6 7
}
ıı 
if
˜˜ 
(
˜˜	 

scaleIn
˜˜
 
)
˜˜ 
{
¯¯ 
tempVector3
˘˘ 
=
˘˘ 
theRectTransform
˘˘ %
.
˘˘% &

localScale
˘˘& 0
;
˘˘0 1
tempVector3
˙˙ 
.
˙˙ 
x
˙˙ 
=
˙˙ 
Anim
˙˙ 
.
˙˙ 
Quint
˙˙ !
.
˙˙! "
Out
˙˙" %
(
˙˙% &
scaleInStartValue
˙˙& 7
,
˙˙7 8
$num
˙˙9 ;
,
˙˙; <
animDeltaTime
˙˙= J
,
˙˙J K
animationDuration
˙˙L ]
)
˙˙] ^
;
˙˙^ _
tempVector3
˚˚ 
.
˚˚ 
y
˚˚ 
=
˚˚ 
Anim
˚˚ 
.
˚˚ 
Quint
˚˚ !
.
˚˚! "
Out
˚˚" %
(
˚˚% &
scaleInStartValue
˚˚& 7
,
˚˚7 8
$num
˚˚9 ;
,
˚˚; <
animDeltaTime
˚˚= J
,
˚˚J K
animationDuration
˚˚L ]
)
˚˚] ^
;
˚˚^ _
theRectTransform
¸¸ 
.
¸¸ 

localScale
¸¸ "
=
¸¸# $
tempVector3
¸¸% 0
;
¸¸0 1
}
˝˝ 
if
ˇˇ 
(
ˇˇ	 

fadeIn
ˇˇ
 
)
ˇˇ 
{
ÄÄ 
theCanvasGroup
ÅÅ 
.
ÅÅ 
alpha
ÅÅ 
=
ÅÅ 
Anim
ÅÅ "
.
ÅÅ" #
Quint
ÅÅ# (
.
ÅÅ( )
Out
ÅÅ) ,
(
ÅÅ, -
fadeInStartValue
ÅÅ- =
,
ÅÅ= >
$num
ÅÅ? A
,
ÅÅA B
animDeltaTime
ÅÅC P
,
ÅÅP Q
animationDuration
ÅÅR c
)
ÅÅc d
;
ÅÅd e
}
ÇÇ 
}
ÉÉ 
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
if
áá 
(
áá 	
transitionInType
áá	 
==
áá 
TransitionType
áá +
.
áá+ ,

RippleMask
áá, 6
)
áá6 7
{
àà 
theRectTransform
ââ 
.
ââ 
	SetParent
ââ  
(
ââ  !
	transform
ââ! *
)
ââ* +
;
ââ+ ,
theRectTransform
ää 
.
ää 
position
ää 
=
ää  !!
screenSpacePosition
ää" 5
;
ää5 6
theRectTransform
åå 
.
åå '
SetSizeWithCurrentAnchors
åå 0
(
åå0 1
RectTransform
åå1 >
.
åå> ?
Axis
åå? C
.
ååC D

Horizontal
ååD N
,
ååN O
thisScreenSize
ååP ^
.
åå^ _
x
åå_ `
)
åå` a
;
ååa b
theRectTransform
çç 
.
çç '
SetSizeWithCurrentAnchors
çç 0
(
çç0 1
RectTransform
çç1 >
.
çç> ?
Axis
çç? C
.
ççC D
Vertical
ççD L
,
ççL M
thisScreenSize
ççN \
.
çç\ ]
y
çç] ^
)
çç^ _
;
çç_ `
}
éé 
else
èè 	
{
êê 
if
ëë 
(
ëë	 

slideIn
ëë
 
!=
ëë 
SlideDirection
ëë #
.
ëë# $
None
ëë$ (
)
ëë( )
{
íí 
theRectTransform
ìì 
.
ìì 
anchoredPosition
ìì (
=
ìì) *
new
ìì+ .
Vector2
ìì/ 6
(
ìì6 7
$num
ìì7 9
,
ìì9 :
$num
ìì; =
)
ìì= >
;
ìì> ?
}
îî 
if
ññ 
(
ññ	 

scaleIn
ññ
 
)
ññ 
{
óó 
theRectTransform
òò 
.
òò 

localScale
òò "
=
òò# $
new
òò% (
Vector3
òò) 0
(
òò0 1
$num
òò1 3
,
òò3 4
$num
òò5 7
,
òò7 8
$num
òò9 ;
)
òò; <
;
òò< =
}
ôô 
if
õõ 
(
õõ	 

fadeIn
õõ
 
)
õõ 
{
úú 
theCanvasGroup
ùù 
.
ùù 
alpha
ùù 
=
ùù 
$num
ùù  
;
ùù  !
}
ûû 
}
üü 
if
°° 
(
°° 	

hideScreen
°°	 
&&
°° 

hideScreen
°° !
!=
°°" $
this
°°% )
)
°°) *
{
¢¢ 

hideScreen
££ 
.
££ #
HideWithoutTransition
££ &
(
££& '
)
££' (
;
££( )

hideScreen
§§ 
=
§§ 
null
§§ 
;
§§ 
}
•• 
state
ßß 

=
ßß 
$num
ßß 
;
ßß 
}
®® 
}
©© 
else
™™ 
if
™™ 

(
™™ 
state
™™ 
==
™™ 
$num
™™ 
)
™™ 
{
´´ 
if
¨¨ 
(
¨¨ 
animDeltaTime
¨¨ 
<=
¨¨ 
animationDuration
¨¨ *
)
¨¨* +
{
≠≠ 
if
ÆÆ 
(
ÆÆ 	
transitionInType
ÆÆ	 
==
ÆÆ 
TransitionType
ÆÆ +
.
ÆÆ+ ,

RippleMask
ÆÆ, 6
)
ÆÆ6 7
{
ØØ 
tempVector2
∞∞ 
=
∞∞ 
currentRipple
∞∞ !
.
∞∞! "
	sizeDelta
∞∞" +
;
∞∞+ ,
tempVector2
±± 
.
±± 
x
±± 
=
±± 
Anim
±± 
.
±± 
Quint
±±  
.
±±  !
In
±±! #
(
±±# $

rippleSize
±±$ .
,
±±. /
$num
±±0 2
,
±±2 3
animDeltaTime
±±4 A
,
±±A B
animationDuration
±±C T
)
±±T U
;
±±U V
tempVector2
≤≤ 
.
≤≤ 
y
≤≤ 
=
≤≤ 
tempVector2
≤≤ !
.
≤≤! "
x
≤≤" #
;
≤≤# $
currentRipple
≥≥ 
.
≥≥ 
	sizeDelta
≥≥ 
=
≥≥ 
tempVector2
≥≥  +
;
≥≥+ ,
theRectTransform
µµ 
.
µµ '
SetSizeWithCurrentAnchors
µµ 0
(
µµ0 1
RectTransform
µµ1 >
.
µµ> ?
Axis
µµ? C
.
µµC D

Horizontal
µµD N
,
µµN O
thisScreenSize
µµP ^
.
µµ^ _
x
µµ_ `
)
µµ` a
;
µµa b
theRectTransform
∂∂ 
.
∂∂ '
SetSizeWithCurrentAnchors
∂∂ 0
(
∂∂0 1
RectTransform
∂∂1 >
.
∂∂> ?
Axis
∂∂? C
.
∂∂C D
Vertical
∂∂D L
,
∂∂L M
thisScreenSize
∂∂N \
.
∂∂\ ]
y
∂∂] ^
)
∂∂^ _
;
∂∂_ `
}
∑∑ 
else
∏∏ 	
{
ππ 
if
∫∫ 
(
∫∫	 

slideOut
∫∫
 
!=
∫∫ 
SlideDirection
∫∫ $
.
∫∫$ %
None
∫∫% )
)
∫∫) *
{
ªª 
tempVector2
ºº 
=
ºº 
theRectTransform
ºº %
.
ºº% &
anchoredPosition
ºº& 6
;
ºº6 7
tempVector2
ΩΩ 
.
ΩΩ 
x
ΩΩ 
=
ΩΩ 
Anim
ΩΩ 
.
ΩΩ 
Quint
ΩΩ !
.
ΩΩ! "
Out
ΩΩ" %
(
ΩΩ% &
$num
ΩΩ& (
,
ΩΩ( )'
slideOutDirectionPosition
ΩΩ* C
.
ΩΩC D
x
ΩΩD E
,
ΩΩE F
animDeltaTime
ΩΩG T
,
ΩΩT U
animationDuration
ΩΩV g
)
ΩΩg h
;
ΩΩh i
tempVector2
ææ 
.
ææ 
y
ææ 
=
ææ 
Anim
ææ 
.
ææ 
Quint
ææ !
.
ææ! "
Out
ææ" %
(
ææ% &
$num
ææ& (
,
ææ( )'
slideOutDirectionPosition
ææ* C
.
ææC D
y
ææD E
,
ææE F
animDeltaTime
ææG T
,
ææT U
animationDuration
ææV g
)
ææg h
;
ææh i
theRectTransform
øø 
.
øø 
anchoredPosition
øø (
=
øø) *
tempVector2
øø+ 6
;
øø6 7
}
¿¿ 
if
¬¬ 
(
¬¬	 

scaleOut
¬¬
 
)
¬¬ 
{
√√ 
tempVector3
ƒƒ 
=
ƒƒ 
theRectTransform
ƒƒ %
.
ƒƒ% &

localScale
ƒƒ& 0
;
ƒƒ0 1
tempVector3
≈≈ 
.
≈≈ 
x
≈≈ 
=
≈≈ 
Anim
≈≈ 
.
≈≈ 
Quint
≈≈ !
.
≈≈! "
Out
≈≈" %
(
≈≈% &
$num
≈≈& (
,
≈≈( )
scaleOutEndValue
≈≈* :
,
≈≈: ;
animDeltaTime
≈≈< I
,
≈≈I J
animationDuration
≈≈K \
)
≈≈\ ]
;
≈≈] ^
tempVector3
∆∆ 
.
∆∆ 
y
∆∆ 
=
∆∆ 
Anim
∆∆ 
.
∆∆ 
Quint
∆∆ !
.
∆∆! "
Out
∆∆" %
(
∆∆% &
$num
∆∆& (
,
∆∆( )
scaleOutEndValue
∆∆* :
,
∆∆: ;
animDeltaTime
∆∆< I
,
∆∆I J
animationDuration
∆∆K \
)
∆∆\ ]
;
∆∆] ^
theRectTransform
«« 
.
«« 

localScale
«« "
=
««# $
tempVector3
««% 0
;
««0 1
}
»» 
if
   
(
  	 

fadeOut
  
 
)
   
{
ÀÀ 
theCanvasGroup
ÃÃ 
.
ÃÃ 
alpha
ÃÃ 
=
ÃÃ 
Anim
ÃÃ "
.
ÃÃ" #
Quint
ÃÃ# (
.
ÃÃ( )
Out
ÃÃ) ,
(
ÃÃ, -
$num
ÃÃ- /
,
ÃÃ/ 0
fadeOutEndValue
ÃÃ1 @
,
ÃÃ@ A
animDeltaTime
ÃÃB O
,
ÃÃO P
animationDuration
ÃÃQ b
)
ÃÃb c
;
ÃÃc d
}
ÕÕ 
}
ŒŒ 
}
œœ 
else
–– 
{
—— 
theRectTransform
““ 
.
““ 
	SetParent
““ 
(
““  
	transform
““  )
)
““) *
;
““* +
theRectTransform
”” 
.
”” 
position
”” 
=
””  !
screenSpacePosition
””! 4
;
””4 5
screenSpace
‘‘ 
.
‘‘ 
	SetActive
‘‘ 
(
‘‘ 
false
‘‘  
)
‘‘  !
;
‘‘! "
state
’’ 

=
’’ 
$num
’’ 
;
’’ 
}
÷÷ 
}
◊◊ 
}
ÿÿ 
}
ŸŸ 
}⁄⁄ ƒ
MF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\CheckboxFillerControl.cs
public 
class !
CheckboxFillerControl "
:# $
MonoBehaviour% 2
{ 
public 
Image 
[ 
] 
fillers 
; 
} ÀI
WF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\Benchmark02.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
Benchmark02 
: 
MonoBehaviour ,
{		 
public 
int 
	SpawnType 
= 
$num  
;  !
public 
int 
NumberOfNPC 
=  
$num! #
;# $
public 
bool #
IsTextObjectScaleStatic +
;+ ,
private #
TextMeshProFloatingText '
floatingText_Script( ;
;; <
void 
Start 
( 
) 
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
NumberOfNPC  +
;+ ,
i- .
++. 0
)0 1
{ 
if 
( 
	SpawnType 
==  
$num! "
)" #
{ 

GameObject 
go !
=" #
new$ '

GameObject( 2
(2 3
)3 4
;4 5
go 
. 
	transform  
.  !
position! )
=* +
new, /
Vector30 7
(7 8
Random8 >
.> ?
Range? D
(D E
-E F
$numF I
,I J
$numK N
)N O
,O P
$numQ V
,V W
RandomX ^
.^ _
Range_ d
(d e
-e f
$numf i
,i j
$numk n
)n o
)o p
;p q
TextMeshPro 
textMeshPro  +
=, -
go. 0
.0 1
AddComponent1 =
<= >
TextMeshPro> I
>I J
(J K
)K L
;L M
textMeshPro!! 
.!!  !
autoSizeTextContainer!!  5
=!!6 7
true!!8 <
;!!< =
textMeshPro"" 
.""  
rectTransform""  -
.""- .
pivot"". 3
=""4 5
new""6 9
Vector2"": A
(""A B
$num""B F
,""F G
$num""H I
)""I J
;""J K
textMeshPro$$ 
.$$  
	alignment$$  )
=$$* + 
TextAlignmentOptions$$, @
.$$@ A
Bottom$$A G
;$$G H
textMeshPro%% 
.%%  
fontSize%%  (
=%%) *
$num%%+ -
;%%- .
textMeshPro&& 
.&&  
enableKerning&&  -
=&&. /
false&&0 5
;&&5 6
textMeshPro(( 
.((  
color((  %
=((& '
new((( +
Color32((, 3
(((3 4
$num((4 7
,((7 8
$num((9 <
,((< =
$num((> ?
,((? @
$num((A D
)((D E
;((E F
textMeshPro)) 
.))  
text))  $
=))% &
$str))' *
;))* +
textMeshPro** 
.**  #
isTextObjectScaleStatic**  7
=**8 9#
IsTextObjectScaleStatic**: Q
;**Q R
floatingText_Script-- '
=--( )
go--* ,
.--, -
AddComponent--- 9
<--9 :#
TextMeshProFloatingText--: Q
>--Q R
(--R S
)--S T
;--T U
floatingText_Script.. '
...' (
	SpawnType..( 1
=..2 3
$num..4 5
;..5 6
floatingText_Script// '
.//' (#
IsTextObjectScaleStatic//( ?
=//@ A#
IsTextObjectScaleStatic//B Y
;//Y Z
}00 
else11 
if11 
(11 
	SpawnType11 "
==11# %
$num11& '
)11' (
{22 

GameObject44 
go44 !
=44" #
new44$ '

GameObject44( 2
(442 3
)443 4
;444 5
go55 
.55 
	transform55  
.55  !
position55! )
=55* +
new55, /
Vector3550 7
(557 8
Random558 >
.55> ?
Range55? D
(55D E
-55E F
$num55F I
,55I J
$num55K N
)55N O
,55O P
$num55Q V
,55V W
Random55X ^
.55^ _
Range55_ d
(55d e
-55e f
$num55f i
,55i j
$num55k n
)55n o
)55o p
;55p q
TextMesh77 
textMesh77 %
=77& '
go77( *
.77* +
AddComponent77+ 7
<777 8
TextMesh778 @
>77@ A
(77A B
)77B C
;77C D
textMesh88 
.88 
font88 !
=88" #
	Resources88$ -
.88- .
Load88. 2
<882 3
Font883 7
>887 8
(888 9
$str889 F
)88F G
;88G H
textMesh99 
.99 
GetComponent99 )
<99) *
Renderer99* 2
>992 3
(993 4
)994 5
.995 6
sharedMaterial996 D
=99E F
textMesh99G O
.99O P
font99P T
.99T U
material99U ]
;99] ^
textMesh;; 
.;; 
anchor;; #
=;;$ %

TextAnchor;;& 0
.;;0 1
LowerCenter;;1 <
;;;< =
textMesh<< 
.<< 
fontSize<< %
=<<& '
$num<<( *
;<<* +
textMesh>> 
.>> 
color>> "
=>># $
new>>% (
Color32>>) 0
(>>0 1
$num>>1 4
,>>4 5
$num>>6 9
,>>9 :
$num>>; <
,>>< =
$num>>> A
)>>A B
;>>B C
textMesh?? 
.?? 
text?? !
=??" #
$str??$ '
;??' (
floatingText_ScriptBB '
=BB( )
goBB* ,
.BB, -
AddComponentBB- 9
<BB9 :#
TextMeshProFloatingTextBB: Q
>BBQ R
(BBR S
)BBS T
;BBT U
floatingText_ScriptCC '
.CC' (
	SpawnTypeCC( 1
=CC2 3
$numCC4 5
;CC5 6
}DD 
elseEE 
ifEE 
(EE 
	SpawnTypeEE "
==EE# %
$numEE& '
)EE' (
{FF 

GameObjectHH 
goHH !
=HH" #
newHH$ '

GameObjectHH( 2
(HH2 3
)HH3 4
;HH4 5
CanvasII 
canvasII !
=II" #
goII$ &
.II& '
AddComponentII' 3
<II3 4
CanvasII4 :
>II: ;
(II; <
)II< =
;II= >
canvasJJ 
.JJ 
worldCameraJJ &
=JJ' (
CameraJJ) /
.JJ/ 0
mainJJ0 4
;JJ4 5
goLL 
.LL 
	transformLL  
.LL  !

localScaleLL! +
=LL, -
newLL. 1
Vector3LL2 9
(LL9 :
$numLL: >
,LL> ?
$numLL@ D
,LLD E
$numLLF J
)LLJ K
;LLK L
goMM 
.MM 
	transformMM  
.MM  !
positionMM! )
=MM* +
newMM, /
Vector3MM0 7
(MM7 8
RandomMM8 >
.MM> ?
RangeMM? D
(MMD E
-MME F
$numMMF I
,MMI J
$numMMK N
)MMN O
,MMO P
$numMMQ S
,MMS T
RandomMMU [
.MM[ \
RangeMM\ a
(MMa b
-MMb c
$numMMc f
,MMf g
$numMMh k
)MMk l
)MMl m
;MMm n
TextMeshProUGUIOO #

textObjectOO$ .
=OO/ 0
newOO1 4

GameObjectOO5 ?
(OO? @
)OO@ A
.OOA B
AddComponentOOB N
<OON O
TextMeshProUGUIOOO ^
>OO^ _
(OO_ `
)OO` a
;OOa b

textObjectPP 
.PP 
rectTransformPP ,
.PP, -
	SetParentPP- 6
(PP6 7
goPP7 9
.PP9 :
	transformPP: C
,PPC D
falsePPE J
)PPJ K
;PPK L

textObjectRR 
.RR 
colorRR $
=RR% &
newRR' *
Color32RR+ 2
(RR2 3
$numRR3 6
,RR6 7
$numRR8 ;
,RR; <
$numRR= >
,RR> ?
$numRR@ C
)RRC D
;RRD E

textObjectSS 
.SS 
	alignmentSS (
=SS) * 
TextAlignmentOptionsSS+ ?
.SS? @
BottomSS@ F
;SSF G

textObjectTT 
.TT 
fontSizeTT '
=TT( )
$numTT* ,
;TT, -

textObjectUU 
.UU 
textUU #
=UU$ %
$strUU& )
;UU) *
floatingText_ScriptXX '
=XX( )
goXX* ,
.XX, -
AddComponentXX- 9
<XX9 :#
TextMeshProFloatingTextXX: Q
>XXQ R
(XXR S
)XXS T
;XXT U
floatingText_ScriptYY '
.YY' (
	SpawnTypeYY( 1
=YY2 3
$numYY4 5
;YY5 6
}ZZ 
}^^ 
}__ 	
}`` 
}aa ¨G
EF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\RippleControl.cs
	namespace 	

MaterialUI
 
{ 
public 
static 
class 
RippleControl "
{ 
static 

GameObject	 
ripplePrefab  
;  !
static 

GameObject	 
currentRipple !
;! "
public 
static	 
void 

Initialize 
(  !
)! "
{ 
if 
( 
ripplePrefab 
== 
null 
) 
ripplePrefab 
= 
	Resources 
. 
Load !
(" #
$str# ,
,, -
typeof. 4
(4 5

GameObject5 ?
)? @
)@ A
asB D

GameObjectE O
;O P
} 
public 
static	 

GameObject 

MakeRipple %
(& '
Vector3' .
position/ 7
,7 8
	Transform9 B
parentC I
,I J
intK N
sizeO S
,S T
ColorU Z
color[ `
)` a
{ 
currentRipple 
= 

GameObject 
. 
Instantiate )
(* +
ripplePrefab+ 7
)7 8
as9 ;

GameObject< F
;F G
Canvas 	
parentCanvas
 
= 
parent 
.   
GetComponentInParent  4
<4 5
Canvas5 ;
>; <
(= >
)> ?
;? @
if!! 
(!! 
parentCanvas!! 
.!! 

renderMode!! 
==!! !

RenderMode!!" ,
.!!, -
ScreenSpaceOverlay!!- ?
)!!? @
currentRipple"" 
."" 
GetComponent"" 
<"" 
RectTransform"" ,
>"", -
(""- .
)"". /
.""/ 0
position""0 8
=""9 :
position""; C
;""C D
else## 
currentRipple$$ 
.$$ 
	transform$$ 
.$$ 
localPosition$$ )
=$$* +
position$$, 4
;$$4 5
currentRipple&& 
.&& 
	transform&& 
.&& 
	SetParent&& $
(&&% &
parent&&& ,
)&&, -
;&&- .
currentRipple(( 
.(( 
GetComponent(( 
<(( 
RectTransform(( +
>((+ ,
(((- .
)((. /
.((/ 0
localRotation((0 =
=((> ?
new((@ C

Quaternion((D N
(((O P
$num((P R
,((R S
$num((T V
,((V W
$num((X Z
,((Z [
$num((\ ^
)((^ _
;((_ `
currentRipple** 
.** 
GetComponent** 
<** 

RippleAnim** (
>**( )
(*** +
)**+ ,
.**, -

MakeRipple**- 7
(**8 9
size**9 =
,**= >
$num**? A
,**A B
$num**C G
,**G H
$num**I M
,**M N
color**O T
,**T U
new**V Y
Vector3**Z a
(**b c
$num**c d
,**d e
$num**f g
,**g h
$num**i j
)**j k
)**k l
;**l m
return,, 	
currentRipple,,
 
;,, 
}-- 
public// 
static//	 

GameObject// 

MakeRipple// %
(//& '
Vector3//' .
position/// 7
,//7 8
	Transform//9 B
parent//C I
,//I J
int//K N
size//O S
,//S T
float//U Z
	animSpeed//[ d
,//d e
float//f k

startAlpha//l v
,//v w
float//x }
endAlpha	//~ Ü
,
//Ü á
Color
//à ç
color
//é ì
)
//ì î
{00 
currentRipple11 
=11 

GameObject11 
.11 
Instantiate11 )
(11* +
ripplePrefab11+ 7
)117 8
as119 ;

GameObject11< F
;11F G
Canvas33 	
parentCanvas33
 
=33 
parent33 
.33   
GetComponentInParent33  4
<334 5
Canvas335 ;
>33; <
(33= >
)33> ?
;33? @
if55 
(55 
parentCanvas55 
.55 

renderMode55 
==55 !

RenderMode55" ,
.55, -
ScreenSpaceOverlay55- ?
)55? @
currentRipple66 
.66 
GetComponent66 
<66 
RectTransform66 ,
>66, -
(66- .
)66. /
.66/ 0
position660 8
=669 :
position66; C
;66C D
else77 
currentRipple88 
.88 
	transform88 
.88 
localPosition88 )
=88* +
position88, 4
;884 5
currentRipple:: 
.:: 
	transform:: 
.:: 
	SetParent:: $
(::% &
parent::& ,
)::, -
;::- .
currentRipple<< 
.<< 
GetComponent<< 
<<< 
RectTransform<< +
><<+ ,
(<<- .
)<<. /
.<</ 0
localRotation<<0 =
=<<> ?
new<<@ C

Quaternion<<D N
(<<O P
$num<<P R
,<<R S
$num<<T V
,<<V W
$num<<X Z
,<<Z [
$num<<\ ^
)<<^ _
;<<_ `
currentRipple>> 
.>> 
GetComponent>> 
<>> 

RippleAnim>> (
>>>( )
(>>* +
)>>+ ,
.>>, -

MakeRipple>>- 7
(>>8 9
size>>9 =
,>>= >
	animSpeed>>? H
,>>H I

startAlpha>>J T
,>>T U
endAlpha>>V ^
,>>^ _
color>>` e
,>>e f
new>>g j
Vector3>>k r
(>>s t
$num>>t u
,>>u v
$num>>w x
,>>x y
$num>>z {
)>>{ |
)>>| }
;>>} ~
return@@ 	
currentRipple@@
 
;@@ 
}AA 
publicCC 
staticCC	 

GameObjectCC 

MakeRippleCC %
(CC& '
Vector3CC' .
positionCC/ 7
,CC7 8
	TransformCC9 B
parentCCC I
,CCI J
intCCK N
sizeCCO S
,CCS T
floatCCU Z
	animSpeedCC[ d
,CCd e
floatCCf k

startAlphaCCl v
,CCv w
floatCCx }
endAlpha	CC~ Ü
,
CCÜ á
Color
CCà ç
color
CCé ì
,
CCì î
Vector3
CCï ú
endPosition
CCù ®
)
CC® ©
{DD 
currentRippleEE 
=EE 

GameObjectEE 
.EE 
InstantiateEE )
(EE* +
ripplePrefabEE+ 7
)EE7 8
asEE9 ;

GameObjectEE< F
;EEF G
CanvasGG 	
parentCanvasGG
 
=GG 
parentGG 
.GG   
GetComponentInParentGG  4
<GG4 5
CanvasGG5 ;
>GG; <
(GG= >
)GG> ?
;GG? @
ifII 
(II 
parentCanvasII 
.II 

renderModeII 
==II !

RenderModeII" ,
.II, -
ScreenSpaceOverlayII- ?
)II? @
currentRippleJJ 
.JJ 
GetComponentJJ 
<JJ 
RectTransformJJ ,
>JJ, -
(JJ- .
)JJ. /
.JJ/ 0
positionJJ0 8
=JJ9 :
positionJJ; C
;JJC D
elseKK 
currentRippleLL 
.LL 
	transformLL 
.LL 
localPositionLL )
=LL* +
positionLL, 4
;LL4 5
currentRippleNN 
.NN 
	transformNN 
.NN 
	SetParentNN $
(NN% &
parentNN& ,
)NN, -
;NN- .
currentRipplePP 
.PP 
GetComponentPP 
<PP 
RectTransformPP +
>PP+ ,
(PP- .
)PP. /
.PP/ 0
localRotationPP0 =
=PP> ?
newPP@ C

QuaternionPPD N
(PPO P
$numPPP R
,PPR S
$numPPT V
,PPV W
$numPPX Z
,PPZ [
$numPP\ ^
)PP^ _
;PP_ `
currentRippleRR 
.RR 
GetComponentRR 
<RR 

RippleAnimRR (
>RR( )
(RR* +
)RR+ ,
.RR, -

MakeRippleRR- 7
(RR8 9
sizeRR9 =
,RR= >
	animSpeedRR? H
,RRH I

startAlphaRRJ T
,RRT U
endAlphaRRV ^
,RR^ _
colorRR` e
,RRe f
endPositionRRg r
)RRr s
;RRs t
returnTT 	
currentRippleTT
 
;TT 
}UU 
}VV 
}WW ÷)
[F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TextMeshSpawner.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
TextMeshSpawner  
:! "
MonoBehaviour# 0
{		 
public 
int 
	SpawnType 
= 
$num  
;  !
public 
int 
NumberOfNPC 
=  
$num! #
;# $
public 
Font 
TheFont 
; 
private #
TextMeshProFloatingText '
floatingText_Script( ;
;; <
void 
Awake 
( 
) 
{ 	
} 	
void 
Start 
( 
) 
{ 	
for 
( 
int 
i 
= 
$num 
; 
i 
< 
NumberOfNPC  +
;+ ,
i- .
++. 0
)0 1
{ 
if 
( 
	SpawnType 
==  
$num! "
)" #
{ 

GameObject   
go   !
=  " #
new  $ '

GameObject  ( 2
(  2 3
)  3 4
;  4 5
go!! 
.!! 
	transform!!  
.!!  !
position!!! )
=!!* +
new!!, /
Vector3!!0 7
(!!7 8
Random!!8 >
.!!> ?
Range!!? D
(!!D E
-!!E F
$num!!F I
,!!I J
$num!!K N
)!!N O
,!!O P
$num!!Q U
,!!U V
Random!!W ]
.!!] ^
Range!!^ c
(!!c d
-!!d e
$num!!e h
,!!h i
$num!!j m
)!!m n
)!!n o
;!!o p
TextMeshPro(( 
textMeshPro((  +
=((, -
go((. 0
.((0 1
AddComponent((1 =
<((= >
TextMeshPro((> I
>((I J
(((J K
)((K L
;((L M
textMeshPro++ 
.++  
fontSize++  (
=++) *
$num+++ -
;++- .
textMeshPro-- 
.--  
text--  $
=--% &
$str--' *
;--* +
textMeshPro.. 
...  
color..  %
=..& '
new..( +
Color32.., 3
(..3 4
$num..4 7
,..7 8
$num..9 <
,..< =
$num..> ?
,..? @
$num..A D
)..D E
;..E F
floatingText_Script33 '
=33( )
go33* ,
.33, -
AddComponent33- 9
<339 :#
TextMeshProFloatingText33: Q
>33Q R
(33R S
)33S T
;33T U
floatingText_Script44 '
.44' (
	SpawnType44( 1
=442 3
$num444 5
;445 6
}55 
else66 
{77 

GameObject99 
go99 !
=99" #
new99$ '

GameObject99( 2
(992 3
)993 4
;994 5
go:: 
.:: 
	transform::  
.::  !
position::! )
=::* +
new::, /
Vector3::0 7
(::7 8
Random::8 >
.::> ?
Range::? D
(::D E
-::E F
$num::F I
,::I J
$num::K N
)::N O
,::O P
$num::Q U
,::U V
Random::W ]
.::] ^
Range::^ c
(::c d
-::d e
$num::e h
,::h i
$num::j m
)::m n
)::n o
;::o p
TextMesh>> 
textMesh>> %
=>>& '
go>>( *
.>>* +
AddComponent>>+ 7
<>>7 8
TextMesh>>8 @
>>>@ A
(>>A B
)>>B C
;>>C D
textMesh?? 
.?? 
GetComponent?? )
<??) *
Renderer??* 2
>??2 3
(??3 4
)??4 5
.??5 6
sharedMaterial??6 D
=??E F
TheFont??G N
.??N O
material??O W
;??W X
textMesh@@ 
.@@ 
font@@ !
=@@" #
TheFont@@$ +
;@@+ ,
textMeshAA 
.AA 
anchorAA #
=AA$ %

TextAnchorAA& 0
.AA0 1
LowerCenterAA1 <
;AA< =
textMeshBB 
.BB 
fontSizeBB %
=BB& '
$numBB( *
;BB* +
textMeshDD 
.DD 
colorDD "
=DD# $
newDD% (
Color32DD) 0
(DD0 1
$numDD1 4
,DD4 5
$numDD6 9
,DD9 :
$numDD; <
,DD< =
$numDD> A
)DDA B
;DDB C
textMeshEE 
.EE 
textEE !
=EE" #
$strEE$ '
;EE' (
floatingText_ScriptHH '
=HH( )
goHH* ,
.HH, -
AddComponentHH- 9
<HH9 :#
TextMeshProFloatingTextHH: Q
>HHQ R
(HHR S
)HHS T
;HHT U
floatingText_ScriptII '
.II' (
	SpawnTypeII( 1
=II2 3
$numII4 5
;II5 6
}JJ 
}KK 
}LL 	
}NN 
}OO ús
EF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\MenuArrowAnim.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
MenuArrowAnim 
: 
MonoBehaviour +
{ 
private 	
int
 
state 
; 
private 	
float
 
animStartTime 
; 
private 	
float
 
animDeltaTime 
; 
public 
float	 
animationDuration  
=! "
$num# %
;% &
private 	
RectTransform
 
thisTransform %
;% &
public 
RectTransform	 
topTransform #
;# $
public 
RectTransform	 
middleTransform &
;& '
public 
RectTransform	 
bottomTransform &
;& '
private 	
Vector2
 
tempVector2 
; 
private 	
Vector3
 
tempVector3 
; 
private 	

Quaternion
 
tempQuaternion #
;# $
[   
HideInInspector   
]   
public   
bool   
isArrow    '
;  ' (
void"" 
Awake"" 
("" 
)"" 
{## 
thisTransform$$ 
=$$ 

gameObject$$ 
.$$ 
GetComponent$$ *
<$$* +
RectTransform$$+ 8
>$$8 9
($$9 :
)$$: ;
;$$; <
}%% 
public'' 
void''	 
Toggle'' 
('' 
)'' 
{(( 
if)) 
()) 
isArrow)) 
))) 
Menu** 
(** 	
)**	 

;**
 
else++ 
Arrow,, 	
(,,	 

),,
 
;,, 
}-- 
public// 
void//	 
Arrow// 
(// 
)// 
{00 
animStartTime11 
=11 
Time11 
.11  
realtimeSinceStartup11 ,
;11, -
state22 
=22	 

$num22 
;22 
isArrow33 

=33 
true33 
;33 
}44 
public66 
void66	 
Menu66 
(66 
)66 
{77 
animStartTime88 
=88 
Time88 
.88  
realtimeSinceStartup88 ,
;88, -
state99 
=99	 

$num99 
;99 
isArrow:: 

=:: 
false:: 
;:: 
};; 
void== 
Update== 
(== 
)== 
{>> 
animDeltaTime?? 
=?? 
Time?? 
.??  
realtimeSinceStartup?? ,
-??- .
animStartTime??/ <
;??< =
ifAA 
(AA 
stateAA 
==AA 
$numAA 
)AA 
{BB 
ifCC 
(CC 
animDeltaTimeCC 
<=CC 
animationDurationCC *
)CC* +
{DD 
tempVector3FF 
=FF 
thisTransformFF  
.FF  !
localEulerAnglesFF! 1
;FF1 2
tempVector3GG 
.GG 
zGG 
=GG 
AnimGG 
.GG 
QuintGG 
.GG  
SoftOutGG  '
(GG' (
$numGG( *
,GG* +
-GG, -
$numGG- 1
,GG1 2
animDeltaTimeGG3 @
,GG@ A
animationDurationGGB S
)GGS T
;GGT U
thisTransformHH 
.HH 
localEulerAnglesHH #
=HH$ %
tempVector3HH& 1
;HH1 2
tempVector2KK 
=KK 
topTransformKK 
.KK  
pivotKK  %
;KK% &
tempVector2LL 
.LL 
xLL 
=LL 
AnimLL 
.LL 
QuintLL 
.LL  
SoftOutLL  '
(LL' (
$numLL( ,
,LL, -
$numLL. 0
,LL0 1
animDeltaTimeLL2 ?
,LL? @
animationDurationLLA R
)LLR S
;LLS T
topTransformMM 
.MM 
pivotMM 
=MM 
tempVector2MM %
;MM% &
tempVector2OO 
=OO 
topTransformOO 
.OO  
	sizeDeltaOO  )
;OO) *
tempVector2PP 
.PP 
xPP 
=PP 
AnimPP 
.PP 
QuintPP 
.PP  
SoftOutPP  '
(PP' (
$numPP( +
,PP+ ,
$numPP- 0
,PP0 1
animDeltaTimePP2 ?
,PP? @
animationDurationPPA R
)PPR S
;PPS T
topTransformQQ 
.QQ 
	sizeDeltaQQ 
=QQ 
tempVector2QQ )
;QQ) *
topTransformSS 
.SS 
localPositionSS 
=SS  !
AnimSS" &
.SS& '
QuintSS' ,
.SS, -
SoftOutSS- 4
(SS4 5
newSS5 8
Vector2SS9 @
(SS@ A
$numSSA C
,SSC D
$numSSE G
)SSG H
,SSH I
newSSJ M
Vector2SSN U
(SSU V
$numSSV Z
,SSZ [
-SS\ ]
$numSS] a
)SSa b
,SSb c
animDeltaTimeSSd q
,SSq r
animationDuration	SSs Ñ
)
SSÑ Ö
;
SSÖ Ü
tempVector3UU 
=UU 
topTransformUU 
.UU  
localEulerAnglesUU  0
;UU0 1
tempVector3VV 
.VV 
zVV 
=VV 
AnimVV 
.VV 
QuintVV 
.VV  
SoftOutVV  '
(VV' (
$numVV( *
,VV* +
-VV, -
$numVV- 0
,VV0 1
animDeltaTimeVV2 ?
,VV? @
animationDurationVVA R
)VVR S
;VVS T
topTransformWW 
.WW 
localEulerAnglesWW "
=WW# $
tempVector3WW% 0
;WW0 1
tempVector2ZZ 
=ZZ 
bottomTransformZZ "
.ZZ" #
pivotZZ# (
;ZZ( )
tempVector2[[ 
.[[ 
x[[ 
=[[ 
Anim[[ 
.[[ 
Quint[[ 
.[[  
SoftOut[[  '
([[' (
$num[[( ,
,[[, -
$num[[. 0
,[[0 1
animDeltaTime[[2 ?
,[[? @
animationDuration[[A R
)[[R S
;[[S T
bottomTransform\\ 
.\\ 
pivot\\ 
=\\ 
tempVector2\\ (
;\\( )
tempVector2^^ 
=^^ 
bottomTransform^^ "
.^^" #
	sizeDelta^^# ,
;^^, -
tempVector2__ 
.__ 
x__ 
=__ 
Anim__ 
.__ 
Quint__ 
.__  
SoftOut__  '
(__' (
$num__( +
,__+ ,
$num__- 0
,__0 1
animDeltaTime__2 ?
,__? @
animationDuration__A R
)__R S
;__S T
bottomTransform`` 
.`` 
	sizeDelta`` 
=``  
tempVector2``! ,
;``, -
bottomTransformbb 
.bb 
localPositionbb "
=bb# $
Animbb% )
.bb) *
Quintbb* /
.bb/ 0
SoftOutbb0 7
(bb7 8
newbb8 ;
Vector2bb< C
(bbC D
$numbbD F
,bbF G
-bbH I
$numbbI K
)bbK L
,bbL M
newbbN Q
Vector2bbR Y
(bbY Z
$numbbZ ^
,bb^ _
$numbb` d
)bbd e
,bbe f
animDeltaTimebbg t
,bbt u
animationDuration	bbv á
)
bbá à
;
bbà â
tempVector3dd 
=dd 
bottomTransformdd "
.dd" #
localEulerAnglesdd# 3
;dd3 4
tempVector3ee 
.ee 
zee 
=ee 
Animee 
.ee 
Quintee 
.ee  
SoftOutee  '
(ee' (
$numee( *
,ee* +
$numee, /
,ee/ 0
animDeltaTimeee1 >
,ee> ?
animationDurationee@ Q
)eeQ R
;eeR S
bottomTransformff 
.ff 
localEulerAnglesff %
=ff& '
tempVector3ff( 3
;ff3 4
}gg 
elsehh 
{ii 
statejj 

=jj 
$numjj 
;jj 
}kk 
}ll 
elsemm 
ifmm 

(mm 
statemm 
==mm 
$nummm 
)mm 
{nn 
ifoo 
(oo 
animDeltaTimeoo 
<=oo 
animationDurationoo *
)oo* +
{pp 
tempVector3rr 
=rr 
thisTransformrr  
.rr  !
localEulerAnglesrr! 1
;rr1 2
tempVector3ss 
.ss 
zss 
=ss 
Animss 
.ss 
Quintss 
.ss  
SoftOutss  '
(ss' (
$numss( ,
,ss, -
$numss. 0
,ss0 1
animDeltaTimess2 ?
,ss? @
animationDurationssA R
)ssR S
;ssS T
thisTransformtt 
.tt 
localEulerAnglestt #
=tt$ %
tempVector3tt& 1
;tt1 2
tempVector2ww 
=ww 
topTransformww 
.ww  
pivotww  %
;ww% &
tempVector2xx 
.xx 
xxx 
=xx 
Animxx 
.xx 
Quintxx 
.xx  
SoftOutxx  '
(xx' (
$numxx( *
,xx* +
$numxx, 0
,xx0 1
animDeltaTimexx2 ?
,xx? @
animationDurationxxA R
)xxR S
;xxS T
topTransformyy 
.yy 
pivotyy 
=yy 
tempVector2yy %
;yy% &
tempVector2{{ 
={{ 
topTransform{{ 
.{{  
	sizeDelta{{  )
;{{) *
tempVector2|| 
.|| 
x|| 
=|| 
Anim|| 
.|| 
Quint|| 
.||  
SoftOut||  '
(||' (
$num||( +
,||+ ,
$num||- 0
,||0 1
animDeltaTime||2 ?
,||? @
animationDuration||A R
)||R S
;||S T
topTransform}} 
.}} 
	sizeDelta}} 
=}} 
tempVector2}} )
;}}) *
topTransform 
. 
localPosition 
=  !
Anim" &
.& '
Quint' ,
., -
SoftOut- 4
(4 5
new5 8
Vector29 @
(@ A
$numA E
,E F
-G H
$numH L
)L M
,M N
newO R
Vector2S Z
(Z [
$num[ ]
,] ^
$num_ `
)` a
,a b
animDeltaTimec p
,p q
animationDuration	r É
)
É Ñ
;
Ñ Ö
tempVector3
ÅÅ 
=
ÅÅ 
topTransform
ÅÅ 
.
ÅÅ  
localEulerAngles
ÅÅ  0
;
ÅÅ0 1
tempVector3
ÇÇ 
.
ÇÇ 
z
ÇÇ 
=
ÇÇ 
Anim
ÇÇ 
.
ÇÇ 
Quint
ÇÇ 
.
ÇÇ  
SoftOut
ÇÇ  '
(
ÇÇ' (
-
ÇÇ( )
$num
ÇÇ) ,
,
ÇÇ, -
$num
ÇÇ. 0
,
ÇÇ0 1
animDeltaTime
ÇÇ2 ?
,
ÇÇ? @
animationDuration
ÇÇA R
)
ÇÇR S
;
ÇÇS T
topTransform
ÉÉ 
.
ÉÉ 
localEulerAngles
ÉÉ "
=
ÉÉ# $
tempVector3
ÉÉ% 0
;
ÉÉ0 1
tempVector2
ÜÜ 
=
ÜÜ 
bottomTransform
ÜÜ "
.
ÜÜ" #
pivot
ÜÜ# (
;
ÜÜ( )
tempVector2
áá 
.
áá 
x
áá 
=
áá 
Anim
áá 
.
áá 
Quint
áá 
.
áá  
SoftOut
áá  '
(
áá' (
$num
áá( *
,
áá* +
$num
áá, 0
,
áá0 1
animDeltaTime
áá2 ?
,
áá? @
animationDuration
ááA R
)
ááR S
;
ááS T
bottomTransform
àà 
.
àà 
pivot
àà 
=
àà 
tempVector2
àà (
;
àà( )
tempVector2
ää 
=
ää 
bottomTransform
ää "
.
ää" #
	sizeDelta
ää# ,
;
ää, -
tempVector2
ãã 
.
ãã 
x
ãã 
=
ãã 
Anim
ãã 
.
ãã 
Quint
ãã 
.
ãã  
SoftOut
ãã  '
(
ãã' (
$num
ãã( +
,
ãã+ ,
$num
ãã- 0
,
ãã0 1
animDeltaTime
ãã2 ?
,
ãã? @
animationDuration
ããA R
)
ããR S
;
ããS T
bottomTransform
åå 
.
åå 
	sizeDelta
åå 
=
åå  
tempVector2
åå! ,
;
åå, -
bottomTransform
éé 
.
éé 
localPosition
éé "
=
éé# $
Anim
éé% )
.
éé) *
Quint
éé* /
.
éé/ 0
SoftOut
éé0 7
(
éé7 8
new
éé8 ;
Vector2
éé< C
(
ééC D
$num
ééD H
,
ééH I
$num
ééJ N
)
ééN O
,
ééO P
new
ééQ T
Vector2
ééU \
(
éé\ ]
$num
éé] _
,
éé_ `
-
ééa b
$num
ééb d
)
ééd e
,
éée f
animDeltaTime
éég t
,
éét u 
animationDurationéév á
)ééá à
;ééà â
tempVector3
êê 
=
êê 
bottomTransform
êê "
.
êê" #
localEulerAngles
êê# 3
;
êê3 4
tempVector3
ëë 
.
ëë 
z
ëë 
=
ëë 
Anim
ëë 
.
ëë 
Quint
ëë 
.
ëë  
SoftOut
ëë  '
(
ëë' (
$num
ëë( +
,
ëë+ ,
$num
ëë- /
,
ëë/ 0
animDeltaTime
ëë1 >
,
ëë> ?
animationDuration
ëë@ Q
)
ëëQ R
;
ëëR S
bottomTransform
íí 
.
íí 
localEulerAngles
íí %
=
íí& '
tempVector3
íí( 3
;
íí3 4
}
ìì 
else
îî 
{
ïï 
state
ññ 

=
ññ 
$num
ññ 
;
ññ 
}
óó 
}
òò 
}
ôô 
}
öö 
}õõ ≠
CF:\Github\CS 230\unityProj\Assets\Scenes\Scripts\SceneSwitchQuiz.cs
public 
class 
SceneSwitchQuiz 
: 
MonoBehaviour ,
{ 
public 

void 
playChapter5 
( 
) 
{  
SceneManager 
. 
	LoadScene 
( 
$num  
)  !
;! "
} 
public 

void 
playChapter1 
( 
) 
{ 
SceneManager 
. 
	LoadScene 
( 
$num  
)  !
;! "
} 
public 

void 
playChapter2 
( 
) 
{ 
SceneManager 
. 
	LoadScene 
( 
$num  
)  !
;! "
} 
public 

void 
playInstructions  
(  !
)! "
{ 
SceneManager 
. 
	LoadScene 
( 
$num  
)  !
;! "
} 
public   

void   
playSelectQuiz   
(   
)    
{!! 
SceneManager"" 
."" 
	LoadScene"" 
("" 
$num""  
)""  !
;""! "
}## 
public%% 

void%% 
playResults%% 
(%% 
)%% 
{&& 
SceneManager'' 
.'' 
	LoadScene'' 
('' 
$num''  
)''  !
;''! "
}(( 
public** 

void** 
tempBaclQuiz** 
(** 
)** 
{++ 
SceneManager,, 
.,, 
	LoadScene,, 
(,, 
$num,,  
),,  !
;,,! "
}-- 
}.. †
WF:\Github\CS 230\unityProj\Assets\MaterialUI\Examples\Scripts\05 - Sliders\Example05.cs
public 
class 
	Example05 
: 
MonoBehaviour &
{ 
[ 
SerializeField 
] 
private 
Text 
m_sliderTextR ,
;, -
[		 
SerializeField		 
]		 
private		 
Text		 
m_sliderTextG		 ,
;		, -
[

 
SerializeField

 
]

 
private

 
Text

 
m_sliderTextB

 ,
;

, -
[ 
SerializeField 
] 
private 
Slider  
	m_sliderR! *
;* +
[ 
SerializeField 
] 
private 
Slider  
	m_sliderG! *
;* +
[ 
SerializeField 
] 
private 
Slider  
	m_sliderB! *
;* +
[ 
SerializeField 
] 
private 
Image 

m_RGBImage  *
;* +
void 
Awake 
( 
) 
{ !
onSliderRValueChanged 
( 
) 
; !
onSliderGValueChanged 
( 
) 
; !
onSliderBValueChanged 
( 
) 
; 
} 
public 
void !
onSliderRValueChanged "
(" #
)# $
{ 
m_sliderTextR 
. 
text 
= 
	m_sliderR  
.  !
value! &
.& '
ToString' /
(/ 0
)0 1
;1 2
updateRGBImage 
( 
) 
; 
} 
public 
void !
onSliderGValueChanged "
(" #
)# $
{ 
m_sliderTextG 
. 
text 
= 
	m_sliderG  
.  !
value! &
.& '
ToString' /
(/ 0
)0 1
;1 2
updateRGBImage   
(   
)   
;   
}!! 
public## 
void## !
onSliderBValueChanged## "
(##" #
)### $
{$$ 
m_sliderTextB%% 
.%% 
text%% 
=%% 
	m_sliderB%%  
.%%  !
value%%! &
.%%& '
ToString%%' /
(%%/ 0
)%%0 1
;%%1 2
updateRGBImage&& 
(&& 
)&& 
;&& 
}'' 
private)) 
void))	 
updateRGBImage)) 
()) 
))) 
{** 

m_RGBImage++ 
.++ 
color++ 
=++ 
new++ 
Color++ 
(++ 
	m_sliderR++ (
.++( )
value++) .
/++. /
$num++/ 3
,++3 4
	m_sliderG++5 >
.++> ?
value++? D
/++D E
$num++E I
,++I J
	m_sliderB++K T
.++T U
value++U Z
/++Z [
$num++[ _
)++_ `
;++` a
},, 
}.. Ì6
AF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ToastAnim.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
	ToastAnim 
: 
MonoBehaviour '
{ 
int 
state 
= 
$num 
; 
Vector2 	
onPos
 
; 
Vector2 	
offPos
 
; 
public 
Text	 
text 
; 
public 
RectTransform	 
thisRect 
;  
public 
Image	 

panelImage 
; 
public 
Image	 
shadowImage 
; 
public 
CanvasGroup	 
canvasGroup  
;  !
Color 
	tempColor 
; 
Vector2 	
tempVec2
 
; 
Vector3 	
tempVec3
 
; 
float 

timeToWait 
; 
float 
	animSpeed 
= 
$num 
; 
void!! 
Start!! 
(!! 
)!! 
{"" 
onPos## 
=##	 

new## 
Vector2## 
(## 
Screen## 
.## 
width## $
/##% &
$num##' (
,##( )
(##* +
Screen##+ 1
.##1 2
height##2 8
/##9 :
$num##; <
)##< =
)##= >
;##> ?
offPos$$ 	
=$$
 
new$$ 
Vector2$$ 
($$ 
Screen$$ 
.$$  
width$$  %
/$$& '
$num$$( )
,$$) *
Screen$$+ 1
.$$1 2
height$$2 8
/$$9 :
$num$$; =
)$$= >
;$$> ?
thisRect%% 
.%% 
position%% 
=%% 
offPos%% 
;%% 

timeToWait'' 
='' 
ToastControl'' 
.'' 
toastDuration'' *
;''* +
text(( 
.(( 
text(( 
=(( 
ToastControl(( 
.(( 
	toastText(( %
;((% &

panelImage)) 
.)) 
color)) 
=)) 
ToastControl)) "
.))" #
toastPanelColor))# 2
;))2 3
text** 
.** 
color** 
=** 
ToastControl** 
.** 
toastTextColor** +
;**+ ,
text++ 
.++ 
fontSize++ 
=++ 
ToastControl++ 
.++  
toastFontSize++  -
;++- .
	transform-- 
.-- 
	SetParent-- 
(-- 
ToastControl-- #
.--# $
parentCanvas--$ 0
.--0 1
	transform--1 :
)--: ;
;--; <
	transform.. 
... 

localScale.. 
=.. 
new.. 
Vector3.. %
(..& '
$num..' (
,..( )
$num..* +
,..+ ,
$num..- .
)... /
;../ 0
canvasGroup00 
.00 
alpha00 
=00 
$num00 
;00 
state11 
=11	 

$num11 
;11 
}22 
void44 
Update44 
(44 
)44 
{55 
if66 
(66 
state66 
==66 
$num66 
)66 
{77 
if88 
(88 
thisRect88 
.88 
position88 
.88 
y88 
<88 
onPos88 #
.88# $
y88$ %
)88% &
{99 
tempVec2:: 
=:: 
thisRect:: 
.:: 
position:: !
;::! "
tempVec2;; 
.;; 
y;; 
=;; 
Mathf;; 
.;; 
Lerp;; 
(;; 
tempVec2;; %
.;;% &
y;;& '
,;;' (
onPos;;) .
.;;. /
y;;/ 0
*;;1 2
$num;;3 8
,;;8 9
Time;;: >
.;;> ?
	deltaTime;;? H
*;;I J
	animSpeed;;K T
);;T U
;;;U V
thisRect<< 
.<< 
position<< 
=<< 
tempVec2<< !
;<<! "
canvasGroup== 
.== 
alpha== 
=== 
Mathf== 
.== 
Lerp== #
(==$ %
canvasGroup==% 0
.==0 1
alpha==1 6
,==6 7
$num==8 =
,=== >
Time==? C
.==C D
	deltaTime==D M
*==N O
	animSpeed==P Y
)==Y Z
;==Z [
}>> 
else?? 
{@@ 
thisRectAA 
.AA 
positionAA 
=AA 
onPosAA 
;AA 
StartCoroutineBB 
(BB 
WaitTimeBB 
(BB 
)BB 
)BB 
;BB  
}CC 
}DD 
elseEE 
ifEE 

(EE 
stateEE 
==EE 
$numEE 
)EE 
{FF 
ifGG 
(GG 
thisRectGG 
.GG 
positionGG 
.GG 
yGG 
>GG 
offPosGG $
.GG$ %
yGG% &
)GG& '
{HH 
tempVec2II 
=II 
thisRectII 
.II 
positionII !
;II! "
tempVec2JJ 
.JJ 
yJJ 
=JJ 
MathfJJ 
.JJ 
LerpJJ 
(JJ 
tempVec2JJ %
.JJ% &
yJJ& '
,JJ' (
offPosJJ) /
.JJ/ 0
yJJ0 1
*JJ2 3
$numJJ4 9
,JJ9 :
TimeJJ; ?
.JJ? @
	deltaTimeJJ@ I
*JJJ K
	animSpeedJJL U
)JJU V
;JJV W
thisRectKK 
.KK 
positionKK 
=KK 
tempVec2KK !
;KK! "
canvasGroupLL 
.LL 
alphaLL 
=LL 
MathfLL 
.LL 
LerpLL #
(LL$ %
canvasGroupLL% 0
.LL0 1
alphaLL1 6
,LL6 7
-LL8 9
$numLL9 >
,LL> ?
TimeLL@ D
.LLD E
	deltaTimeLLE N
*LLO P
	animSpeedLLQ Z
)LLZ [
;LL[ \
}MM 
elseNN 
{OO 
DestroyPP 
(PP 

gameObjectPP 
)PP 
;PP 
}QQ 
}RR 
}SS 
IEnumeratorUU 
WaitTimeUU 
(UU 
)UU 
{VV 
yieldWW 
returnWW	 
newWW 
WaitForSecondsWW "
(WW" #

timeToWaitWW# -
)WW- .
;WW. /
stateXX 
=XX	 

$numXX 
;XX 
}YY 
}ZZ 
}[[ ùD
WF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\Benchmark03.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public		 

class		 
Benchmark03		 
:		 
MonoBehaviour		 ,
{

 
public 
enum 
BenchmarkType !
{" #
TMP_SDF_MOBILE$ 2
=3 4
$num5 6
,6 7
TMP_SDF__MOBILE_SSD8 K
=L M
$numN O
,O P
TMP_SDFQ X
=Y Z
$num[ \
,\ ]
TMP_BITMAP_MOBILE^ o
=p q
$numr s
,s t
TEXTMESH_BITMAP	u Ñ
=
Ö Ü
$num
á à
}
â ä
public 
int 
NumberOfSamples "
=# $
$num% (
;( )
public 
BenchmarkType 
	Benchmark &
;& '
public 
Font 

SourceFont 
; 
void 
Awake 
( 
) 
{ 	
} 	
void 
Start 
( 
) 
{ 	
TMP_FontAsset 
	fontAsset #
=$ %
null& *
;* +
switch 
( 
	Benchmark 
) 
{ 
case   
BenchmarkType   "
.  " #
TMP_SDF_MOBILE  # 1
:  1 2
	fontAsset!! 
=!! 
TMP_FontAsset!!  -
.!!- .
CreateFontAsset!!. =
(!!= >

SourceFont!!> H
,!!H I
$num!!J L
,!!L M
$num!!N O
,!!O P
GlyphRenderMode!!Q `
.!!` a
SDFAA!!a f
,!!f g
$num!!h k
,!!k l
$num!!m p
,!!p q 
AtlasPopulationMode	!!r Ö
.
!!Ö Ü
Dynamic
!!Ü ç
)
!!ç é
;
!!é è
break"" 
;"" 
case## 
BenchmarkType## "
.##" #
TMP_SDF__MOBILE_SSD### 6
:##6 7
	fontAsset$$ 
=$$ 
TMP_FontAsset$$  -
.$$- .
CreateFontAsset$$. =
($$= >

SourceFont$$> H
,$$H I
$num$$J L
,$$L M
$num$$N O
,$$O P
GlyphRenderMode$$Q `
.$$` a
SDFAA$$a f
,$$f g
$num$$h k
,$$k l
$num$$m p
,$$p q 
AtlasPopulationMode	$$r Ö
.
$$Ö Ü
Dynamic
$$Ü ç
)
$$ç é
;
$$é è
	fontAsset%% 
.%% 
material%% &
.%%& '
shader%%' -
=%%. /
Shader%%0 6
.%%6 7
Find%%7 ;
(%%; <
$str%%< c
)%%c d
;%%d e
break&& 
;&& 
case'' 
BenchmarkType'' "
.''" #
TMP_SDF''# *
:''* +
	fontAsset(( 
=(( 
TMP_FontAsset((  -
.((- .
CreateFontAsset((. =
(((= >

SourceFont((> H
,((H I
$num((J L
,((L M
$num((N O
,((O P
GlyphRenderMode((Q `
.((` a
SDFAA((a f
,((f g
$num((h k
,((k l
$num((m p
,((p q 
AtlasPopulationMode	((r Ö
.
((Ö Ü
Dynamic
((Ü ç
)
((ç é
;
((é è
	fontAsset)) 
.)) 
material)) &
.))& '
shader))' -
=)). /
Shader))0 6
.))6 7
Find))7 ;
()); <
$str))< X
)))X Y
;))Y Z
break** 
;** 
case++ 
BenchmarkType++ "
.++" #
TMP_BITMAP_MOBILE++# 4
:++4 5
	fontAsset,, 
=,, 
TMP_FontAsset,,  -
.,,- .
CreateFontAsset,,. =
(,,= >

SourceFont,,> H
,,,H I
$num,,J L
,,,L M
$num,,N O
,,,O P
GlyphRenderMode,,Q `
.,,` a
SMOOTH,,a g
,,,g h
$num,,i l
,,,l m
$num,,n q
,,,q r 
AtlasPopulationMode	,,s Ü
.
,,Ü á
Dynamic
,,á é
)
,,é è
;
,,è ê
break-- 
;-- 
}.. 
for00 
(00 
int00 
i00 
=00 
$num00 
;00 
i00 
<00 
NumberOfSamples00  /
;00/ 0
i001 2
++002 4
)004 5
{11 
switch22 
(22 
	Benchmark22 !
)22! "
{33 
case44 
BenchmarkType44 &
.44& '
TMP_SDF_MOBILE44' 5
:445 6
case55 
BenchmarkType55 &
.55& '
TMP_SDF__MOBILE_SSD55' :
:55: ;
case66 
BenchmarkType66 &
.66& '
TMP_SDF66' .
:66. /
case77 
BenchmarkType77 &
.77& '
TMP_BITMAP_MOBILE77' 8
:778 9
{88 

GameObject99 &
go99' )
=99* +
new99, /

GameObject990 :
(99: ;
)99; <
;99< =
go:: 
.:: 
	transform:: (
.::( )
position::) 1
=::2 3
new::4 7
Vector3::8 ?
(::? @
$num::@ A
,::A B
$num::C G
,::G H
$num::I J
)::J K
;::K L
TextMeshPro<< '
textComponent<<( 5
=<<6 7
go<<8 :
.<<: ;
AddComponent<<; G
<<<G H
TextMeshPro<<H S
><<S T
(<<T U
)<<U V
;<<V W
textComponent== )
.==) *
font==* .
===/ 0
	fontAsset==1 :
;==: ;
textComponent>> )
.>>) *
fontSize>>* 2
=>>3 4
$num>>5 8
;>>8 9
textComponent?? )
.??) *
text??* .
=??/ 0
$str??1 4
;??4 5
textComponent@@ )
.@@) *
	alignment@@* 3
=@@4 5 
TextAlignmentOptions@@6 J
.@@J K
Center@@K Q
;@@Q R
textComponentAA )
.AA) *
colorAA* /
=AA0 1
newAA2 5
Color32AA6 =
(AA= >
$numAA> A
,AAA B
$numAAC F
,AAF G
$numAAH I
,AAI J
$numAAK N
)AAN O
;AAO P
ifCC 
(CC  
	BenchmarkCC  )
==CC* ,
BenchmarkTypeCC- :
.CC: ;
TMP_BITMAP_MOBILECC; L
)CCL M
textComponentDD  -
.DD- .
fontSizeDD. 6
=DD7 8
$numDD9 <
;DD< =
}FF 
breakGG 
;GG 
caseHH 
BenchmarkTypeHH &
.HH& '
TEXTMESH_BITMAPHH' 6
:HH6 7
{II 

GameObjectJJ &
goJJ' )
=JJ* +
newJJ, /

GameObjectJJ0 :
(JJ: ;
)JJ; <
;JJ< =
goKK 
.KK 
	transformKK (
.KK( )
positionKK) 1
=KK2 3
newKK4 7
Vector3KK8 ?
(KK? @
$numKK@ A
,KKA B
$numKKC G
,KKG H
$numKKI J
)KKJ K
;KKK L
TextMeshMM $
textMeshMM% -
=MM. /
goMM0 2
.MM2 3
AddComponentMM3 ?
<MM? @
TextMeshMM@ H
>MMH I
(MMI J
)MMJ K
;MMK L
textMeshNN $
.NN$ %
GetComponentNN% 1
<NN1 2
RendererNN2 :
>NN: ;
(NN; <
)NN< =
.NN= >
sharedMaterialNN> L
=NNM N

SourceFontNNO Y
.NNY Z
materialNNZ b
;NNb c
textMeshOO $
.OO$ %
fontOO% )
=OO* +

SourceFontOO, 6
;OO6 7
textMeshPP $
.PP$ %
anchorPP% +
=PP, -

TextAnchorPP. 8
.PP8 9
MiddleCenterPP9 E
;PPE F
textMeshQQ $
.QQ$ %
fontSizeQQ% -
=QQ. /
$numQQ0 3
;QQ3 4
textMeshSS $
.SS$ %
colorSS% *
=SS+ ,
newSS- 0
Color32SS1 8
(SS8 9
$numSS9 <
,SS< =
$numSS> A
,SSA B
$numSSC D
,SSD E
$numSSF I
)SSI J
;SSJ K
textMeshTT $
.TT$ %
textTT% )
=TT* +
$strTT, /
;TT/ 0
}UU 
breakVV 
;VV 
}WW 
}XX 
}YY 	
}[[ 
}\\ Çm
GF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\DialogBoxConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
DialogBoxConfig 
: 
MonoBehaviour  -
{ 
[ 
SerializeField 
] 
private 
bool 
darkenBackground  0
=1 2
true3 7
;7 8
[ 
SerializeField 
] 
private 
bool &
canClickBackgroundToCancel  :
=; <
false= B
;B C
[ 
SerializeField 
] 
private 
float  
animationDuration! 2
=3 4
$num5 7
;7 8
[ 
Space 
( 	
$num	 
) 
] 
public 
RectTransform	 
backgroundTransform *
;* +
private 	
int
 
state 
; 
private 	
float
 
animStartTime 
; 
private 	
float
 
animDeltaTime 
; 
private 	
RectTransform
 
thisRectTransform )
;) *
private 	
CanvasGroup
  
backroundCanvasGroup *
;* +
private   	
float  
 "
currentBackgroundAlpha   &
;  & '
private!! 	
float!!
 
currentPivotY!! 
;!! 
private"" 	
float""
 
currentAnchorMinY"" !
;""! "
private## 	
float##
 
currentAnchorMaxY## !
;##! "
private%% 	
Vector2%%
 
tempVector2%% 
;%% 
void'' 
Awake'' 
('' 
)'' 
{(( 
thisRectTransform)) 
=)) 

gameObject)) !
.))! "
GetComponent))" .
<)). /
RectTransform))/ <
>))< =
())= >
)))> ?
;))? @ 
backroundCanvasGroup** 
=** 
backgroundTransform** -
.**- .
GetComponent**. :
<**: ;
CanvasGroup**; F
>**F G
(**G H
)**H I
;**I J
}++ 
void-- 
Start-- 
(-- 
)-- 
{.. 
backgroundTransform// 
.// 
	sizeDelta//  
=//! "
new//# &
Vector2//' .
(//. /
Screen/// 5
.//5 6
width//6 ;
,//; <
Screen//= C
.//C D
height//D J
*//K L
$num//M O
)//O P
;//P Q
thisRectTransform11 
.11 
pivot11 
=11 
new11  
Vector211! (
(11( )
thisRectTransform11) :
.11: ;
pivot11; @
.11@ A
x11A B
,11B C
$num11D H
)11H I
;11I J
thisRectTransform22 
.22 
	anchorMin22 
=22  
new22! $
Vector222% ,
(22, -
thisRectTransform22- >
.22> ?
	anchorMin22? H
.22H I
x22I J
,22J K
$num22L N
)22N O
;22O P
thisRectTransform33 
.33 
	anchorMax33 
=33  
new33! $
Vector233% ,
(33, -
thisRectTransform33- >
.33> ?
	anchorMax33? H
.33H I
x33I J
,33J K
$num33L N
)33N O
;33O P
}44 
public66 
void66	 
BackgroundClick66 
(66 
)66 
{77 
if88 
(88 &
canClickBackgroundToCancel88 !
)88! "
{99 
Close:: 	
(::
 
):: 
;:: 
};; 
}<< 
public>> 
void>>	 
Open>> 
(>> 
)>> 
{?? "
currentBackgroundAlpha@@ 
=@@  
backroundCanvasGroup@@ 0
.@@0 1
alpha@@1 6
;@@6 7
currentPivotYAA 
=AA 
thisRectTransformAA $
.AA$ %
pivotAA% *
.AA* +
yAA+ ,
;AA, -
currentAnchorMinYBB 
=BB 
thisRectTransformBB (
.BB( )
	anchorMinBB) 2
.BB2 3
yBB3 4
;BB4 5
currentAnchorMaxYCC 
=CC 
thisRectTransformCC (
.CC( )
	anchorMaxCC) 2
.CC2 3
yCC3 4
;CC4 5 
backroundCanvasGroupEE 
.EE 
blocksRaycastsEE &
=EE' (
trueEE) -
;EE- .
animStartTimeGG 
=GG 
TimeGG 
.GG  
realtimeSinceStartupGG ,
;GG, -
stateHH 
=HH	 

$numHH 
;HH 
}II 
publicKK 
voidKK	 
CloseKK 
(KK 
)KK 
{LL "
currentBackgroundAlphaMM 
=MM  
backroundCanvasGroupMM 0
.MM0 1
alphaMM1 6
;MM6 7
currentPivotYNN 
=NN 
thisRectTransformNN $
.NN$ %
pivotNN% *
.NN* +
yNN+ ,
;NN, -
currentAnchorMinYOO 
=OO 
thisRectTransformOO (
.OO( )
	anchorMinOO) 2
.OO2 3
yOO3 4
;OO4 5
currentAnchorMaxYPP 
=PP 
thisRectTransformPP (
.PP( )
	anchorMaxPP) 2
.PP2 3
yPP3 4
;PP4 5 
backroundCanvasGroupRR 
.RR 
blocksRaycastsRR &
=RR' (
falseRR) .
;RR. /
animStartTimeTT 
=TT 
TimeTT 
.TT  
realtimeSinceStartupTT ,
;TT, -
stateUU 
=UU	 

$numUU 
;UU 
}VV 
voidXX 
UpdateXX 
(XX 
)XX 
{YY 
animDeltaTimeZZ 
=ZZ 
TimeZZ 
.ZZ  
realtimeSinceStartupZZ ,
-ZZ- .
animStartTimeZZ/ <
;ZZ< =
if\\ 
(\\ 
state\\ 
==\\ 
$num\\ 
)\\ 
{]] 
if^^ 
(^^ 
animDeltaTime^^ 
<=^^ 
animationDuration^^ *
)^^* +
{__ 
if`` 
(`` 	
darkenBackground``	 
)`` 
{aa  
backroundCanvasGroupbb 
.bb 
alphabb  
=bb! "
Animbb# '
.bb' (
Quintbb( -
.bb- .
Outbb. 1
(bb1 2"
currentBackgroundAlphabb2 H
,bbH I
$numbbJ L
,bbL M
animDeltaTimebbN [
,bb[ \
animationDurationbb] n
)bbn o
;bbo p
}cc 
tempVector2ee 
=ee 
thisRectTransformee $
.ee$ %
pivotee% *
;ee* +
tempVector2ff 
.ff 
yff 
=ff 
Animff 
.ff 
Quintff 
.ff  
Outff  #
(ff# $
currentPivotYff$ 1
,ff1 2
$numff3 7
,ff7 8
animDeltaTimeff9 F
,ffF G
animationDurationffH Y
)ffY Z
;ffZ [
thisRectTransformgg 
.gg 
pivotgg 
=gg 
tempVector2gg *
;gg* +
tempVector2ii 
=ii 
thisRectTransformii $
.ii$ %
	anchorMinii% .
;ii. /
tempVector2jj 
.jj 
yjj 
=jj 
Animjj 
.jj 
Quintjj 
.jj  
Outjj  #
(jj# $
currentAnchorMinYjj$ 5
,jj5 6
$numjj7 ;
,jj; <
animDeltaTimejj= J
,jjJ K
animationDurationjjL ]
)jj] ^
;jj^ _
thisRectTransformkk 
.kk 
	anchorMinkk  
=kk! "
tempVector2kk# .
;kk. /
tempVector2mm 
=mm 
thisRectTransformmm $
.mm$ %
	anchorMaxmm% .
;mm. /
tempVector2nn 
.nn 
ynn 
=nn 
Animnn 
.nn 
Quintnn 
.nn  
Outnn  #
(nn# $
currentAnchorMaxYnn$ 5
,nn5 6
$numnn7 ;
,nn; <
animDeltaTimenn= J
,nnJ K
animationDurationnnL ]
)nn] ^
;nn^ _
thisRectTransformoo 
.oo 
	anchorMaxoo  
=oo! "
tempVector2oo# .
;oo. /
}pp 
elseqq 
{rr 
thisRectTransformss 
.ss 
pivotss 
=ss 
newss "
Vector2ss# *
(ss* +
thisRectTransformss+ <
.ss< =
pivotss= B
.ssB C
xssC D
,ssD E
$numssF J
)ssJ K
;ssK L
thisRectTransformtt 
.tt 
	anchorMintt  
=tt! "
newtt# &
Vector2tt' .
(tt. /
thisRectTransformtt/ @
.tt@ A
	anchorMinttA J
.ttJ K
xttK L
,ttL M
$numttN R
)ttR S
;ttS T
thisRectTransformuu 
.uu 
	anchorMaxuu  
=uu! "
newuu# &
Vector2uu' .
(uu. /
thisRectTransformuu/ @
.uu@ A
	anchorMaxuuA J
.uuJ K
xuuK L
,uuL M
$numuuN R
)uuR S
;uuS T
stateww 

=ww 
$numww 
;ww 
}xx 
}yy 
elsezz 
ifzz 

(zz 
statezz 
==zz 
$numzz 
)zz 
{{{ 
if|| 
(|| 
animDeltaTime|| 
<=|| 
animationDuration|| *
)||* +
{}} 
if~~ 
(~~ 	
darkenBackground~~	 
)~~ 
{ "
backroundCanvasGroup
ÄÄ 
.
ÄÄ 
alpha
ÄÄ  
=
ÄÄ! "
Anim
ÄÄ# '
.
ÄÄ' (
Quint
ÄÄ( -
.
ÄÄ- .
In
ÄÄ. 0
(
ÄÄ0 1$
currentBackgroundAlpha
ÄÄ1 G
,
ÄÄG H
$num
ÄÄI K
,
ÄÄK L
animDeltaTime
ÄÄM Z
,
ÄÄZ [
animationDuration
ÄÄ\ m
*
ÄÄn o
$num
ÄÄp u
)
ÄÄu v
;
ÄÄv w
}
ÅÅ 
tempVector2
ÉÉ 
=
ÉÉ 
thisRectTransform
ÉÉ $
.
ÉÉ$ %
pivot
ÉÉ% *
;
ÉÉ* +
tempVector2
ÑÑ 
.
ÑÑ 
y
ÑÑ 
=
ÑÑ 
Anim
ÑÑ 
.
ÑÑ 
Quint
ÑÑ 
.
ÑÑ  
In
ÑÑ  "
(
ÑÑ" #
currentPivotY
ÑÑ# 0
,
ÑÑ0 1
$num
ÑÑ2 6
,
ÑÑ6 7
animDeltaTime
ÑÑ8 E
,
ÑÑE F
animationDuration
ÑÑG X
*
ÑÑY Z
$num
ÑÑ[ `
)
ÑÑ` a
;
ÑÑa b
thisRectTransform
ÖÖ 
.
ÖÖ 
pivot
ÖÖ 
=
ÖÖ 
tempVector2
ÖÖ *
;
ÖÖ* +
tempVector2
áá 
=
áá 
thisRectTransform
áá $
.
áá$ %
	anchorMin
áá% .
;
áá. /
tempVector2
àà 
.
àà 
y
àà 
=
àà 
Anim
àà 
.
àà 
Quint
àà 
.
àà  
In
àà  "
(
àà" #
currentAnchorMinY
àà# 4
,
àà4 5
$num
àà6 8
,
àà8 9
animDeltaTime
àà: G
,
ààG H
animationDuration
ààI Z
*
àà[ \
$num
àà] b
)
ààb c
;
ààc d
thisRectTransform
ââ 
.
ââ 
	anchorMin
ââ  
=
ââ! "
tempVector2
ââ# .
;
ââ. /
tempVector2
ãã 
=
ãã 
thisRectTransform
ãã $
.
ãã$ %
	anchorMax
ãã% .
;
ãã. /
tempVector2
åå 
.
åå 
y
åå 
=
åå 
Anim
åå 
.
åå 
Quint
åå 
.
åå  
In
åå  "
(
åå" #
currentAnchorMaxY
åå# 4
,
åå4 5
$num
åå6 8
,
åå8 9
animDeltaTime
åå: G
,
ååG H
animationDuration
ååI Z
*
åå[ \
$num
åå] b
)
ååb c
;
ååc d
thisRectTransform
çç 
.
çç 
	anchorMax
çç  
=
çç! "
tempVector2
çç# .
;
çç. /
}
éé 
else
èè 
{
êê 
thisRectTransform
ëë 
.
ëë 
pivot
ëë 
=
ëë 
new
ëë "
Vector2
ëë# *
(
ëë* +
thisRectTransform
ëë+ <
.
ëë< =
pivot
ëë= B
.
ëëB C
x
ëëC D
,
ëëD E
$num
ëëF J
)
ëëJ K
;
ëëK L
thisRectTransform
íí 
.
íí 
	anchorMin
íí  
=
íí! "
new
íí# &
Vector2
íí' .
(
íí. /
thisRectTransform
íí/ @
.
íí@ A
	anchorMin
ííA J
.
ííJ K
x
ííK L
,
ííL M
$num
ííN P
)
ííP Q
;
ííQ R
thisRectTransform
ìì 
.
ìì 
	anchorMax
ìì  
=
ìì! "
new
ìì# &
Vector2
ìì' .
(
ìì. /
thisRectTransform
ìì/ @
.
ìì@ A
	anchorMax
ììA J
.
ììJ K
x
ììK L
,
ììL M
$num
ììN P
)
ììP Q
;
ììQ R
state
ïï 

=
ïï 
$num
ïï 
;
ïï 
}
ññ 
}
óó 
}
òò 
}
ôô 
}öö Ñ
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ShadowConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
ShadowConfig 
: 
MonoBehaviour *
,* + 
IPointerEnterHandler, @
,@ A
IPointerDownHandlerB U
,U V
IPointerUpHandlerW h
,h i
IPointerExitHandlerj }
{ 
public 

ShadowAnim	 
[ 
] 
shadows 
; 
[ 
Range 
( 	
$num	 

,
 
$num 
) 
] 
public 
int	 
shadowNormalSize 
= 
$num  !
;! "
[ 
Range 
( 	
$num	 

,
 
$num 
) 
] 
public 
int	 
shadowActiveSize 
= 
$num  !
;! "
public 
enum	 
ShadowsActive 
{ 
Hovered 

,
 
Clicked 

} 
public   
ShadowsActive  	 
shadowsActiveWhen   (
=  ) *
ShadowsActive  + 8
.  8 9
Hovered  9 @
;  @ A
public"" 
bool""	 
	isEnabled"" 
="" 
true"" 
;"" 
public$$ 
void$$	 
OnPointerDown$$ 
($$ 
PointerEventData$$ -
data$$. 2
)$$2 3
{%% 
if&& 
(&& 
shadowsActiveWhen&& 
==&& 
ShadowsActive&& )
.&&) *
Clicked&&* 1
)&&1 2

SetShadows'' 
('' 
shadowActiveSize'' 
)''  
;''  !
}(( 
public** 
void**	 
OnPointerUp** 
(** 
PointerEventData** *
data**+ /
)**/ 0
{++ 
if,, 
(,, 
shadowsActiveWhen,, 
==,, 
ShadowsActive,, )
.,,) *
Clicked,,* 1
),,1 2

SetShadows-- 
(-- 
shadowNormalSize-- 
)--  
;--  !
}.. 
public00 
void00	 
OnPointerEnter00 
(00 
PointerEventData00 .
data00/ 3
)003 4
{11 
if22 
(22 
shadowsActiveWhen22 
==22 
ShadowsActive22 )
.22) *
Hovered22* 1
)221 2

SetShadows33 
(33 
shadowActiveSize33 
)33  
;33  !
}44 
public66 
void66	 
OnPointerExit66 
(66 
PointerEventData66 -
data66. 2
)662 3
{77 

SetShadows88 
(88 
shadowNormalSize88 
)88 
;88  
}99 
public;; 
void;;	 

SetShadows;; 
(;; 
int;; 
shadowOn;; &
);;& '
{<< 
if== 
(== 
	isEnabled== 
)== 
{>> 
foreach?? 
(?? 

ShadowAnim?? 
shadow?? 
in?? !
shadows??" )
)??) *
{@@ 
shadowAA 
.AA 
	SetShadowAA 
(AA 
falseAA 
)AA 
;AA 
}BB 
ifDD 
(DD 
shadowOnDD 
-DD 
$numDD 
>=DD 
$numDD 
)DD 
{EE 
shadowsFF 
[FF 
shadowOnFF 
-FF 
$numFF 
]FF 
.FF 
	SetShadowFF %
(FF& '
trueFF' +
)FF+ ,
;FF, -
}GG 
}HH 
}II 
}JJ 
}KK î
*F:\Github\CS 230\unityProj\Assets\Timer.cs
public 
class 
Timer 
: 
MonoBehaviour "
{ 
public		 

float		 
	timeValue		 
=		 
$num		 
;		  
public

 

Text

 
	timerText

 
;

 
void 
Update	 
( 
) 
{ 
if 

( 
	timeValue 
> 
$num 
) 
{ 	
	timeValue 
-= 
Time 
. 
	deltaTime '
;' (
} 	
else 
{ 	
	timeValue 
= 
$num 
; 
} 	
DisplayTime 
( 
	timeValue 
) 
; 
} 
void 
DisplayTime	 
( 
float 
timeToDisplay (
)( )
{   
if!! 

(!! 
timeToDisplay!! 
<!! 
$num!! 
)!! 
{"" 	
timeToDisplay## 
=## 
$num## 
;## 
QuizManager$$ 
n$$ 
=$$ 

GameObject$$ &
.$$& '
Find$$' +
($$+ ,
$str$$, :
)$$: ;
.$$; <
GetComponent$$< H
<$$H I
QuizManager$$I T
>$$T U
($$U V
)$$V W
;$$W X
n%% 
.%% 
incrementDecrement%%  
(%%  !
false%%! &
)%%& '
;%%' (
}&& 	
float'' 
minutes'' 
='' 
Mathf'' 
.'' 

FloorToInt'' (
(''( )
timeToDisplay'') 6
/''7 8
$num''9 ;
)''; <
;''< =
float(( 
seconds(( 
=(( 
Mathf(( 
.(( 

FloorToInt(( (
(((( )
timeToDisplay(() 6
%((7 8
$num((9 ;
)((; <
;((< =
	timerText)) 
.)) 
text)) 
=)) 
string)) 
.))  
Format))  &
())& '
$str))' 6
,))6 7
minutes))8 ?
,))? @
seconds))A H
)))H I
;))I J
}** 
public,, 

void,, 
refresh,, 
(,, 
),, 
{-- 
	timeValue.. 
=.. 
$num.. 
;.. 
}// 
}00 ™S
`F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_FrameRateCounter.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class  
TMP_FrameRateCounter %
:& '
MonoBehaviour( 5
{		 
public

 
float

 
UpdateInterval

 #
=

$ %
$num

& *
;

* +
private 
float 
m_LastInterval $
=% &
$num' (
;( )
private 
int 
m_Frames 
= 
$num  
;  !
public 
enum %
FpsCounterAnchorPositions -
{. /
TopLeft0 7
,7 8

BottomLeft9 C
,C D
TopRightE M
,M N
BottomRightO Z
}[ \
;\ ]
public %
FpsCounterAnchorPositions (
AnchorPosition) 7
=8 9%
FpsCounterAnchorPositions: S
.S T
TopRightT \
;\ ]
private 
string 
htmlColorTag #
;# $
private 
const 
string 
fpsLabel %
=& '
$str( a
;a b
private 
TextMeshPro 
m_TextMeshPro )
;) *
private 
	Transform $
m_frameCounter_transform 2
;2 3
private 
Camera 
m_camera 
;  
private %
FpsCounterAnchorPositions )
last_AnchorPosition* =
;= >
void 
Awake 
( 
) 
{ 	
if 
( 
! 
enabled 
) 
return 
; 
m_camera   
=   
Camera   
.   
main   "
;  " #
Application!! 
.!! 
targetFrameRate!! '
=!!( )
$num!!* .
;!!. /

GameObject## 
frameCounter## #
=##$ %
new##& )

GameObject##* 4
(##4 5
$str##5 D
)##D E
;##E F
m_TextMeshPro%% 
=%% 
frameCounter%% (
.%%( )
AddComponent%%) 5
<%%5 6
TextMeshPro%%6 A
>%%A B
(%%B C
)%%C D
;%%D E
m_TextMeshPro&& 
.&& 
font&& 
=&&  
	Resources&&! *
.&&* +
Load&&+ /
<&&/ 0
TMP_FontAsset&&0 =
>&&= >
(&&> ?
$str&&? e
)&&e f
;&&f g
m_TextMeshPro'' 
.'' 
fontSharedMaterial'' ,
=''- .
	Resources''/ 8
.''8 9
Load''9 =
<''= >
Material''> F
>''F G
(''G H
$str''H x
)''x y
;''y z$
m_frameCounter_transform** $
=**% &
frameCounter**' 3
.**3 4
	transform**4 =
;**= >$
m_frameCounter_transform++ $
.++$ %
	SetParent++% .
(++. /
m_camera++/ 7
.++7 8
	transform++8 A
)++A B
;++B C$
m_frameCounter_transform,, $
.,,$ %
localRotation,,% 2
=,,3 4

Quaternion,,5 ?
.,,? @
identity,,@ H
;,,H I
m_TextMeshPro.. 
... 
enableWordWrapping.. ,
=..- .
false../ 4
;..4 5
m_TextMeshPro// 
.// 
fontSize// "
=//# $
$num//% '
;//' (%
Set_FrameCounter_Position:: %
(::% &
AnchorPosition::& 4
)::4 5
;::5 6
last_AnchorPosition;; 
=;;  !
AnchorPosition;;" 0
;;;0 1
}>> 	
void@@ 
Start@@ 
(@@ 
)@@ 
{AA 	
m_LastIntervalBB 
=BB 
TimeBB !
.BB! " 
realtimeSinceStartupBB" 6
;BB6 7
m_FramesCC 
=CC 
$numCC 
;CC 
}DD 	
voidFF 
UpdateFF 
(FF 
)FF 
{GG 	
ifHH 
(HH 
AnchorPositionHH 
!=HH !
last_AnchorPositionHH" 5
)HH5 6%
Set_FrameCounter_PositionII )
(II) *
AnchorPositionII* 8
)II8 9
;II9 :
last_AnchorPositionKK 
=KK  !
AnchorPositionKK" 0
;KK0 1
m_FramesMM 
+=MM 
$numMM 
;MM 
floatNN 
timeNowNN 
=NN 
TimeNN  
.NN  ! 
realtimeSinceStartupNN! 5
;NN5 6
ifPP 
(PP 
timeNowPP 
>PP 
m_LastIntervalPP (
+PP) *
UpdateIntervalPP+ 9
)PP9 :
{QQ 
floatSS 
fpsSS 
=SS 
m_FramesSS $
/SS% &
(SS' (
timeNowSS( /
-SS0 1
m_LastIntervalSS2 @
)SS@ A
;SSA B
floatTT 
msTT 
=TT 
$numTT "
/TT# $
MathfTT% *
.TT* +
MaxTT+ .
(TT. /
fpsTT/ 2
,TT2 3
$numTT4 <
)TT< =
;TT= >
ifVV 
(VV 
fpsVV 
<VV 
$numVV 
)VV 
htmlColorTagWW  
=WW! "
$strWW# 3
;WW3 4
elseXX 
ifXX 
(XX 
fpsXX 
<XX 
$numXX !
)XX! "
htmlColorTagYY  
=YY! "
$strYY# 0
;YY0 1
elseZZ 
htmlColorTag[[  
=[[! "
$str[[# 2
;[[2 3
m_TextMeshPro`` 
.`` 
SetText`` %
(``% &
htmlColorTag``& 2
+``3 4
fpsLabel``5 =
,``= >
fps``? B
,``B C
ms``D F
)``F G
;``G H
m_Framesbb 
=bb 
$numbb 
;bb 
m_LastIntervalcc 
=cc  
timeNowcc! (
;cc( )
}dd 
}ee 	
voidhh %
Set_FrameCounter_Positionhh &
(hh& '%
FpsCounterAnchorPositionshh' @
anchor_positionhhA P
)hhP Q
{ii 	
m_TextMeshProkk 
.kk 
marginkk  
=kk! "
newkk# &
Vector4kk' .
(kk. /
$numkk/ 1
,kk1 2
$numkk3 5
,kk5 6
$numkk7 9
,kk9 :
$numkk; =
)kk= >
;kk> ?
switchmm 
(mm 
anchor_positionmm #
)mm# $
{nn 
caseoo %
FpsCounterAnchorPositionsoo .
.oo. /
TopLeftoo/ 6
:oo6 7
m_TextMeshPropp !
.pp! "
	alignmentpp" +
=pp, - 
TextAlignmentOptionspp. B
.ppB C
TopLeftppC J
;ppJ K
m_TextMeshProqq !
.qq! "
rectTransformqq" /
.qq/ 0
pivotqq0 5
=qq6 7
newqq8 ;
Vector2qq< C
(qqC D
$numqqD E
,qqE F
$numqqG H
)qqH I
;qqI J$
m_frameCounter_transformrr ,
.rr, -
positionrr- 5
=rr6 7
m_camerarr8 @
.rr@ A 
ViewportToWorldPointrrA U
(rrU V
newrrV Y
Vector3rrZ a
(rra b
$numrrb c
,rrc d
$numrre f
,rrf g
$numrrh n
)rrn o
)rro p
;rrp q
breakss 
;ss 
casett %
FpsCounterAnchorPositionstt .
.tt. /

BottomLefttt/ 9
:tt9 :
m_TextMeshProuu !
.uu! "
	alignmentuu" +
=uu, - 
TextAlignmentOptionsuu. B
.uuB C

BottomLeftuuC M
;uuM N
m_TextMeshProvv !
.vv! "
rectTransformvv" /
.vv/ 0
pivotvv0 5
=vv6 7
newvv8 ;
Vector2vv< C
(vvC D
$numvvD E
,vvE F
$numvvG H
)vvH I
;vvI J$
m_frameCounter_transformww ,
.ww, -
positionww- 5
=ww6 7
m_cameraww8 @
.ww@ A 
ViewportToWorldPointwwA U
(wwU V
newwwV Y
Vector3wwZ a
(wwa b
$numwwb c
,wwc d
$numwwe f
,wwf g
$numwwh n
)wwn o
)wwo p
;wwp q
breakxx 
;xx 
caseyy %
FpsCounterAnchorPositionsyy .
.yy. /
TopRightyy/ 7
:yy7 8
m_TextMeshProzz !
.zz! "
	alignmentzz" +
=zz, - 
TextAlignmentOptionszz. B
.zzB C
TopRightzzC K
;zzK L
m_TextMeshPro{{ !
.{{! "
rectTransform{{" /
.{{/ 0
pivot{{0 5
={{6 7
new{{8 ;
Vector2{{< C
({{C D
$num{{D E
,{{E F
$num{{G H
){{H I
;{{I J$
m_frameCounter_transform|| ,
.||, -
position||- 5
=||6 7
m_camera||8 @
.||@ A 
ViewportToWorldPoint||A U
(||U V
new||V Y
Vector3||Z a
(||a b
$num||b c
,||c d
$num||e f
,||f g
$num||h n
)||n o
)||o p
;||p q
break}} 
;}} 
case~~ %
FpsCounterAnchorPositions~~ .
.~~. /
BottomRight~~/ :
:~~: ;
m_TextMeshPro !
.! "
	alignment" +
=, - 
TextAlignmentOptions. B
.B C
BottomRightC N
;N O
m_TextMeshPro
ÄÄ !
.
ÄÄ! "
rectTransform
ÄÄ" /
.
ÄÄ/ 0
pivot
ÄÄ0 5
=
ÄÄ6 7
new
ÄÄ8 ;
Vector2
ÄÄ< C
(
ÄÄC D
$num
ÄÄD E
,
ÄÄE F
$num
ÄÄG H
)
ÄÄH I
;
ÄÄI J&
m_frameCounter_transform
ÅÅ ,
.
ÅÅ, -
position
ÅÅ- 5
=
ÅÅ6 7
m_camera
ÅÅ8 @
.
ÅÅ@ A"
ViewportToWorldPoint
ÅÅA U
(
ÅÅU V
new
ÅÅV Y
Vector3
ÅÅZ a
(
ÅÅa b
$num
ÅÅb c
,
ÅÅc d
$num
ÅÅe f
,
ÅÅf g
$num
ÅÅh n
)
ÅÅn o
)
ÅÅo p
;
ÅÅp q
break
ÇÇ 
;
ÇÇ 
}
ÉÉ 
}
ÑÑ 	
}
ÖÖ 
}ÜÜ µ
BF:\Github\CS 230\unityProj\Assets\Scenes\Scripts\SoData\FloatSO.cs
[ 
CreateAssetMenu 
] 
public 
class 
FloatSO 
: 
ScriptableObject '
{ 
[		 
SerializeField		 
]		 
private 
float 
_value 
; 
public 

float 
Value 
{ 
get 
{ 
return 
_value 
; 
} 
set 
{ 
_value 
= 
value 
; 
} 
} 
} ¬r
XF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\VertexJitter.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
VertexJitter 
: 
MonoBehaviour  -
{		 
public 
float 
AngleMultiplier $
=% &
$num' +
;+ ,
public 
float 
SpeedMultiplier $
=% &
$num' +
;+ ,
public 
float 

CurveScale 
=  !
$num" &
;& '
private 
TMP_Text 
m_TextComponent (
;( )
private 
bool 
hasTextChanged #
;# $
private 
struct 

VertexAnim !
{ 	
public 
float 

angleRange #
;# $
public 
float 
angle 
; 
public 
float 
speed 
; 
} 	
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 
GetComponent *
<* +
TMP_Text+ 3
>3 4
(4 5
)5 6
;6 7
} 	
void!! 
OnEnable!! 
(!! 
)!! 
{"" 	
TMPro_EventManager$$ 
.$$ 
TEXT_CHANGED_EVENT$$ 1
.$$1 2
Add$$2 5
($$5 6
ON_TEXT_CHANGED$$6 E
)$$E F
;$$F G
}%% 	
void'' 
	OnDisable'' 
('' 
)'' 
{(( 	
TMPro_EventManager)) 
.)) 
TEXT_CHANGED_EVENT)) 1
.))1 2
Remove))2 8
())8 9
ON_TEXT_CHANGED))9 H
)))H I
;))I J
}** 	
void-- 
Start-- 
(-- 
)-- 
{.. 	
StartCoroutine// 
(// 
AnimateVertexColors// .
(//. /
)/// 0
)//0 1
;//1 2
}00 	
void33 
ON_TEXT_CHANGED33 
(33 
Object33 #
obj33$ '
)33' (
{44 	
if55 
(55 
obj55 
==55 
m_TextComponent55 &
)55& '
hasTextChanged66 
=66  
true66! %
;66% &
}77 	
IEnumerator== 
AnimateVertexColors== '
(==' (
)==( )
{>> 	
m_TextComponentBB 
.BB 
ForceMeshUpdateBB +
(BB+ ,
)BB, -
;BB- .
TMP_TextInfoDD 
textInfoDD !
=DD" #
m_TextComponentDD$ 3
.DD3 4
textInfoDD4 <
;DD< =
	Matrix4x4FF 
matrixFF 
;FF 
intHH 
	loopCountHH 
=HH 
$numHH 
;HH 
hasTextChangedII 
=II 
trueII !
;II! "

VertexAnimLL 
[LL 
]LL 

vertexAnimLL #
=LL$ %
newLL& )

VertexAnimLL* 4
[LL4 5
$numLL5 9
]LL9 :
;LL: ;
forMM 
(MM 
intMM 
iMM 
=MM 
$numMM 
;MM 
iMM 
<MM 
$numMM  $
;MM$ %
iMM& '
++MM' )
)MM) *
{NN 

vertexAnimOO 
[OO 
iOO 
]OO 
.OO 

angleRangeOO (
=OO) *
RandomOO+ 1
.OO1 2
RangeOO2 7
(OO7 8
$numOO8 ;
,OO; <
$numOO= @
)OO@ A
;OOA B

vertexAnimPP 
[PP 
iPP 
]PP 
.PP 
speedPP #
=PP$ %
RandomPP& ,
.PP, -
RangePP- 2
(PP2 3
$numPP3 5
,PP5 6
$numPP7 9
)PP9 :
;PP: ;
}QQ 
TMP_MeshInfoTT 
[TT 
]TT 
cachedMeshInfoTT )
=TT* +
textInfoTT, 4
.TT4 5"
CopyMeshInfoVertexDataTT5 K
(TTK L
)TTL M
;TTM N
whileVV 
(VV 
trueVV 
)VV 
{WW 
ifYY 
(YY 
hasTextChangedYY "
)YY" #
{ZZ 
cachedMeshInfo\\ "
=\\# $
textInfo\\% -
.\\- ."
CopyMeshInfoVertexData\\. D
(\\D E
)\\E F
;\\F G
hasTextChanged^^ "
=^^# $
false^^% *
;^^* +
}__ 
intaa 
characterCountaa "
=aa# $
textInfoaa% -
.aa- .
characterCountaa. <
;aa< =
ifdd 
(dd 
characterCountdd "
==dd# %
$numdd& '
)dd' (
{ee 
yieldff 
returnff  
newff! $
WaitForSecondsff% 3
(ff3 4
$numff4 9
)ff9 :
;ff: ;
continuegg 
;gg 
}hh 
forkk 
(kk 
intkk 
ikk 
=kk 
$numkk 
;kk 
ikk  !
<kk" #
characterCountkk$ 2
;kk2 3
ikk4 5
++kk5 7
)kk7 8
{ll 
TMP_CharacterInfomm %
charInfomm& .
=mm/ 0
textInfomm1 9
.mm9 :
characterInfomm: G
[mmG H
immH I
]mmI J
;mmJ K
ifpp 
(pp 
!pp 
charInfopp !
.pp! "
	isVisiblepp" +
)pp+ ,
continueqq  
;qq  !

VertexAnimtt 
vertAnimtt '
=tt( )

vertexAnimtt* 4
[tt4 5
itt5 6
]tt6 7
;tt7 8
intww 
materialIndexww %
=ww& '
textInfoww( 0
.ww0 1
characterInfoww1 >
[ww> ?
iww? @
]ww@ A
.wwA B"
materialReferenceIndexwwB X
;wwX Y
intzz 
vertexIndexzz #
=zz$ %
textInfozz& .
.zz. /
characterInfozz/ <
[zz< =
izz= >
]zz> ?
.zz? @
vertexIndexzz@ K
;zzK L
Vector3}} 
[}} 
]}} 
sourceVertices}} ,
=}}- .
cachedMeshInfo}}/ =
[}}= >
materialIndex}}> K
]}}K L
.}}L M
vertices}}M U
;}}U V
Vector2
ÇÇ 
charMidBasline
ÇÇ *
=
ÇÇ+ ,
(
ÇÇ- .
sourceVertices
ÇÇ. <
[
ÇÇ< =
vertexIndex
ÇÇ= H
+
ÇÇI J
$num
ÇÇK L
]
ÇÇL M
+
ÇÇN O
sourceVertices
ÇÇP ^
[
ÇÇ^ _
vertexIndex
ÇÇ_ j
+
ÇÇk l
$num
ÇÇm n
]
ÇÇn o
)
ÇÇo p
/
ÇÇq r
$num
ÇÇs t
;
ÇÇt u
Vector3
ÜÜ 
offset
ÜÜ "
=
ÜÜ# $
charMidBasline
ÜÜ% 3
;
ÜÜ3 4
Vector3
àà 
[
àà 
]
àà !
destinationVertices
àà 1
=
àà2 3
textInfo
àà4 <
.
àà< =
meshInfo
àà= E
[
ààE F
materialIndex
ààF S
]
ààS T
.
ààT U
vertices
ààU ]
;
àà] ^!
destinationVertices
ää '
[
ää' (
vertexIndex
ää( 3
+
ää4 5
$num
ää6 7
]
ää7 8
=
ää9 :
sourceVertices
ää; I
[
ääI J
vertexIndex
ääJ U
+
ääV W
$num
ääX Y
]
ääY Z
-
ää[ \
offset
ää] c
;
ääc d!
destinationVertices
ãã '
[
ãã' (
vertexIndex
ãã( 3
+
ãã4 5
$num
ãã6 7
]
ãã7 8
=
ãã9 :
sourceVertices
ãã; I
[
ããI J
vertexIndex
ããJ U
+
ããV W
$num
ããX Y
]
ããY Z
-
ãã[ \
offset
ãã] c
;
ããc d!
destinationVertices
åå '
[
åå' (
vertexIndex
åå( 3
+
åå4 5
$num
åå6 7
]
åå7 8
=
åå9 :
sourceVertices
åå; I
[
ååI J
vertexIndex
ååJ U
+
ååV W
$num
ååX Y
]
ååY Z
-
åå[ \
offset
åå] c
;
ååc d!
destinationVertices
çç '
[
çç' (
vertexIndex
çç( 3
+
çç4 5
$num
çç6 7
]
çç7 8
=
çç9 :
sourceVertices
çç; I
[
ççI J
vertexIndex
ççJ U
+
ççV W
$num
ççX Y
]
ççY Z
-
çç[ \
offset
çç] c
;
ççc d
vertAnim
èè 
.
èè 
angle
èè "
=
èè# $
Mathf
èè% *
.
èè* +

SmoothStep
èè+ 5
(
èè5 6
-
èè6 7
vertAnim
èè7 ?
.
èè? @

angleRange
èè@ J
,
èèJ K
vertAnim
èèL T
.
èèT U

angleRange
èèU _
,
èè_ `
Mathf
èèa f
.
èèf g
PingPong
èèg o
(
èèo p
	loopCount
èèp y
/
èèz {
$num
èè| 
*èèÄ Å
vertAnimèèÇ ä
.èèä ã
speedèèã ê
,èèê ë
$numèèí î
)èèî ï
)èèï ñ
;èèñ ó
Vector3
êê 
jitterOffset
êê (
=
êê) *
new
êê+ .
Vector3
êê/ 6
(
êê6 7
Random
êê7 =
.
êê= >
Range
êê> C
(
êêC D
-
êêD E
$num
êêE I
,
êêI J
$num
êêK O
)
êêO P
,
êêP Q
Random
êêR X
.
êêX Y
Range
êêY ^
(
êê^ _
-
êê_ `
$num
êê` d
,
êêd e
$num
êêf j
)
êêj k
,
êêk l
$num
êêm n
)
êên o
;
êêo p
matrix
íí 
=
íí 
	Matrix4x4
íí &
.
íí& '
TRS
íí' *
(
íí* +
jitterOffset
íí+ 7
*
íí8 9

CurveScale
íí: D
,
ííD E

Quaternion
ííF P
.
ííP Q
Euler
ííQ V
(
ííV W
$num
ííW X
,
ííX Y
$num
ííZ [
,
íí[ \
Random
íí] c
.
ííc d
Range
ííd i
(
ííi j
-
ííj k
$num
íík m
,
íím n
$num
íío q
)
ííq r
*
íís t
AngleMultiplierííu Ñ
)ííÑ Ö
,ííÖ Ü
Vector3ííá é
.ííé è
oneííè í
)ííí ì
;ííì î!
destinationVertices
îî '
[
îî' (
vertexIndex
îî( 3
+
îî4 5
$num
îî6 7
]
îî7 8
=
îî9 :
matrix
îî; A
.
îîA B
MultiplyPoint3x4
îîB R
(
îîR S!
destinationVertices
îîS f
[
îîf g
vertexIndex
îîg r
+
îîs t
$num
îîu v
]
îîv w
)
îîw x
;
îîx y!
destinationVertices
ïï '
[
ïï' (
vertexIndex
ïï( 3
+
ïï4 5
$num
ïï6 7
]
ïï7 8
=
ïï9 :
matrix
ïï; A
.
ïïA B
MultiplyPoint3x4
ïïB R
(
ïïR S!
destinationVertices
ïïS f
[
ïïf g
vertexIndex
ïïg r
+
ïïs t
$num
ïïu v
]
ïïv w
)
ïïw x
;
ïïx y!
destinationVertices
ññ '
[
ññ' (
vertexIndex
ññ( 3
+
ññ4 5
$num
ññ6 7
]
ññ7 8
=
ññ9 :
matrix
ññ; A
.
ññA B
MultiplyPoint3x4
ññB R
(
ññR S!
destinationVertices
ññS f
[
ññf g
vertexIndex
ññg r
+
ññs t
$num
ññu v
]
ññv w
)
ññw x
;
ññx y!
destinationVertices
óó '
[
óó' (
vertexIndex
óó( 3
+
óó4 5
$num
óó6 7
]
óó7 8
=
óó9 :
matrix
óó; A
.
óóA B
MultiplyPoint3x4
óóB R
(
óóR S!
destinationVertices
óóS f
[
óóf g
vertexIndex
óóg r
+
óós t
$num
óóu v
]
óóv w
)
óów x
;
óóx y!
destinationVertices
ôô '
[
ôô' (
vertexIndex
ôô( 3
+
ôô4 5
$num
ôô6 7
]
ôô7 8
+=
ôô9 ;
offset
ôô< B
;
ôôB C!
destinationVertices
öö '
[
öö' (
vertexIndex
öö( 3
+
öö4 5
$num
öö6 7
]
öö7 8
+=
öö9 ;
offset
öö< B
;
ööB C!
destinationVertices
õõ '
[
õõ' (
vertexIndex
õõ( 3
+
õõ4 5
$num
õõ6 7
]
õõ7 8
+=
õõ9 ;
offset
õõ< B
;
õõB C!
destinationVertices
úú '
[
úú' (
vertexIndex
úú( 3
+
úú4 5
$num
úú6 7
]
úú7 8
+=
úú9 ;
offset
úú< B
;
úúB C

vertexAnim
ûû 
[
ûû 
i
ûû  
]
ûû  !
=
ûû" #
vertAnim
ûû$ ,
;
ûû, -
}
üü 
for
¢¢ 
(
¢¢ 
int
¢¢ 
i
¢¢ 
=
¢¢ 
$num
¢¢ 
;
¢¢ 
i
¢¢  !
<
¢¢" #
textInfo
¢¢$ ,
.
¢¢, -
meshInfo
¢¢- 5
.
¢¢5 6
Length
¢¢6 <
;
¢¢< =
i
¢¢> ?
++
¢¢? A
)
¢¢A B
{
££ 
textInfo
§§ 
.
§§ 
meshInfo
§§ %
[
§§% &
i
§§& '
]
§§' (
.
§§( )
mesh
§§) -
.
§§- .
vertices
§§. 6
=
§§7 8
textInfo
§§9 A
.
§§A B
meshInfo
§§B J
[
§§J K
i
§§K L
]
§§L M
.
§§M N
vertices
§§N V
;
§§V W
m_TextComponent
•• #
.
••# $
UpdateGeometry
••$ 2
(
••2 3
textInfo
••3 ;
.
••; <
meshInfo
••< D
[
••D E
i
••E F
]
••F G
.
••G H
mesh
••H L
,
••L M
i
••N O
)
••O P
;
••P Q
}
¶¶ 
	loopCount
®® 
+=
®® 
$num
®® 
;
®® 
yield
™™ 
return
™™ 
new
™™  
WaitForSeconds
™™! /
(
™™/ 0
$num
™™0 4
)
™™4 5
;
™™5 6
}
´´ 
}
¨¨ 	
}
ÆÆ 
}ØØ Ê
BF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\FPSCounter.cs
	namespace 	

MaterialUI
 
{ 
public 
class 

FPSCounter 
: 
MonoBehaviour (
{ 
public 
float	 
updateInterval 
= 
$num  $
;$ %
float 
deltaFps 
= 
$num 
; 
int 
frames 
= 
$num 
; 
float 
timeleft 
; 
public 
Text	 
theText 
; 
void 
Start 
( 
) 
{ 
timeleft 
= 
updateInterval 
; 
} 
void   
Update   
(   
)   
{!! 
timeleft"" 
-="" 
Time"" 
."" 
	deltaTime"" 
;"" 
deltaFps## 
+=## 
Time## 
.## 
	timeScale## 
/## 
Time## "
.##" #
	deltaTime### ,
;##, -
++$$ 
frames$$ 
;$$ 
if'' 
('' 
timeleft'' 
<='' 
$num'' 
)'' 
{(( 
theText** 
.** 
text** 
=** 
$str** 
+** 
(** 
deltaFps** !
/**! "
frames**" (
)**( )
.**) *
ToString*** 2
(**2 3
$str**3 7
)**7 8
+**9 :
$str**; A
;**A B
if++ 
(++ 
(++ 	
deltaFps++	 
/++ 
frames++ 
)++ 
<++ 
$num++ 
)++ 
{,, 
theText-- 
.-- 
text-- 
=-- 
$str-- 
;-- 
}.. 
timeleft// 
=// 
updateInterval// 
;// 
deltaFps00 
=00 
$num00 
;00 
frames11 

=11 
$num11 
;11 
}22 
}33 
}44 
}55 —î
`F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_TextEventHandler.cs
	namespace 	
TMPro
 
{ 
public

 

class

  
TMP_TextEventHandler

 %
:

& '
MonoBehaviour

( 5
,

5 6 
IPointerEnterHandler

7 K
,

K L
IPointerExitHandler

M `
{ 
[ 	
Serializable	 
] 
public 
class #
CharacterSelectionEvent ,
:- .

UnityEvent/ 9
<9 :
char: >
,> ?
int@ C
>C D
{E F
}G H
[ 	
Serializable	 
] 
public 
class  
SpriteSelectionEvent )
:* +

UnityEvent, 6
<6 7
char7 ;
,; <
int= @
>@ A
{B C
}D E
[ 	
Serializable	 
] 
public 
class 
WordSelectionEvent '
:( )

UnityEvent* 4
<4 5
string5 ;
,; <
int= @
,@ A
intB E
>E F
{G H
}I J
[ 	
Serializable	 
] 
public 
class 
LineSelectionEvent '
:( )

UnityEvent* 4
<4 5
string5 ;
,; <
int= @
,@ A
intB E
>E F
{G H
}I J
[ 	
Serializable	 
] 
public 
class 
LinkSelectionEvent '
:( )

UnityEvent* 4
<4 5
string5 ;
,; <
string= C
,C D
intE H
>H I
{J K
}L M
public #
CharacterSelectionEvent & 
onCharacterSelection' ;
{   	
get!! 
{!! 
return!! "
m_OnCharacterSelection!! /
;!!/ 0
}!!1 2
set"" 
{"" "
m_OnCharacterSelection"" (
="") *
value""+ 0
;""0 1
}""2 3
}## 	
[$$ 	
SerializeField$$	 
]$$ 
private%% #
CharacterSelectionEvent%% '"
m_OnCharacterSelection%%( >
=%%? @
new%%A D#
CharacterSelectionEvent%%E \
(%%\ ]
)%%] ^
;%%^ _
public++  
SpriteSelectionEvent++ #
onSpriteSelection++$ 5
{,, 	
get-- 
{-- 
return-- 
m_OnSpriteSelection-- ,
;--, -
}--. /
set.. 
{.. 
m_OnSpriteSelection.. %
=..& '
value..( -
;..- .
}../ 0
}// 	
[00 	
SerializeField00	 
]00 
private11  
SpriteSelectionEvent11 $
m_OnSpriteSelection11% 8
=119 :
new11; > 
SpriteSelectionEvent11? S
(11S T
)11T U
;11U V
public77 
WordSelectionEvent77 !
onWordSelection77" 1
{88 	
get99 
{99 
return99 
m_OnWordSelection99 *
;99* +
}99, -
set:: 
{:: 
m_OnWordSelection:: #
=::$ %
value::& +
;::+ ,
}::- .
};; 	
[<< 	
SerializeField<<	 
]<< 
private== 
WordSelectionEvent== "
m_OnWordSelection==# 4
===5 6
new==7 :
WordSelectionEvent==; M
(==M N
)==N O
;==O P
publicCC 
LineSelectionEventCC !
onLineSelectionCC" 1
{DD 	
getEE 
{EE 
returnEE 
m_OnLineSelectionEE *
;EE* +
}EE, -
setFF 
{FF 
m_OnLineSelectionFF #
=FF$ %
valueFF& +
;FF+ ,
}FF- .
}GG 	
[HH 	
SerializeFieldHH	 
]HH 
privateII 
LineSelectionEventII "
m_OnLineSelectionII# 4
=II5 6
newII7 :
LineSelectionEventII; M
(IIM N
)IIN O
;IIO P
publicOO 
LinkSelectionEventOO !
onLinkSelectionOO" 1
{PP 	
getQQ 
{QQ 
returnQQ 
m_OnLinkSelectionQQ *
;QQ* +
}QQ, -
setRR 
{RR 
m_OnLinkSelectionRR #
=RR$ %
valueRR& +
;RR+ ,
}RR- .
}SS 	
[TT 	
SerializeFieldTT	 
]TT 
privateUU 
LinkSelectionEventUU "
m_OnLinkSelectionUU# 4
=UU5 6
newUU7 :
LinkSelectionEventUU; M
(UUM N
)UUN O
;UUO P
privateYY 
TMP_TextYY 
m_TextComponentYY (
;YY( )
private[[ 
Camera[[ 
m_Camera[[ 
;[[  
private\\ 
Canvas\\ 
m_Canvas\\ 
;\\  
private^^ 
int^^ 
m_selectedLink^^ "
=^^# $
-^^% &
$num^^& '
;^^' (
private__ 
int__ 
m_lastCharIndex__ #
=__$ %
-__& '
$num__' (
;__( )
private`` 
int`` 
m_lastWordIndex`` #
=``$ %
-``& '
$num``' (
;``( )
privateaa 
intaa 
m_lastLineIndexaa #
=aa$ %
-aa& '
$numaa' (
;aa( )
voidcc 
Awakecc 
(cc 
)cc 
{dd 	
m_TextComponentff 
=ff 

gameObjectff (
.ff( )
GetComponentff) 5
<ff5 6
TMP_Textff6 >
>ff> ?
(ff? @
)ff@ A
;ffA B
ifii 
(ii 
m_TextComponentii 
.ii  
GetTypeii  '
(ii' (
)ii( )
==ii* ,
typeofii- 3
(ii3 4
TextMeshProUGUIii4 C
)iiC D
)iiD E
{jj 
m_Canvaskk 
=kk 

gameObjectkk %
.kk% & 
GetComponentInParentkk& :
<kk: ;
Canvaskk; A
>kkA B
(kkB C
)kkC D
;kkD E
ifll 
(ll 
m_Canvasll 
!=ll 
nullll  $
)ll$ %
{mm 
ifnn 
(nn 
m_Canvasnn  
.nn  !

renderModenn! +
==nn, .

RenderModenn/ 9
.nn9 :
ScreenSpaceOverlaynn: L
)nnL M
m_Cameraoo  
=oo! "
nulloo# '
;oo' (
elsepp 
m_Cameraqq  
=qq! "
m_Canvasqq# +
.qq+ ,
worldCameraqq, 7
;qq7 8
}rr 
}ss 
elsett 
{uu 
m_Cameravv 
=vv 
Cameravv !
.vv! "
mainvv" &
;vv& '
}ww 
}xx 	
void{{ 

LateUpdate{{ 
({{ 
){{ 
{|| 	
if}} 
(}} 
TMP_TextUtilities}} !
.}}! "'
IsIntersectingRectTransform}}" =
(}}= >
m_TextComponent}}> M
.}}M N
rectTransform}}N [
,}}[ \
Input}}] b
.}}b c
mousePosition}}c p
,}}p q
m_Camera}}r z
)}}z {
)}}{ |
{~~ 
int
ÄÄ 
	charIndex
ÄÄ 
=
ÄÄ 
TMP_TextUtilities
ÄÄ  1
.
ÄÄ1 2'
FindIntersectingCharacter
ÄÄ2 K
(
ÄÄK L
m_TextComponent
ÄÄL [
,
ÄÄ[ \
Input
ÄÄ] b
.
ÄÄb c
mousePosition
ÄÄc p
,
ÄÄp q
m_Camera
ÄÄr z
,
ÄÄz {
trueÄÄ| Ä
)ÄÄÄ Å
;ÄÄÅ Ç
if
ÅÅ 
(
ÅÅ 
	charIndex
ÅÅ 
!=
ÅÅ  
-
ÅÅ! "
$num
ÅÅ" #
&&
ÅÅ$ &
	charIndex
ÅÅ' 0
!=
ÅÅ1 3
m_lastCharIndex
ÅÅ4 C
)
ÅÅC D
{
ÇÇ 
m_lastCharIndex
ÉÉ #
=
ÉÉ$ %
	charIndex
ÉÉ& /
;
ÉÉ/ 0!
TMP_TextElementType
ÖÖ '
elementType
ÖÖ( 3
=
ÖÖ4 5
m_TextComponent
ÖÖ6 E
.
ÖÖE F
textInfo
ÖÖF N
.
ÖÖN O
characterInfo
ÖÖO \
[
ÖÖ\ ]
	charIndex
ÖÖ] f
]
ÖÖf g
.
ÖÖg h
elementType
ÖÖh s
;
ÖÖs t
if
àà 
(
àà 
elementType
àà #
==
àà$ &!
TMP_TextElementType
àà' :
.
àà: ;
	Character
àà; D
)
ààD E&
SendOnCharacterSelection
ââ 0
(
ââ0 1
m_TextComponent
ââ1 @
.
ââ@ A
textInfo
ââA I
.
ââI J
characterInfo
ââJ W
[
ââW X
	charIndex
ââX a
]
ââa b
.
ââb c
	character
ââc l
,
ââl m
	charIndex
âân w
)
ââw x
;
ââx y
else
ää 
if
ää 
(
ää 
elementType
ää (
==
ää) +!
TMP_TextElementType
ää, ?
.
ää? @
Sprite
ää@ F
)
ääF G#
SendOnSpriteSelection
ãã -
(
ãã- .
m_TextComponent
ãã. =
.
ãã= >
textInfo
ãã> F
.
ããF G
characterInfo
ããG T
[
ããT U
	charIndex
ããU ^
]
ãã^ _
.
ãã_ `
	character
ãã` i
,
ããi j
	charIndex
ããk t
)
ããt u
;
ããu v
}
åå 
int
íí 
	wordIndex
íí 
=
íí 
TMP_TextUtilities
íí  1
.
íí1 2"
FindIntersectingWord
íí2 F
(
ííF G
m_TextComponent
ííG V
,
ííV W
Input
ííX ]
.
íí] ^
mousePosition
íí^ k
,
íík l
m_Camera
íím u
)
ííu v
;
íív w
if
ìì 
(
ìì 
	wordIndex
ìì 
!=
ìì  
-
ìì! "
$num
ìì" #
&&
ìì$ &
	wordIndex
ìì' 0
!=
ìì1 3
m_lastWordIndex
ìì4 C
)
ììC D
{
îî 
m_lastWordIndex
ïï #
=
ïï$ %
	wordIndex
ïï& /
;
ïï/ 0
TMP_WordInfo
òò  
wInfo
òò! &
=
òò' (
m_TextComponent
òò) 8
.
òò8 9
textInfo
òò9 A
.
òòA B
wordInfo
òòB J
[
òòJ K
	wordIndex
òòK T
]
òòT U
;
òòU V!
SendOnWordSelection
õõ '
(
õõ' (
wInfo
õõ( -
.
õõ- .
GetWord
õõ. 5
(
õõ5 6
)
õõ6 7
,
õõ7 8
wInfo
õõ9 >
.
õõ> ?!
firstCharacterIndex
õõ? R
,
õõR S
wInfo
õõT Y
.
õõY Z
characterCount
õõZ h
)
õõh i
;
õõi j
}
úú 
int
¢¢ 
	lineIndex
¢¢ 
=
¢¢ 
TMP_TextUtilities
¢¢  1
.
¢¢1 2"
FindIntersectingLine
¢¢2 F
(
¢¢F G
m_TextComponent
¢¢G V
,
¢¢V W
Input
¢¢X ]
.
¢¢] ^
mousePosition
¢¢^ k
,
¢¢k l
m_Camera
¢¢m u
)
¢¢u v
;
¢¢v w
if
££ 
(
££ 
	lineIndex
££ 
!=
££  
-
££! "
$num
££" #
&&
££$ &
	lineIndex
££' 0
!=
££1 3
m_lastLineIndex
££4 C
)
££C D
{
§§ 
m_lastLineIndex
•• #
=
••$ %
	lineIndex
••& /
;
••/ 0
TMP_LineInfo
®®  
lineInfo
®®! )
=
®®* +
m_TextComponent
®®, ;
.
®®; <
textInfo
®®< D
.
®®D E
lineInfo
®®E M
[
®®M N
	lineIndex
®®N W
]
®®W X
;
®®X Y
char
´´ 
[
´´ 
]
´´ 
buffer
´´ !
=
´´" #
new
´´$ '
char
´´( ,
[
´´, -
lineInfo
´´- 5
.
´´5 6
characterCount
´´6 D
]
´´D E
;
´´E F
for
¨¨ 
(
¨¨ 
int
¨¨ 
i
¨¨ 
=
¨¨  
$num
¨¨! "
;
¨¨" #
i
¨¨$ %
<
¨¨& '
lineInfo
¨¨( 0
.
¨¨0 1
characterCount
¨¨1 ?
&&
¨¨@ B
i
¨¨C D
<
¨¨E F
m_TextComponent
¨¨G V
.
¨¨V W
textInfo
¨¨W _
.
¨¨_ `
characterInfo
¨¨` m
.
¨¨m n
Length
¨¨n t
;
¨¨t u
i
¨¨v w
++
¨¨w y
)
¨¨y z
{
≠≠ 
buffer
ÆÆ 
[
ÆÆ 
i
ÆÆ  
]
ÆÆ  !
=
ÆÆ" #
m_TextComponent
ÆÆ$ 3
.
ÆÆ3 4
textInfo
ÆÆ4 <
.
ÆÆ< =
characterInfo
ÆÆ= J
[
ÆÆJ K
i
ÆÆK L
+
ÆÆM N
lineInfo
ÆÆO W
.
ÆÆW X!
firstCharacterIndex
ÆÆX k
]
ÆÆk l
.
ÆÆl m
	character
ÆÆm v
;
ÆÆv w
}
ØØ 
string
±± 
lineText
±± #
=
±±$ %
new
±±& )
string
±±* 0
(
±±0 1
buffer
±±1 7
)
±±7 8
;
±±8 9!
SendOnLineSelection
≤≤ '
(
≤≤' (
lineText
≤≤( 0
,
≤≤0 1
lineInfo
≤≤2 :
.
≤≤: ;!
firstCharacterIndex
≤≤; N
,
≤≤N O
lineInfo
≤≤P X
.
≤≤X Y
characterCount
≤≤Y g
)
≤≤g h
;
≤≤h i
}
≥≥ 
int
ππ 
	linkIndex
ππ 
=
ππ 
TMP_TextUtilities
ππ  1
.
ππ1 2"
FindIntersectingLink
ππ2 F
(
ππF G
m_TextComponent
ππG V
,
ππV W
Input
ππX ]
.
ππ] ^
mousePosition
ππ^ k
,
ππk l
m_Camera
ππm u
)
ππu v
;
ππv w
if
ºº 
(
ºº 
	linkIndex
ºº 
!=
ºº  
-
ºº! "
$num
ºº" #
&&
ºº$ &
	linkIndex
ºº' 0
!=
ºº1 3
m_selectedLink
ºº4 B
)
ººB C
{
ΩΩ 
m_selectedLink
ææ "
=
ææ# $
	linkIndex
ææ% .
;
ææ. /
TMP_LinkInfo
¡¡  
linkInfo
¡¡! )
=
¡¡* +
m_TextComponent
¡¡, ;
.
¡¡; <
textInfo
¡¡< D
.
¡¡D E
linkInfo
¡¡E M
[
¡¡M N
	linkIndex
¡¡N W
]
¡¡W X
;
¡¡X Y!
SendOnLinkSelection
ƒƒ '
(
ƒƒ' (
linkInfo
ƒƒ( 0
.
ƒƒ0 1
	GetLinkID
ƒƒ1 :
(
ƒƒ: ;
)
ƒƒ; <
,
ƒƒ< =
linkInfo
ƒƒ> F
.
ƒƒF G
GetLinkText
ƒƒG R
(
ƒƒR S
)
ƒƒS T
,
ƒƒT U
	linkIndex
ƒƒV _
)
ƒƒ_ `
;
ƒƒ` a
}
≈≈ 
}
«« 
else
»» 
{
…… 
m_selectedLink
ÀÀ 
=
ÀÀ  
-
ÀÀ! "
$num
ÀÀ" #
;
ÀÀ# $
m_lastCharIndex
ÃÃ 
=
ÃÃ  !
-
ÃÃ" #
$num
ÃÃ# $
;
ÃÃ$ %
m_lastWordIndex
ÕÕ 
=
ÕÕ  !
-
ÕÕ" #
$num
ÕÕ# $
;
ÕÕ$ %
m_lastLineIndex
ŒŒ 
=
ŒŒ  !
-
ŒŒ" #
$num
ŒŒ# $
;
ŒŒ$ %
}
œœ 
}
–– 	
public
”” 
void
”” 
OnPointerEnter
”” "
(
””" #
PointerEventData
””# 3
	eventData
””4 =
)
””= >
{
‘‘ 	
}
÷÷ 	
public
ŸŸ 
void
ŸŸ 
OnPointerExit
ŸŸ !
(
ŸŸ! "
PointerEventData
ŸŸ" 2
	eventData
ŸŸ3 <
)
ŸŸ< =
{
⁄⁄ 	
}
‹‹ 	
private
ﬂﬂ 
void
ﬂﬂ &
SendOnCharacterSelection
ﬂﬂ -
(
ﬂﬂ- .
char
ﬂﬂ. 2
	character
ﬂﬂ3 <
,
ﬂﬂ< =
int
ﬂﬂ> A
characterIndex
ﬂﬂB P
)
ﬂﬂP Q
{
‡‡ 	
if
·· 
(
·· "
onCharacterSelection
·· $
!=
··% '
null
··( ,
)
··, -"
onCharacterSelection
‚‚ $
.
‚‚$ %
Invoke
‚‚% +
(
‚‚+ ,
	character
‚‚, 5
,
‚‚5 6
characterIndex
‚‚7 E
)
‚‚E F
;
‚‚F G
}
„„ 	
private
ÂÂ 
void
ÂÂ #
SendOnSpriteSelection
ÂÂ *
(
ÂÂ* +
char
ÂÂ+ /
	character
ÂÂ0 9
,
ÂÂ9 :
int
ÂÂ; >
characterIndex
ÂÂ? M
)
ÂÂM N
{
ÊÊ 	
if
ÁÁ 
(
ÁÁ 
onSpriteSelection
ÁÁ !
!=
ÁÁ" $
null
ÁÁ% )
)
ÁÁ) *
onSpriteSelection
ËË !
.
ËË! "
Invoke
ËË" (
(
ËË( )
	character
ËË) 2
,
ËË2 3
characterIndex
ËË4 B
)
ËËB C
;
ËËC D
}
ÈÈ 	
private
ÎÎ 
void
ÎÎ !
SendOnWordSelection
ÎÎ (
(
ÎÎ( )
string
ÎÎ) /
word
ÎÎ0 4
,
ÎÎ4 5
int
ÎÎ6 9
	charIndex
ÎÎ: C
,
ÎÎC D
int
ÎÎE H
length
ÎÎI O
)
ÎÎO P
{
ÏÏ 	
if
ÌÌ 
(
ÌÌ 
onWordSelection
ÌÌ 
!=
ÌÌ  "
null
ÌÌ# '
)
ÌÌ' (
onWordSelection
ÓÓ 
.
ÓÓ  
Invoke
ÓÓ  &
(
ÓÓ& '
word
ÓÓ' +
,
ÓÓ+ ,
	charIndex
ÓÓ- 6
,
ÓÓ6 7
length
ÓÓ8 >
)
ÓÓ> ?
;
ÓÓ? @
}
ÔÔ 	
private
ÒÒ 
void
ÒÒ !
SendOnLineSelection
ÒÒ (
(
ÒÒ( )
string
ÒÒ) /
line
ÒÒ0 4
,
ÒÒ4 5
int
ÒÒ6 9
	charIndex
ÒÒ: C
,
ÒÒC D
int
ÒÒE H
length
ÒÒI O
)
ÒÒO P
{
ÚÚ 	
if
ÛÛ 
(
ÛÛ 
onLineSelection
ÛÛ 
!=
ÛÛ  "
null
ÛÛ# '
)
ÛÛ' (
onLineSelection
ÙÙ 
.
ÙÙ  
Invoke
ÙÙ  &
(
ÙÙ& '
line
ÙÙ' +
,
ÙÙ+ ,
	charIndex
ÙÙ- 6
,
ÙÙ6 7
length
ÙÙ8 >
)
ÙÙ> ?
;
ÙÙ? @
}
ıı 	
private
˜˜ 
void
˜˜ !
SendOnLinkSelection
˜˜ (
(
˜˜( )
string
˜˜) /
linkID
˜˜0 6
,
˜˜6 7
string
˜˜8 >
linkText
˜˜? G
,
˜˜G H
int
˜˜I L
	linkIndex
˜˜M V
)
˜˜V W
{
¯¯ 	
if
˘˘ 
(
˘˘ 
onLinkSelection
˘˘ 
!=
˘˘  "
null
˘˘# '
)
˘˘' (
onLinkSelection
˙˙ 
.
˙˙  
Invoke
˙˙  &
(
˙˙& '
linkID
˙˙' -
,
˙˙- .
linkText
˙˙/ 7
,
˙˙7 8
	linkIndex
˙˙9 B
)
˙˙B C
;
˙˙C D
}
˚˚ 	
}
˝˝ 
}˛˛ Ë
CF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ColorCopier.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 
class 
ColorCopier 
: 
MonoBehaviour )
{		 
[

 
Header

 	
(

	 

$str


 (
)

( )
]

) *
[ 
SerializeField 
] 
public 
Image 
sourceImage  +
;+ ,
[ 
SerializeField 
] 
public 
Text 

sourceText )
;) *
private 	
Image
 
	thisImage 
; 
private 	
Text
 
thisText 
; 
private 	
Color
 
	lastColor 
; 
private 	
void
 
OnEnable 
( 
) 
{ 
	thisImage 
= 

gameObject 
. 
GetComponent &
<& '
Image' ,
>, -
(- .
). /
;/ 0
thisText 
= 

gameObject 
. 
GetComponent %
<% &
Text& *
>* +
(+ ,
), -
;- .
} 
private 	
void
 

LateUpdate 
( 
) 
{ 
if 
( 
sourceImage 
) 
{ 
if 
( 
	thisImage 
) 
{ 
if 
( 	
sourceImage	 
. 
color 
!= 
	lastColor '
)' (
{ 
	thisImage 
. 
color 
= 
sourceImage #
.# $
color$ )
;) *
	lastColor   
=   
sourceImage   
.   
color   #
;  # $
}!! 
}"" 
else## 
if##	 
(## 
thisText## 
)## 
{$$ 
if%% 
(%% 	
sourceImage%%	 
.%% 
color%% 
!=%% 
	lastColor%% '
)%%' (
{&& 
thisText'' 
.'' 
color'' 
='' 
sourceImage'' "
.''" #
color''# (
;''( )
	lastColor(( 
=(( 
sourceImage(( 
.(( 
color(( #
;((# $
})) 
}** 
}++ 
else,, 
if,, 

(,, 

sourceText,, 
),, 
{-- 
if.. 
(.. 
	thisImage.. 
).. 
{// 
if00 
(00 	

sourceText00	 
.00 
color00 
!=00 
	lastColor00 &
)00& '
{11 
	thisImage22 
.22 
color22 
=22 

sourceText22 "
.22" #
color22# (
;22( )
	lastColor33 
=33 

sourceText33 
.33 
color33 "
;33" #
}44 
}55 
else66 
if66	 
(66 
thisText66 
)66 
{77 
if88 
(88 	

sourceText88	 
.88 
color88 
!=88 
	lastColor88 &
)88& '
{99 
thisText:: 
.:: 
color:: 
=:: 

sourceText:: !
.::! "
color::" '
;::' (
	lastColor;; 
=;; 

sourceText;; 
.;; 
color;; "
;;;" #
}<< 
}== 
}>> 
}?? 
}@@ 
}AA ˛¬
^F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_TextSelector_B.cs
	namespace

 	
TMPro


 
.

 
Examples

 
{ 
public 

class 
TMP_TextSelector_B #
:$ %
MonoBehaviour& 3
,3 4 
IPointerEnterHandler5 I
,I J
IPointerExitHandlerK ^
,^ _ 
IPointerClickHandler` t
,t u
IPointerUpHandler	v á
{ 
public 
RectTransform 
TextPopup_Prefab_01 0
;0 1
private 
RectTransform %
m_TextPopup_RectTransform 7
;7 8
private 
TextMeshProUGUI $
m_TextPopup_TMPComponent  8
;8 9
private 
const 
string 

k_LinkText '
=( )
$str* L
;L M
private 
const 
string 

k_WordText '
=( )
$str* A
;A B
private 
TextMeshProUGUI 
m_TextMeshPro  -
;- .
private 
Canvas 
m_Canvas 
;  
private 
Camera 
m_Camera 
;  
private 
bool 
isHoveringObject %
;% &
private 
int 
m_selectedWord "
=# $
-% &
$num& '
;' (
private 
int 
m_selectedLink "
=# $
-% &
$num& '
;' (
private 
int 
m_lastIndex 
=  !
-" #
$num# $
;$ %
private!! 
	Matrix4x4!! 
m_matrix!! "
;!!" #
private## 
TMP_MeshInfo## 
[## 
]## &
m_cachedMeshInfoVertexData## 9
;##9 :
void%% 
Awake%% 
(%% 
)%% 
{&& 	
m_TextMeshPro'' 
='' 

gameObject'' &
.''& '
GetComponent''' 3
<''3 4
TextMeshProUGUI''4 C
>''C D
(''D E
)''E F
;''F G
m_Canvas** 
=** 

gameObject** !
.**! " 
GetComponentInParent**" 6
<**6 7
Canvas**7 =
>**= >
(**> ?
)**? @
;**@ A
if-- 
(-- 
m_Canvas-- 
.-- 

renderMode-- #
==--$ &

RenderMode--' 1
.--1 2
ScreenSpaceOverlay--2 D
)--D E
m_Camera.. 
=.. 
null.. 
;..  
else// 
m_Camera00 
=00 
m_Canvas00 #
.00# $
worldCamera00$ /
;00/ 0%
m_TextPopup_RectTransform33 %
=33& '
Instantiate33( 3
(333 4
TextPopup_Prefab_01334 G
)33G H
as33I K
RectTransform33L Y
;33Y Z%
m_TextPopup_RectTransform44 %
.44% &
	SetParent44& /
(44/ 0
m_Canvas440 8
.448 9
	transform449 B
,44B C
false44D I
)44I J
;44J K$
m_TextPopup_TMPComponent55 $
=55% &%
m_TextPopup_RectTransform55' @
.55@ A"
GetComponentInChildren55A W
<55W X
TextMeshProUGUI55X g
>55g h
(55h i
)55i j
;55j k%
m_TextPopup_RectTransform66 %
.66% &

gameObject66& 0
.660 1
	SetActive661 :
(66: ;
false66; @
)66@ A
;66A B
}77 	
void:: 
OnEnable:: 
(:: 
):: 
{;; 	
TMPro_EventManager== 
.== 
TEXT_CHANGED_EVENT== 1
.==1 2
Add==2 5
(==5 6
ON_TEXT_CHANGED==6 E
)==E F
;==F G
}>> 	
void@@ 
	OnDisable@@ 
(@@ 
)@@ 
{AA 	
TMPro_EventManagerCC 
.CC 
TEXT_CHANGED_EVENTCC 1
.CC1 2
RemoveCC2 8
(CC8 9
ON_TEXT_CHANGEDCC9 H
)CCH I
;CCI J
}DD 	
voidGG 
ON_TEXT_CHANGEDGG 
(GG 
ObjectGG #
objGG$ '
)GG' (
{HH 	
ifII 
(II 
objII 
==II 
m_TextMeshProII $
)II$ %
{JJ &
m_cachedMeshInfoVertexDataLL *
=LL+ ,
m_TextMeshProLL- :
.LL: ;
textInfoLL; C
.LLC D"
CopyMeshInfoVertexDataLLD Z
(LLZ [
)LL[ \
;LL\ ]
}MM 
}NN 	
voidQQ 

LateUpdateQQ 
(QQ 
)QQ 
{RR 	
ifSS 
(SS 
isHoveringObjectSS  
)SS  !
{TT 
intWW 
	charIndexWW 
=WW 
TMP_TextUtilitiesWW  1
.WW1 2%
FindIntersectingCharacterWW2 K
(WWK L
m_TextMeshProWWL Y
,WWY Z
InputWW[ `
.WW` a
mousePositionWWa n
,WWn o
m_CameraWWp x
,WWx y
trueWWz ~
)WW~ 
;	WW Ä
ifZZ 
(ZZ 
	charIndexZZ 
==ZZ  
-ZZ! "
$numZZ" #
||ZZ$ &
	charIndexZZ' 0
!=ZZ1 3
m_lastIndexZZ4 ?
)ZZ? @
{[[ )
RestoreCachedVertexAttributes\\ 1
(\\1 2
m_lastIndex\\2 =
)\\= >
;\\> ?
m_lastIndex]] 
=]]  !
-]]" #
$num]]# $
;]]$ %
}^^ 
if`` 
(`` 
	charIndex`` 
!=``  
-``! "
$num``" #
&&``$ &
	charIndex``' 0
!=``1 3
m_lastIndex``4 ?
&&``@ B
(``C D
Input``D I
.``I J
GetKey``J P
(``P Q
KeyCode``Q X
.``X Y
	LeftShift``Y b
)``b c
||``d f
Input``g l
.``l m
GetKey``m s
(``s t
KeyCode``t {
.``{ |

RightShift	``| Ü
)
``Ü á
)
``á à
)
``à â
{aa 
m_lastIndexbb 
=bb  !
	charIndexbb" +
;bb+ ,
intee 
materialIndexee %
=ee& '
m_TextMeshProee( 5
.ee5 6
textInfoee6 >
.ee> ?
characterInfoee? L
[eeL M
	charIndexeeM V
]eeV W
.eeW X"
materialReferenceIndexeeX n
;een o
inthh 
vertexIndexhh #
=hh$ %
m_TextMeshProhh& 3
.hh3 4
textInfohh4 <
.hh< =
characterInfohh= J
[hhJ K
	charIndexhhK T
]hhT U
.hhU V
vertexIndexhhV a
;hha b
Vector3kk 
[kk 
]kk 
verticeskk &
=kk' (
m_TextMeshProkk) 6
.kk6 7
textInfokk7 ?
.kk? @
meshInfokk@ H
[kkH I
materialIndexkkI V
]kkV W
.kkW X
verticeskkX `
;kk` a
Vector2nn 
charMidBaslinenn *
=nn+ ,
(nn- .
verticesnn. 6
[nn6 7
vertexIndexnn7 B
+nnC D
$numnnE F
]nnF G
+nnH I
verticesnnJ R
[nnR S
vertexIndexnnS ^
+nn_ `
$numnna b
]nnb c
)nnc d
/nne f
$numnng h
;nnh i
Vector3rr 
offsetrr "
=rr# $
charMidBaslinerr% 3
;rr3 4
verticesuu 
[uu 
vertexIndexuu (
+uu) *
$numuu+ ,
]uu, -
=uu. /
verticesuu0 8
[uu8 9
vertexIndexuu9 D
+uuE F
$numuuG H
]uuH I
-uuJ K
offsetuuL R
;uuR S
verticesvv 
[vv 
vertexIndexvv (
+vv) *
$numvv+ ,
]vv, -
=vv. /
verticesvv0 8
[vv8 9
vertexIndexvv9 D
+vvE F
$numvvG H
]vvH I
-vvJ K
offsetvvL R
;vvR S
verticesww 
[ww 
vertexIndexww (
+ww) *
$numww+ ,
]ww, -
=ww. /
verticesww0 8
[ww8 9
vertexIndexww9 D
+wwE F
$numwwG H
]wwH I
-wwJ K
offsetwwL R
;wwR S
verticesxx 
[xx 
vertexIndexxx (
+xx) *
$numxx+ ,
]xx, -
=xx. /
verticesxx0 8
[xx8 9
vertexIndexxx9 D
+xxE F
$numxxG H
]xxH I
-xxJ K
offsetxxL R
;xxR S
floatzz 

zoomFactorzz $
=zz% &
$numzz' +
;zz+ ,
m_matrix}} 
=}} 
	Matrix4x4}} (
.}}( )
TRS}}) ,
(}}, -
Vector3}}- 4
.}}4 5
zero}}5 9
,}}9 :

Quaternion}}; E
.}}E F
identity}}F N
,}}N O
Vector3}}P W
.}}W X
one}}X [
*}}\ ]

zoomFactor}}^ h
)}}h i
;}}i j
vertices
ÄÄ 
[
ÄÄ 
vertexIndex
ÄÄ (
+
ÄÄ) *
$num
ÄÄ+ ,
]
ÄÄ, -
=
ÄÄ. /
m_matrix
ÄÄ0 8
.
ÄÄ8 9
MultiplyPoint3x4
ÄÄ9 I
(
ÄÄI J
vertices
ÄÄJ R
[
ÄÄR S
vertexIndex
ÄÄS ^
+
ÄÄ_ `
$num
ÄÄa b
]
ÄÄb c
)
ÄÄc d
;
ÄÄd e
vertices
ÅÅ 
[
ÅÅ 
vertexIndex
ÅÅ (
+
ÅÅ) *
$num
ÅÅ+ ,
]
ÅÅ, -
=
ÅÅ. /
m_matrix
ÅÅ0 8
.
ÅÅ8 9
MultiplyPoint3x4
ÅÅ9 I
(
ÅÅI J
vertices
ÅÅJ R
[
ÅÅR S
vertexIndex
ÅÅS ^
+
ÅÅ_ `
$num
ÅÅa b
]
ÅÅb c
)
ÅÅc d
;
ÅÅd e
vertices
ÇÇ 
[
ÇÇ 
vertexIndex
ÇÇ (
+
ÇÇ) *
$num
ÇÇ+ ,
]
ÇÇ, -
=
ÇÇ. /
m_matrix
ÇÇ0 8
.
ÇÇ8 9
MultiplyPoint3x4
ÇÇ9 I
(
ÇÇI J
vertices
ÇÇJ R
[
ÇÇR S
vertexIndex
ÇÇS ^
+
ÇÇ_ `
$num
ÇÇa b
]
ÇÇb c
)
ÇÇc d
;
ÇÇd e
vertices
ÉÉ 
[
ÉÉ 
vertexIndex
ÉÉ (
+
ÉÉ) *
$num
ÉÉ+ ,
]
ÉÉ, -
=
ÉÉ. /
m_matrix
ÉÉ0 8
.
ÉÉ8 9
MultiplyPoint3x4
ÉÉ9 I
(
ÉÉI J
vertices
ÉÉJ R
[
ÉÉR S
vertexIndex
ÉÉS ^
+
ÉÉ_ `
$num
ÉÉa b
]
ÉÉb c
)
ÉÉc d
;
ÉÉd e
vertices
ÜÜ 
[
ÜÜ 
vertexIndex
ÜÜ (
+
ÜÜ) *
$num
ÜÜ+ ,
]
ÜÜ, -
=
ÜÜ. /
vertices
ÜÜ0 8
[
ÜÜ8 9
vertexIndex
ÜÜ9 D
+
ÜÜE F
$num
ÜÜG H
]
ÜÜH I
+
ÜÜJ K
offset
ÜÜL R
;
ÜÜR S
vertices
áá 
[
áá 
vertexIndex
áá (
+
áá) *
$num
áá+ ,
]
áá, -
=
áá. /
vertices
áá0 8
[
áá8 9
vertexIndex
áá9 D
+
ááE F
$num
ááG H
]
ááH I
+
ááJ K
offset
ááL R
;
ááR S
vertices
àà 
[
àà 
vertexIndex
àà (
+
àà) *
$num
àà+ ,
]
àà, -
=
àà. /
vertices
àà0 8
[
àà8 9
vertexIndex
àà9 D
+
ààE F
$num
ààG H
]
ààH I
+
ààJ K
offset
ààL R
;
ààR S
vertices
ââ 
[
ââ 
vertexIndex
ââ (
+
ââ) *
$num
ââ+ ,
]
ââ, -
=
ââ. /
vertices
ââ0 8
[
ââ8 9
vertexIndex
ââ9 D
+
ââE F
$num
ââG H
]
ââH I
+
ââJ K
offset
ââL R
;
ââR S
Color32
åå 
c
åå 
=
åå 
new
åå  #
Color32
åå$ +
(
åå+ ,
$num
åå, /
,
åå/ 0
$num
åå1 4
,
åå4 5
$num
åå6 9
,
åå9 :
$num
åå; >
)
åå> ?
;
åå? @
Color32
èè 
[
èè 
]
èè 
vertexColors
èè *
=
èè+ ,
m_TextMeshPro
èè- :
.
èè: ;
textInfo
èè; C
.
èèC D
meshInfo
èèD L
[
èèL M
materialIndex
èèM Z
]
èèZ [
.
èè[ \
colors32
èè\ d
;
èèd e
vertexColors
ëë  
[
ëë  !
vertexIndex
ëë! ,
+
ëë- .
$num
ëë/ 0
]
ëë0 1
=
ëë2 3
c
ëë4 5
;
ëë5 6
vertexColors
íí  
[
íí  !
vertexIndex
íí! ,
+
íí- .
$num
íí/ 0
]
íí0 1
=
íí2 3
c
íí4 5
;
íí5 6
vertexColors
ìì  
[
ìì  !
vertexIndex
ìì! ,
+
ìì- .
$num
ìì/ 0
]
ìì0 1
=
ìì2 3
c
ìì4 5
;
ìì5 6
vertexColors
îî  
[
îî  !
vertexIndex
îî! ,
+
îî- .
$num
îî/ 0
]
îî0 1
=
îî2 3
c
îî4 5
;
îî5 6
TMP_MeshInfo
òò  
meshInfo
òò! )
=
òò* +
m_TextMeshPro
òò, 9
.
òò9 :
textInfo
òò: B
.
òòB C
meshInfo
òòC K
[
òòK L
materialIndex
òòL Y
]
òòY Z
;
òòZ [
int
õõ 
lastVertexIndex
õõ '
=
õõ( )
vertices
õõ* 2
.
õõ2 3
Length
õõ3 9
-
õõ: ;
$num
õõ< =
;
õõ= >
meshInfo
üü 
.
üü 
SwapVertexData
üü +
(
üü+ ,
vertexIndex
üü, 7
,
üü7 8
lastVertexIndex
üü9 H
)
üüH I
;
üüI J
m_TextMeshPro
¢¢ !
.
¢¢! "
UpdateVertexData
¢¢" 2
(
¢¢2 3'
TMP_VertexDataUpdateFlags
¢¢3 L
.
¢¢L M
All
¢¢M P
)
¢¢P Q
;
¢¢Q R
}
££ 
int
©© 
	wordIndex
©© 
=
©© 
TMP_TextUtilities
©©  1
.
©©1 2"
FindIntersectingWord
©©2 F
(
©©F G
m_TextMeshPro
©©G T
,
©©T U
Input
©©V [
.
©©[ \
mousePosition
©©\ i
,
©©i j
m_Camera
©©k s
)
©©s t
;
©©t u
if
¨¨ 
(
¨¨ '
m_TextPopup_RectTransform
¨¨ -
!=
¨¨. 0
null
¨¨1 5
&&
¨¨6 8
m_selectedWord
¨¨9 G
!=
¨¨H J
-
¨¨K L
$num
¨¨L M
&&
¨¨N P
(
¨¨Q R
	wordIndex
¨¨R [
==
¨¨\ ^
-
¨¨_ `
$num
¨¨` a
||
¨¨b d
	wordIndex
¨¨e n
!=
¨¨o q
m_selectedWord¨¨r Ä
)¨¨Ä Å
)¨¨Å Ç
{
≠≠ 
TMP_WordInfo
ÆÆ  
wInfo
ÆÆ! &
=
ÆÆ' (
m_TextMeshPro
ÆÆ) 6
.
ÆÆ6 7
textInfo
ÆÆ7 ?
.
ÆÆ? @
wordInfo
ÆÆ@ H
[
ÆÆH I
m_selectedWord
ÆÆI W
]
ÆÆW X
;
ÆÆX Y
for
±± 
(
±± 
int
±± 
i
±± 
=
±±  
$num
±±! "
;
±±" #
i
±±$ %
<
±±& '
wInfo
±±( -
.
±±- .
characterCount
±±. <
;
±±< =
i
±±> ?
++
±±? A
)
±±A B
{
≤≤ 
int
≥≥ 
characterIndex
≥≥ *
=
≥≥+ ,
wInfo
≥≥- 2
.
≥≥2 3!
firstCharacterIndex
≥≥3 F
+
≥≥G H
i
≥≥I J
;
≥≥J K
int
∂∂ 
	meshIndex
∂∂ %
=
∂∂& '
m_TextMeshPro
∂∂( 5
.
∂∂5 6
textInfo
∂∂6 >
.
∂∂> ?
characterInfo
∂∂? L
[
∂∂L M
characterIndex
∂∂M [
]
∂∂[ \
.
∂∂\ ]$
materialReferenceIndex
∂∂] s
;
∂∂s t
int
ππ 
vertexIndex
ππ '
=
ππ( )
m_TextMeshPro
ππ* 7
.
ππ7 8
textInfo
ππ8 @
.
ππ@ A
characterInfo
ππA N
[
ππN O
characterIndex
ππO ]
]
ππ] ^
.
ππ^ _
vertexIndex
ππ_ j
;
ππj k
Color32
ºº 
[
ºº  
]
ºº  !
vertexColors
ºº" .
=
ºº/ 0
m_TextMeshPro
ºº1 >
.
ºº> ?
textInfo
ºº? G
.
ººG H
meshInfo
ººH P
[
ººP Q
	meshIndex
ººQ Z
]
ººZ [
.
ºº[ \
colors32
ºº\ d
;
ººd e
Color32
ææ 
c
ææ  !
=
ææ" #
vertexColors
ææ$ 0
[
ææ0 1
vertexIndex
ææ1 <
+
ææ= >
$num
ææ? @
]
ææ@ A
.
ææA B
Tint
ææB F
(
ææF G
$num
ææG O
)
ææO P
;
ææP Q
vertexColors
¿¿ $
[
¿¿$ %
vertexIndex
¿¿% 0
+
¿¿1 2
$num
¿¿3 4
]
¿¿4 5
=
¿¿6 7
c
¿¿8 9
;
¿¿9 :
vertexColors
¡¡ $
[
¡¡$ %
vertexIndex
¡¡% 0
+
¡¡1 2
$num
¡¡3 4
]
¡¡4 5
=
¡¡6 7
c
¡¡8 9
;
¡¡9 :
vertexColors
¬¬ $
[
¬¬$ %
vertexIndex
¬¬% 0
+
¬¬1 2
$num
¬¬3 4
]
¬¬4 5
=
¬¬6 7
c
¬¬8 9
;
¬¬9 :
vertexColors
√√ $
[
√√$ %
vertexIndex
√√% 0
+
√√1 2
$num
√√3 4
]
√√4 5
=
√√6 7
c
√√8 9
;
√√9 :
}
ƒƒ 
m_TextMeshPro
«« !
.
««! "
UpdateVertexData
««" 2
(
««2 3'
TMP_VertexDataUpdateFlags
««3 L
.
««L M
All
««M P
)
««P Q
;
««Q R
m_selectedWord
…… "
=
……# $
-
……% &
$num
……& '
;
……' (
}
   
if
ŒŒ 
(
ŒŒ 
	wordIndex
ŒŒ 
!=
ŒŒ  
-
ŒŒ! "
$num
ŒŒ" #
&&
ŒŒ$ &
	wordIndex
ŒŒ' 0
!=
ŒŒ1 3
m_selectedWord
ŒŒ4 B
&&
ŒŒC E
!
ŒŒF G
(
ŒŒG H
Input
ŒŒH M
.
ŒŒM N
GetKey
ŒŒN T
(
ŒŒT U
KeyCode
ŒŒU \
.
ŒŒ\ ]
	LeftShift
ŒŒ] f
)
ŒŒf g
||
ŒŒh j
Input
ŒŒk p
.
ŒŒp q
GetKey
ŒŒq w
(
ŒŒw x
KeyCode
ŒŒx 
.ŒŒ Ä

RightShiftŒŒÄ ä
)ŒŒä ã
)ŒŒã å
)ŒŒå ç
{
œœ 
m_selectedWord
–– "
=
––# $
	wordIndex
––% .
;
––. /
TMP_WordInfo
““  
wInfo
““! &
=
““' (
m_TextMeshPro
““) 6
.
““6 7
textInfo
““7 ?
.
““? @
wordInfo
““@ H
[
““H I
	wordIndex
““I R
]
““R S
;
““S T
for
’’ 
(
’’ 
int
’’ 
i
’’ 
=
’’  
$num
’’! "
;
’’" #
i
’’$ %
<
’’& '
wInfo
’’( -
.
’’- .
characterCount
’’. <
;
’’< =
i
’’> ?
++
’’? A
)
’’A B
{
÷÷ 
int
◊◊ 
characterIndex
◊◊ *
=
◊◊+ ,
wInfo
◊◊- 2
.
◊◊2 3!
firstCharacterIndex
◊◊3 F
+
◊◊G H
i
◊◊I J
;
◊◊J K
int
⁄⁄ 
	meshIndex
⁄⁄ %
=
⁄⁄& '
m_TextMeshPro
⁄⁄( 5
.
⁄⁄5 6
textInfo
⁄⁄6 >
.
⁄⁄> ?
characterInfo
⁄⁄? L
[
⁄⁄L M
characterIndex
⁄⁄M [
]
⁄⁄[ \
.
⁄⁄\ ]$
materialReferenceIndex
⁄⁄] s
;
⁄⁄s t
int
‹‹ 
vertexIndex
‹‹ '
=
‹‹( )
m_TextMeshPro
‹‹* 7
.
‹‹7 8
textInfo
‹‹8 @
.
‹‹@ A
characterInfo
‹‹A N
[
‹‹N O
characterIndex
‹‹O ]
]
‹‹] ^
.
‹‹^ _
vertexIndex
‹‹_ j
;
‹‹j k
Color32
ﬂﬂ 
[
ﬂﬂ  
]
ﬂﬂ  !
vertexColors
ﬂﬂ" .
=
ﬂﬂ/ 0
m_TextMeshPro
ﬂﬂ1 >
.
ﬂﬂ> ?
textInfo
ﬂﬂ? G
.
ﬂﬂG H
meshInfo
ﬂﬂH P
[
ﬂﬂP Q
	meshIndex
ﬂﬂQ Z
]
ﬂﬂZ [
.
ﬂﬂ[ \
colors32
ﬂﬂ\ d
;
ﬂﬂd e
Color32
·· 
c
··  !
=
··" #
vertexColors
··$ 0
[
··0 1
vertexIndex
··1 <
+
··= >
$num
··? @
]
··@ A
.
··A B
Tint
··B F
(
··F G
$num
··G L
)
··L M
;
··M N
vertexColors
„„ $
[
„„$ %
vertexIndex
„„% 0
+
„„1 2
$num
„„3 4
]
„„4 5
=
„„6 7
c
„„8 9
;
„„9 :
vertexColors
‰‰ $
[
‰‰$ %
vertexIndex
‰‰% 0
+
‰‰1 2
$num
‰‰3 4
]
‰‰4 5
=
‰‰6 7
c
‰‰8 9
;
‰‰9 :
vertexColors
ÂÂ $
[
ÂÂ$ %
vertexIndex
ÂÂ% 0
+
ÂÂ1 2
$num
ÂÂ3 4
]
ÂÂ4 5
=
ÂÂ6 7
c
ÂÂ8 9
;
ÂÂ9 :
vertexColors
ÊÊ $
[
ÊÊ$ %
vertexIndex
ÊÊ% 0
+
ÊÊ1 2
$num
ÊÊ3 4
]
ÊÊ4 5
=
ÊÊ6 7
c
ÊÊ8 9
;
ÊÊ9 :
}
ÁÁ 
m_TextMeshPro
ÍÍ !
.
ÍÍ! "
UpdateVertexData
ÍÍ" 2
(
ÍÍ2 3'
TMP_VertexDataUpdateFlags
ÍÍ3 L
.
ÍÍL M
All
ÍÍM P
)
ÍÍP Q
;
ÍÍQ R
}
ÏÏ 
int
ÚÚ 
	linkIndex
ÚÚ 
=
ÚÚ 
TMP_TextUtilities
ÚÚ  1
.
ÚÚ1 2"
FindIntersectingLink
ÚÚ2 F
(
ÚÚF G
m_TextMeshPro
ÚÚG T
,
ÚÚT U
Input
ÚÚV [
.
ÚÚ[ \
mousePosition
ÚÚ\ i
,
ÚÚi j
m_Camera
ÚÚk s
)
ÚÚs t
;
ÚÚt u
if
ıı 
(
ıı 
(
ıı 
	linkIndex
ıı 
==
ıı !
-
ıı" #
$num
ıı# $
&&
ıı% '
m_selectedLink
ıı( 6
!=
ıı7 9
-
ıı: ;
$num
ıı; <
)
ıı< =
||
ıı> @
	linkIndex
ııA J
!=
ııK M
m_selectedLink
ııN \
)
ıı\ ]
{
ˆˆ '
m_TextPopup_RectTransform
˜˜ -
.
˜˜- .

gameObject
˜˜. 8
.
˜˜8 9
	SetActive
˜˜9 B
(
˜˜B C
false
˜˜C H
)
˜˜H I
;
˜˜I J
m_selectedLink
¯¯ "
=
¯¯# $
-
¯¯% &
$num
¯¯& '
;
¯¯' (
}
˘˘ 
if
¸¸ 
(
¸¸ 
	linkIndex
¸¸ 
!=
¸¸  
-
¸¸! "
$num
¸¸" #
&&
¸¸$ &
	linkIndex
¸¸' 0
!=
¸¸1 3
m_selectedLink
¸¸4 B
)
¸¸B C
{
˝˝ 
m_selectedLink
˛˛ "
=
˛˛# $
	linkIndex
˛˛% .
;
˛˛. /
TMP_LinkInfo
ÄÄ  
linkInfo
ÄÄ! )
=
ÄÄ* +
m_TextMeshPro
ÄÄ, 9
.
ÄÄ9 :
textInfo
ÄÄ: B
.
ÄÄB C
linkInfo
ÄÄC K
[
ÄÄK L
	linkIndex
ÄÄL U
]
ÄÄU V
;
ÄÄV W
Vector3
ÑÑ #
worldPointInRectangle
ÑÑ 1
;
ÑÑ1 2"
RectTransformUtility
ÖÖ (
.
ÖÖ( )0
"ScreenPointToWorldPointInRectangle
ÖÖ) K
(
ÖÖK L
m_TextMeshPro
ÖÖL Y
.
ÖÖY Z
rectTransform
ÖÖZ g
,
ÖÖg h
Input
ÖÖi n
.
ÖÖn o
mousePosition
ÖÖo |
,
ÖÖ| }
m_CameraÖÖ~ Ü
,ÖÖÜ á
outÖÖà ã%
worldPointInRectangleÖÖå °
)ÖÖ° ¢
;ÖÖ¢ £
switch
áá 
(
áá 
linkInfo
áá $
.
áá$ %
	GetLinkID
áá% .
(
áá. /
)
áá/ 0
)
áá0 1
{
àà 
case
ââ 
$str
ââ $
:
ââ$ %'
m_TextPopup_RectTransform
ää 5
.
ää5 6
position
ää6 >
=
ää? @#
worldPointInRectangle
ääA V
;
ääV W'
m_TextPopup_RectTransform
ãã 5
.
ãã5 6

gameObject
ãã6 @
.
ãã@ A
	SetActive
ããA J
(
ããJ K
true
ããK O
)
ããO P
;
ããP Q&
m_TextPopup_TMPComponent
åå 4
.
åå4 5
text
åå5 9
=
åå: ;

k_LinkText
åå< F
+
ååG H
$str
ååI Q
;
ååQ R
break
çç !
;
çç! "
case
éé 
$str
éé $
:
éé$ %'
m_TextPopup_RectTransform
èè 5
.
èè5 6
position
èè6 >
=
èè? @#
worldPointInRectangle
èèA V
;
èèV W'
m_TextPopup_RectTransform
êê 5
.
êê5 6

gameObject
êê6 @
.
êê@ A
	SetActive
êêA J
(
êêJ K
true
êêK O
)
êêO P
;
êêP Q&
m_TextPopup_TMPComponent
ëë 4
.
ëë4 5
text
ëë5 9
=
ëë: ;

k_LinkText
ëë< F
+
ëëG H
$str
ëëI Q
;
ëëQ R
break
íí !
;
íí! "
}
ìì 
}
îî 
}
óó 
else
òò 
{
ôô 
if
õõ 
(
õõ 
m_lastIndex
õõ 
!=
õõ  "
-
õõ# $
$num
õõ$ %
)
õõ% &
{
úú +
RestoreCachedVertexAttributes
ùù 1
(
ùù1 2
m_lastIndex
ùù2 =
)
ùù= >
;
ùù> ?
m_lastIndex
ûû 
=
ûû  !
-
ûû" #
$num
ûû# $
;
ûû$ %
}
üü 
}
†† 
}
¢¢ 	
public
•• 
void
•• 
OnPointerEnter
•• "
(
••" #
PointerEventData
••# 3
	eventData
••4 =
)
••= >
{
¶¶ 	
isHoveringObject
®® 
=
®® 
true
®® #
;
®®# $
}
©© 	
public
¨¨ 
void
¨¨ 
OnPointerExit
¨¨ !
(
¨¨! "
PointerEventData
¨¨" 2
	eventData
¨¨3 <
)
¨¨< =
{
≠≠ 	
isHoveringObject
ØØ 
=
ØØ 
false
ØØ $
;
ØØ$ %
}
∞∞ 	
public
≥≥ 
void
≥≥ 
OnPointerClick
≥≥ "
(
≥≥" #
PointerEventData
≥≥# 3
	eventData
≥≥4 =
)
≥≥= >
{
¥¥ 	
}
øø 	
public
¬¬ 
void
¬¬ 
OnPointerUp
¬¬ 
(
¬¬  
PointerEventData
¬¬  0
	eventData
¬¬1 :
)
¬¬: ;
{
√√ 	
}
≈≈ 	
void
»» +
RestoreCachedVertexAttributes
»» *
(
»»* +
int
»»+ .
index
»»/ 4
)
»»4 5
{
…… 	
if
   
(
   
index
   
==
   
-
   
$num
   
||
   
index
   $
>
  % &
m_TextMeshPro
  ' 4
.
  4 5
textInfo
  5 =
.
  = >
characterCount
  > L
-
  M N
$num
  O P
)
  P Q
return
  R X
;
  X Y
int
ÕÕ 
materialIndex
ÕÕ 
=
ÕÕ 
m_TextMeshPro
ÕÕ  -
.
ÕÕ- .
textInfo
ÕÕ. 6
.
ÕÕ6 7
characterInfo
ÕÕ7 D
[
ÕÕD E
index
ÕÕE J
]
ÕÕJ K
.
ÕÕK L$
materialReferenceIndex
ÕÕL b
;
ÕÕb c
int
–– 
vertexIndex
–– 
=
–– 
m_TextMeshPro
–– +
.
––+ ,
textInfo
––, 4
.
––4 5
characterInfo
––5 B
[
––B C
index
––C H
]
––H I
.
––I J
vertexIndex
––J U
;
––U V
Vector3
‘‘ 
[
‘‘ 
]
‘‘ 
src_vertices
‘‘ "
=
‘‘# $(
m_cachedMeshInfoVertexData
‘‘% ?
[
‘‘? @
materialIndex
‘‘@ M
]
‘‘M N
.
‘‘N O
vertices
‘‘O W
;
‘‘W X
Vector3
◊◊ 
[
◊◊ 
]
◊◊ 
dst_vertices
◊◊ "
=
◊◊# $
m_TextMeshPro
◊◊% 2
.
◊◊2 3
textInfo
◊◊3 ;
.
◊◊; <
meshInfo
◊◊< D
[
◊◊D E
materialIndex
◊◊E R
]
◊◊R S
.
◊◊S T
vertices
◊◊T \
;
◊◊\ ]
dst_vertices
⁄⁄ 
[
⁄⁄ 
vertexIndex
⁄⁄ $
+
⁄⁄% &
$num
⁄⁄' (
]
⁄⁄( )
=
⁄⁄* +
src_vertices
⁄⁄, 8
[
⁄⁄8 9
vertexIndex
⁄⁄9 D
+
⁄⁄E F
$num
⁄⁄G H
]
⁄⁄H I
;
⁄⁄I J
dst_vertices
€€ 
[
€€ 
vertexIndex
€€ $
+
€€% &
$num
€€' (
]
€€( )
=
€€* +
src_vertices
€€, 8
[
€€8 9
vertexIndex
€€9 D
+
€€E F
$num
€€G H
]
€€H I
;
€€I J
dst_vertices
‹‹ 
[
‹‹ 
vertexIndex
‹‹ $
+
‹‹% &
$num
‹‹' (
]
‹‹( )
=
‹‹* +
src_vertices
‹‹, 8
[
‹‹8 9
vertexIndex
‹‹9 D
+
‹‹E F
$num
‹‹G H
]
‹‹H I
;
‹‹I J
dst_vertices
›› 
[
›› 
vertexIndex
›› $
+
››% &
$num
››' (
]
››( )
=
››* +
src_vertices
››, 8
[
››8 9
vertexIndex
››9 D
+
››E F
$num
››G H
]
››H I
;
››I J
Color32
·· 
[
·· 
]
·· 

dst_colors
··  
=
··! "
m_TextMeshPro
··# 0
.
··0 1
textInfo
··1 9
.
··9 :
meshInfo
··: B
[
··B C
materialIndex
··C P
]
··P Q
.
··Q R
colors32
··R Z
;
··Z [
Color32
‰‰ 
[
‰‰ 
]
‰‰ 

src_colors
‰‰  
=
‰‰! "(
m_cachedMeshInfoVertexData
‰‰# =
[
‰‰= >
materialIndex
‰‰> K
]
‰‰K L
.
‰‰L M
colors32
‰‰M U
;
‰‰U V

dst_colors
ÁÁ 
[
ÁÁ 
vertexIndex
ÁÁ "
+
ÁÁ# $
$num
ÁÁ% &
]
ÁÁ& '
=
ÁÁ( )

src_colors
ÁÁ* 4
[
ÁÁ4 5
vertexIndex
ÁÁ5 @
+
ÁÁA B
$num
ÁÁC D
]
ÁÁD E
;
ÁÁE F

dst_colors
ËË 
[
ËË 
vertexIndex
ËË "
+
ËË# $
$num
ËË% &
]
ËË& '
=
ËË( )

src_colors
ËË* 4
[
ËË4 5
vertexIndex
ËË5 @
+
ËËA B
$num
ËËC D
]
ËËD E
;
ËËE F

dst_colors
ÈÈ 
[
ÈÈ 
vertexIndex
ÈÈ "
+
ÈÈ# $
$num
ÈÈ% &
]
ÈÈ& '
=
ÈÈ( )

src_colors
ÈÈ* 4
[
ÈÈ4 5
vertexIndex
ÈÈ5 @
+
ÈÈA B
$num
ÈÈC D
]
ÈÈD E
;
ÈÈE F

dst_colors
ÍÍ 
[
ÍÍ 
vertexIndex
ÍÍ "
+
ÍÍ# $
$num
ÍÍ% &
]
ÍÍ& '
=
ÍÍ( )

src_colors
ÍÍ* 4
[
ÍÍ4 5
vertexIndex
ÍÍ5 @
+
ÍÍA B
$num
ÍÍC D
]
ÍÍD E
;
ÍÍE F
Vector2
ÓÓ 
[
ÓÓ 
]
ÓÓ 
src_uv0s
ÓÓ 
=
ÓÓ  (
m_cachedMeshInfoVertexData
ÓÓ! ;
[
ÓÓ; <
materialIndex
ÓÓ< I
]
ÓÓI J
.
ÓÓJ K
uvs0
ÓÓK O
;
ÓÓO P
Vector2
ÔÔ 
[
ÔÔ 
]
ÔÔ 
dst_uv0s
ÔÔ 
=
ÔÔ  
m_TextMeshPro
ÔÔ! .
.
ÔÔ. /
textInfo
ÔÔ/ 7
.
ÔÔ7 8
meshInfo
ÔÔ8 @
[
ÔÔ@ A
materialIndex
ÔÔA N
]
ÔÔN O
.
ÔÔO P
uvs0
ÔÔP T
;
ÔÔT U
dst_uv0s
 
[
 
vertexIndex
  
+
! "
$num
# $
]
$ %
=
& '
src_uv0s
( 0
[
0 1
vertexIndex
1 <
+
= >
$num
? @
]
@ A
;
A B
dst_uv0s
ÒÒ 
[
ÒÒ 
vertexIndex
ÒÒ  
+
ÒÒ! "
$num
ÒÒ# $
]
ÒÒ$ %
=
ÒÒ& '
src_uv0s
ÒÒ( 0
[
ÒÒ0 1
vertexIndex
ÒÒ1 <
+
ÒÒ= >
$num
ÒÒ? @
]
ÒÒ@ A
;
ÒÒA B
dst_uv0s
ÚÚ 
[
ÚÚ 
vertexIndex
ÚÚ  
+
ÚÚ! "
$num
ÚÚ# $
]
ÚÚ$ %
=
ÚÚ& '
src_uv0s
ÚÚ( 0
[
ÚÚ0 1
vertexIndex
ÚÚ1 <
+
ÚÚ= >
$num
ÚÚ? @
]
ÚÚ@ A
;
ÚÚA B
dst_uv0s
ÛÛ 
[
ÛÛ 
vertexIndex
ÛÛ  
+
ÛÛ! "
$num
ÛÛ# $
]
ÛÛ$ %
=
ÛÛ& '
src_uv0s
ÛÛ( 0
[
ÛÛ0 1
vertexIndex
ÛÛ1 <
+
ÛÛ= >
$num
ÛÛ? @
]
ÛÛ@ A
;
ÛÛA B
Vector2
ˆˆ 
[
ˆˆ 
]
ˆˆ 
src_uv2s
ˆˆ 
=
ˆˆ  (
m_cachedMeshInfoVertexData
ˆˆ! ;
[
ˆˆ; <
materialIndex
ˆˆ< I
]
ˆˆI J
.
ˆˆJ K
uvs2
ˆˆK O
;
ˆˆO P
Vector2
˜˜ 
[
˜˜ 
]
˜˜ 
dst_uv2s
˜˜ 
=
˜˜  
m_TextMeshPro
˜˜! .
.
˜˜. /
textInfo
˜˜/ 7
.
˜˜7 8
meshInfo
˜˜8 @
[
˜˜@ A
materialIndex
˜˜A N
]
˜˜N O
.
˜˜O P
uvs2
˜˜P T
;
˜˜T U
dst_uv2s
¯¯ 
[
¯¯ 
vertexIndex
¯¯  
+
¯¯! "
$num
¯¯# $
]
¯¯$ %
=
¯¯& '
src_uv2s
¯¯( 0
[
¯¯0 1
vertexIndex
¯¯1 <
+
¯¯= >
$num
¯¯? @
]
¯¯@ A
;
¯¯A B
dst_uv2s
˘˘ 
[
˘˘ 
vertexIndex
˘˘  
+
˘˘! "
$num
˘˘# $
]
˘˘$ %
=
˘˘& '
src_uv2s
˘˘( 0
[
˘˘0 1
vertexIndex
˘˘1 <
+
˘˘= >
$num
˘˘? @
]
˘˘@ A
;
˘˘A B
dst_uv2s
˙˙ 
[
˙˙ 
vertexIndex
˙˙  
+
˙˙! "
$num
˙˙# $
]
˙˙$ %
=
˙˙& '
src_uv2s
˙˙( 0
[
˙˙0 1
vertexIndex
˙˙1 <
+
˙˙= >
$num
˙˙? @
]
˙˙@ A
;
˙˙A B
dst_uv2s
˚˚ 
[
˚˚ 
vertexIndex
˚˚  
+
˚˚! "
$num
˚˚# $
]
˚˚$ %
=
˚˚& '
src_uv2s
˚˚( 0
[
˚˚0 1
vertexIndex
˚˚1 <
+
˚˚= >
$num
˚˚? @
]
˚˚@ A
;
˚˚A B
int
ˇˇ 
	lastIndex
ˇˇ 
=
ˇˇ 
(
ˇˇ 
src_vertices
ˇˇ )
.
ˇˇ) *
Length
ˇˇ* 0
/
ˇˇ1 2
$num
ˇˇ3 4
-
ˇˇ5 6
$num
ˇˇ7 8
)
ˇˇ8 9
*
ˇˇ: ;
$num
ˇˇ< =
;
ˇˇ= >
dst_vertices
ÇÇ 
[
ÇÇ 
	lastIndex
ÇÇ "
+
ÇÇ# $
$num
ÇÇ% &
]
ÇÇ& '
=
ÇÇ( )
src_vertices
ÇÇ* 6
[
ÇÇ6 7
	lastIndex
ÇÇ7 @
+
ÇÇA B
$num
ÇÇC D
]
ÇÇD E
;
ÇÇE F
dst_vertices
ÉÉ 
[
ÉÉ 
	lastIndex
ÉÉ "
+
ÉÉ# $
$num
ÉÉ% &
]
ÉÉ& '
=
ÉÉ( )
src_vertices
ÉÉ* 6
[
ÉÉ6 7
	lastIndex
ÉÉ7 @
+
ÉÉA B
$num
ÉÉC D
]
ÉÉD E
;
ÉÉE F
dst_vertices
ÑÑ 
[
ÑÑ 
	lastIndex
ÑÑ "
+
ÑÑ# $
$num
ÑÑ% &
]
ÑÑ& '
=
ÑÑ( )
src_vertices
ÑÑ* 6
[
ÑÑ6 7
	lastIndex
ÑÑ7 @
+
ÑÑA B
$num
ÑÑC D
]
ÑÑD E
;
ÑÑE F
dst_vertices
ÖÖ 
[
ÖÖ 
	lastIndex
ÖÖ "
+
ÖÖ# $
$num
ÖÖ% &
]
ÖÖ& '
=
ÖÖ( )
src_vertices
ÖÖ* 6
[
ÖÖ6 7
	lastIndex
ÖÖ7 @
+
ÖÖA B
$num
ÖÖC D
]
ÖÖD E
;
ÖÖE F

src_colors
àà 
=
àà (
m_cachedMeshInfoVertexData
àà 3
[
àà3 4
materialIndex
àà4 A
]
ààA B
.
ààB C
colors32
ààC K
;
ààK L

dst_colors
ââ 
=
ââ 
m_TextMeshPro
ââ &
.
ââ& '
textInfo
ââ' /
.
ââ/ 0
meshInfo
ââ0 8
[
ââ8 9
materialIndex
ââ9 F
]
ââF G
.
ââG H
colors32
ââH P
;
ââP Q

dst_colors
ää 
[
ää 
	lastIndex
ää  
+
ää! "
$num
ää# $
]
ää$ %
=
ää& '

src_colors
ää( 2
[
ää2 3
	lastIndex
ää3 <
+
ää= >
$num
ää? @
]
ää@ A
;
ääA B

dst_colors
ãã 
[
ãã 
	lastIndex
ãã  
+
ãã! "
$num
ãã# $
]
ãã$ %
=
ãã& '

src_colors
ãã( 2
[
ãã2 3
	lastIndex
ãã3 <
+
ãã= >
$num
ãã? @
]
ãã@ A
;
ããA B

dst_colors
åå 
[
åå 
	lastIndex
åå  
+
åå! "
$num
åå# $
]
åå$ %
=
åå& '

src_colors
åå( 2
[
åå2 3
	lastIndex
åå3 <
+
åå= >
$num
åå? @
]
åå@ A
;
ååA B

dst_colors
çç 
[
çç 
	lastIndex
çç  
+
çç! "
$num
çç# $
]
çç$ %
=
çç& '

src_colors
çç( 2
[
çç2 3
	lastIndex
çç3 <
+
çç= >
$num
çç? @
]
çç@ A
;
ççA B
src_uv0s
êê 
=
êê (
m_cachedMeshInfoVertexData
êê 1
[
êê1 2
materialIndex
êê2 ?
]
êê? @
.
êê@ A
uvs0
êêA E
;
êêE F
dst_uv0s
ëë 
=
ëë 
m_TextMeshPro
ëë $
.
ëë$ %
textInfo
ëë% -
.
ëë- .
meshInfo
ëë. 6
[
ëë6 7
materialIndex
ëë7 D
]
ëëD E
.
ëëE F
uvs0
ëëF J
;
ëëJ K
dst_uv0s
íí 
[
íí 
	lastIndex
íí 
+
íí  
$num
íí! "
]
íí" #
=
íí$ %
src_uv0s
íí& .
[
íí. /
	lastIndex
íí/ 8
+
íí9 :
$num
íí; <
]
íí< =
;
íí= >
dst_uv0s
ìì 
[
ìì 
	lastIndex
ìì 
+
ìì  
$num
ìì! "
]
ìì" #
=
ìì$ %
src_uv0s
ìì& .
[
ìì. /
	lastIndex
ìì/ 8
+
ìì9 :
$num
ìì; <
]
ìì< =
;
ìì= >
dst_uv0s
îî 
[
îî 
	lastIndex
îî 
+
îî  
$num
îî! "
]
îî" #
=
îî$ %
src_uv0s
îî& .
[
îî. /
	lastIndex
îî/ 8
+
îî9 :
$num
îî; <
]
îî< =
;
îî= >
dst_uv0s
ïï 
[
ïï 
	lastIndex
ïï 
+
ïï  
$num
ïï! "
]
ïï" #
=
ïï$ %
src_uv0s
ïï& .
[
ïï. /
	lastIndex
ïï/ 8
+
ïï9 :
$num
ïï; <
]
ïï< =
;
ïï= >
src_uv2s
òò 
=
òò (
m_cachedMeshInfoVertexData
òò 1
[
òò1 2
materialIndex
òò2 ?
]
òò? @
.
òò@ A
uvs2
òòA E
;
òòE F
dst_uv2s
ôô 
=
ôô 
m_TextMeshPro
ôô $
.
ôô$ %
textInfo
ôô% -
.
ôô- .
meshInfo
ôô. 6
[
ôô6 7
materialIndex
ôô7 D
]
ôôD E
.
ôôE F
uvs2
ôôF J
;
ôôJ K
dst_uv2s
öö 
[
öö 
	lastIndex
öö 
+
öö  
$num
öö! "
]
öö" #
=
öö$ %
src_uv2s
öö& .
[
öö. /
	lastIndex
öö/ 8
+
öö9 :
$num
öö; <
]
öö< =
;
öö= >
dst_uv2s
õõ 
[
õõ 
	lastIndex
õõ 
+
õõ  
$num
õõ! "
]
õõ" #
=
õõ$ %
src_uv2s
õõ& .
[
õõ. /
	lastIndex
õõ/ 8
+
õõ9 :
$num
õõ; <
]
õõ< =
;
õõ= >
dst_uv2s
úú 
[
úú 
	lastIndex
úú 
+
úú  
$num
úú! "
]
úú" #
=
úú$ %
src_uv2s
úú& .
[
úú. /
	lastIndex
úú/ 8
+
úú9 :
$num
úú; <
]
úú< =
;
úú= >
dst_uv2s
ùù 
[
ùù 
	lastIndex
ùù 
+
ùù  
$num
ùù! "
]
ùù" #
=
ùù$ %
src_uv2s
ùù& .
[
ùù. /
	lastIndex
ùù/ 8
+
ùù9 :
$num
ùù; <
]
ùù< =
;
ùù= >
m_TextMeshPro
†† 
.
†† 
UpdateVertexData
†† *
(
††* +'
TMP_VertexDataUpdateFlags
††+ D
.
††D E
All
††E H
)
††H I
;
††I J
}
°° 	
}
¢¢ 
}££ Øè
>F:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\EZAnim.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
EZAnim 
: 
MonoBehaviour $
{ 
[ 
HideInInspector 
( 
) 
] 
public 
List	 
< 
EZStruct 
> 

theStructs "
;" #
private 	
bool
 
[ 
] 

activeList 
; 
private 	
EZStruct
 

tempStruct 
; 
private 	
EZStruct
 
	oldStruct 
; 
private 	
float
 
	tempFloat 
; 
private 	
Vector2
 
tempVector2 
; 
private   	
Vector3  
 
tempVector3   
;   
private!! 	
Rect!!
 
tempRect!! 
;!! 
private"" 	
Color""
 
	tempColor"" 
;"" 
private## 	
Material##
 
tempMaterial## 
;##  
void%% 
Start%% 
(%% 
)%% 
{&& 

activeList'' 
='' 
new'' 
bool'' 
['' 

theStructs'' #
.''# $
Count''$ )
]'') *
;''* +
for)) 
()) 
int)) 
i)) 
=)) 
$num)) 
;)) 
i)) 
<)) 

theStructs)) !
.))! "
Count))" '
;))' (
i))) *
++))* ,
))), -
{** 

tempStruct++ 
=++ 

theStructs++ 
[++ 
i++ 
]++ 
;++ 

tempStruct-- 
.-- 
RealComponent-- 
=-- 

tempStruct-- )
.--) *
targetGameObject--* :
.--: ;
GetComponent--; G
(--G H

tempStruct--H R
.--R S
targetComponent--S b
)--b c
;--c d
if// 
(// 

tempStruct// 
.// 
	valueType// 
==// 
ValType//  '
.//' (
Field//( -
)//- .

tempStruct00 
.00 
	realField00 
=00 

tempStruct00 &
.00& '
targetGameObject00' 7
.007 8
GetComponent008 D
(00D E

tempStruct00E O
.00O P
targetComponent00P _
)00_ `
.00` a
GetType00a h
(00h i
)00i j
.00j k
GetField00k s
(00s t

tempStruct00t ~
.00~ 
targetVariable	00 ç
)
00ç é
;
00é è
if22 
(22 

tempStruct22 
.22 
	valueType22 
==22 
ValType22  '
.22' (
Property22( 0
)220 1

tempStruct33 
.33 
realProperty33 
=33 

tempStruct33 )
.33) *
targetGameObject33* :
.33: ;
GetComponent33; G
(33G H

tempStruct33H R
.33R S
targetComponent33S b
)33b c
.33c d
GetType33d k
(33k l
)33l m
.33m n
GetProperty33n y
(33y z

tempStruct	33z Ñ
.
33Ñ Ö
targetVariable
33Ö ì
)
33ì î
;
33î ï
if77 
(77 

tempStruct77 
.77 
methodOnEnd77 
)77 
{88 

tempStruct99 
.99 
methodRealComponent99 #
=99$ %

tempStruct99& 0
.990 1"
methodTargetGameObject991 G
.99G H
GetComponent99H T
(99T U

tempStruct99U _
.99_ `!
methodTargetComponent99` u
)99u v
;99v w

tempStruct:: 
.:: 
methodRealMethod::  
=::! "

tempStruct::# -
.::- ."
methodTargetGameObject::. D
.::D E
GetComponent::E Q
(::Q R

tempStruct::R \
.::\ ]!
methodTargetComponent::] r
)::r s
.::s t
GetType::t {
(::{ |
)::| }
.::} ~
	GetMethod	::~ á
(
::á à

tempStruct
::à í
.
::í ì 
methodTargetMethod
::ì •
)
::• ¶
;
::¶ ß
};; 

theStructs== 
[== 
i== 
]== 
=== 

tempStruct== 
;== 
}>> 
}?? 
privateAA 	
voidAA
 

AnimStructAA 
(AA 
intAA 
iAA 
)AA  
{BB 

activeListCC 
[CC 
iCC 
]CC 
=CC 
trueCC 
;CC 

tempStructDD 
=DD 

theStructsDD 
[DD 
iDD 
]DD 
;DD 

tempStructFF 
.FF 
animStartTimeFF 
=FF 
TimeFF "
.FF" # 
realtimeSinceStartupFF# 7
+FF8 9

tempStructFF: D
.FFD E
delayFFE J
;FFJ K
ifHH 
(HH 

tempStructHH 
.HH 
variableTypeHH 
==HH !
$strHH" 1
)HH1 2
{II 
ifJJ 
(JJ 

tempStructJJ 
.JJ 
	valueTypeJJ 
==JJ 
ValTypeJJ  '
.JJ' (
FieldJJ( -
)JJ- .

tempStructKK 
.KK 
initialFloatKK 
=KK 
(KK  
floatKK  %
)KK% &

tempStructKK& 0
.KK0 1
	realFieldKK1 :
.KK: ;
GetValueKK; C
(KKC D

tempStructKKD N
.KKN O
RealComponentKKO \
)KK\ ]
;KK] ^
elseLL 
ifLL	 
(LL 

tempStructLL 
.LL 
	valueTypeLL !
==LL" $
ValTypeLL% ,
.LL, -
PropertyLL- 5
)LL5 6

tempStructMM 
.MM 
initialFloatMM 
=MM 
(MM  
floatMM  %
)MM% &

tempStructMM& 0
.MM0 1
realPropertyMM1 =
.MM= >
GetValueMM> F
(MMF G

tempStructMMG Q
.MMQ R
RealComponentMMR _
,MM_ `
nullMMa e
)MMe f
;MMf g
}NN 
elseOO 
ifOO 

(OO 

tempStructOO 
.OO 
variableTypeOO #
==OO$ &
$strOO' 5
)OO5 6
{PP 
ifQQ 
(QQ 

tempStructQQ 
.QQ 
	valueTypeQQ 
==QQ 
ValTypeQQ  '
.QQ' (
FieldQQ( -
)QQ- .

tempStructRR 
.RR 

initialIntRR 
=RR 
(RR 
intRR !
)RR! "

tempStructRR" ,
.RR, -
	realFieldRR- 6
.RR6 7
GetValueRR7 ?
(RR? @

tempStructRR@ J
.RRJ K
RealComponentRRK X
)RRX Y
;RRY Z
elseSS 
ifSS	 
(SS 

tempStructSS 
.SS 
	valueTypeSS !
==SS" $
ValTypeSS% ,
.SS, -
PropertySS- 5
)SS5 6

tempStructTT 
.TT 

initialIntTT 
=TT 
(TT 
intTT !
)TT! "

tempStructTT" ,
.TT, -
realPropertyTT- 9
.TT9 :
GetValueTT: B
(TTB C

tempStructTTC M
.TTM N
RealComponentTTN [
,TT[ \
nullTT] a
)TTa b
;TTb c
}UU 
elseVV 
ifVV 

(VV 

tempStructVV 
.VV 
variableTypeVV #
==VV$ &
$strVV' <
)VV< =
{WW 
ifXX 
(XX 

tempStructXX 
.XX 
	valueTypeXX 
==XX 
ValTypeXX  '
.XX' (
FieldXX( -
)XX- .

tempStructYY 
.YY 
initialVector2YY 
=YY  
(YY! "
Vector2YY" )
)YY) *

tempStructYY* 4
.YY4 5
	realFieldYY5 >
.YY> ?
GetValueYY? G
(YYG H

tempStructYYH R
.YYR S
RealComponentYYS `
)YY` a
;YYa b
elseZZ 
ifZZ	 
(ZZ 

tempStructZZ 
.ZZ 
	valueTypeZZ !
==ZZ" $
ValTypeZZ% ,
.ZZ, -
PropertyZZ- 5
)ZZ5 6

tempStruct[[ 
.[[ 
initialVector2[[ 
=[[  
([[! "
Vector2[[" )
)[[) *

tempStruct[[* 4
.[[4 5
realProperty[[5 A
.[[A B
GetValue[[B J
([[J K

tempStruct[[K U
.[[U V
RealComponent[[V c
,[[c d
null[[e i
)[[i j
;[[j k
}\\ 
else]] 
if]] 

(]] 

tempStruct]] 
.]] 
variableType]] #
==]]$ &
$str]]' <
)]]< =
{^^ 
if__ 
(__ 

tempStruct__ 
.__ 
	valueType__ 
==__ 
ValType__  '
.__' (
Field__( -
)__- .

tempStruct`` 
.`` 
initialVector3`` 
=``  
(``! "
Vector3``" )
)``) *

tempStruct``* 4
.``4 5
	realField``5 >
.``> ?
GetValue``? G
(``G H

tempStruct``H R
.``R S
RealComponent``S `
)``` a
;``a b
elseaa 
ifaa	 
(aa 

tempStructaa 
.aa 
	valueTypeaa !
==aa" $
ValTypeaa% ,
.aa, -
Propertyaa- 5
)aa5 6

tempStructbb 
.bb 
initialVector3bb 
=bb  
(bb! "
Vector3bb" )
)bb) *

tempStructbb* 4
.bb4 5
realPropertybb5 A
.bbA B
GetValuebbB J
(bbJ K

tempStructbbK U
.bbU V
RealComponentbbV c
,bbc d
nullbbe i
)bbi j
;bbj k
}cc 
elsedd 
ifdd 

(dd 

tempStructdd 
.dd 
variableTypedd #
==dd$ &
$strdd' 9
)dd9 :
{ee 
ifff 
(ff 

tempStructff 
.ff 
	valueTypeff 
==ff 
ValTypeff  '
.ff' (
Fieldff( -
)ff- .

tempStructgg 
.gg 
initialRectgg 
=gg 
(gg 
Rectgg #
)gg# $

tempStructgg$ .
.gg. /
	realFieldgg/ 8
.gg8 9
GetValuegg9 A
(ggA B

tempStructggB L
.ggL M
RealComponentggM Z
)ggZ [
;gg[ \
elsehh 
ifhh	 
(hh 

tempStructhh 
.hh 
	valueTypehh !
==hh" $
ValTypehh% ,
.hh, -
Propertyhh- 5
)hh5 6

tempStructii 
.ii 
initialRectii 
=ii 
(ii 
Rectii #
)ii# $

tempStructii$ .
.ii. /
realPropertyii/ ;
.ii; <
GetValueii< D
(iiD E

tempStructiiE O
.iiO P
RealComponentiiP ]
,ii] ^
nullii_ c
)iic d
;iid e
}jj 
elsekk 
ifkk 

(kk 

tempStructkk 
.kk 
variableTypekk #
==kk$ &
$strkk' :
)kk: ;
{ll 
ifmm 
(mm 

tempStructmm 
.mm 
	valueTypemm 
==mm 
ValTypemm  '
.mm' (
Fieldmm( -
)mm- .

tempStructnn 
.nn 
initialColornn 
=nn 
(nn  
Colornn  %
)nn% &

tempStructnn& 0
.nn0 1
	realFieldnn1 :
.nn: ;
GetValuenn; C
(nnC D

tempStructnnD N
.nnN O
RealComponentnnO \
)nn\ ]
;nn] ^
elseoo 
ifoo	 
(oo 

tempStructoo 
.oo 
	valueTypeoo !
==oo" $
ValTypeoo% ,
.oo, -
Propertyoo- 5
)oo5 6

tempStructpp 
.pp 
initialColorpp 
=pp 
(pp  
Colorpp  %
)pp% &

tempStructpp& 0
.pp0 1
realPropertypp1 =
.pp= >
GetValuepp> F
(ppF G

tempStructppG Q
.ppQ R
RealComponentppR _
,pp_ `
nullppa e
)ppe f
;ppf g
}qq 
elserr 
ifrr 

(rr 

tempStructrr 
.rr 
variableTyperr #
==rr$ &
$strrr' =
)rr= >
{ss 
iftt 
(tt 

tempStructtt 
.tt 
	valueTypett 
==tt 
ValTypett  '
.tt' (
Fieldtt( -
)tt- .

tempStructuu 
.uu 
initialMaterialuu 
=uu  !
(uu" #
Materialuu# +
)uu+ ,

tempStructuu, 6
.uu6 7
	realFielduu7 @
.uu@ A
GetValueuuA I
(uuI J

tempStructuuJ T
.uuT U
RealComponentuuU b
)uub c
;uuc d
elsevv 
ifvv	 
(vv 

tempStructvv 
.vv 
	valueTypevv !
==vv" $
ValTypevv% ,
.vv, -
Propertyvv- 5
)vv5 6

tempStructww 
.ww 
initialMaterialww 
=ww  !
(ww" #
Materialww# +
)ww+ ,

tempStructww, 6
.ww6 7
realPropertyww7 C
.wwC D
GetValuewwD L
(wwL M

tempStructwwM W
.wwW X
RealComponentwwX e
,wwe f
nullwwg k
)wwk l
;wwl m
}xx 

tempStructzz 
.zz 
calledzz 
=zz 
falsezz 
;zz 

theStructs|| 
[|| 
i|| 
]|| 
=|| 

tempStruct|| 
;|| 
}}} 
public 
void	 
Animate 
( 
) 
{
ÄÄ 

AnimStruct
ÅÅ 
(
ÅÅ 
$num
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
public
ÑÑ 
void
ÑÑ	 

AnimateAll
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 
for
ÜÜ 
(
ÜÜ 
int
ÜÜ 
i
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
i
ÜÜ 
<
ÜÜ 

theStructs
ÜÜ !
.
ÜÜ! "
Count
ÜÜ" '
;
ÜÜ' (
i
ÜÜ) *
++
ÜÜ* ,
)
ÜÜ, -
{
áá 

AnimStruct
àà 
(
àà 
i
àà 
)
àà 
;
àà 
}
ââ 
}
ää 
public
åå 
void
åå	 
AnimateByIndex
åå 
(
åå 
int
åå  
index
åå! &
)
åå& '
{
çç 
for
éé 
(
éé 
int
éé 
i
éé 
=
éé 
$num
éé 
;
éé 
i
éé 
<
éé 

theStructs
éé !
.
éé! "
Count
éé" '
;
éé' (
i
éé) *
++
éé* ,
)
éé, -
{
èè 
if
êê 
(
êê 
i
êê 	
==
êê
 
index
êê 
)
êê 

AnimStruct
ëë 
(
ëë 
i
ëë 
)
ëë 
;
ëë 
}
íí 
}
ìì 
public
ïï 
void
ïï	 
AnimateByName
ïï 
(
ïï 
string
ïï "
name
ïï# '
)
ïï' (
{
ññ 
for
óó 
(
óó 
int
óó 
i
óó 
=
óó 
$num
óó 
;
óó 
i
óó 
<
óó 

theStructs
óó !
.
óó! "
Count
óó" '
;
óó' (
i
óó) *
++
óó* ,
)
óó, -
{
òò 
if
ôô 
(
ôô 

theStructs
ôô 
[
ôô 
i
ôô 
]
ôô 
.
ôô 
animName
ôô 
==
ôô !
name
ôô" &
)
ôô& '

AnimStruct
öö 
(
öö 
i
öö 
)
öö 
;
öö 
}
õõ 
}
úú 
public
ûû 
void
ûû	 
AnimateByTag
ûû 
(
ûû 
string
ûû !
tag
ûû" %
)
ûû% &
{
üü 
for
†† 
(
†† 
int
†† 
i
†† 
=
†† 
$num
†† 
;
†† 
i
†† 
<
†† 

theStructs
†† !
.
††! "
Count
††" '
;
††' (
i
††) *
++
††* ,
)
††, -
{
°° 
if
¢¢ 
(
¢¢ 

theStructs
¢¢ 
[
¢¢ 
i
¢¢ 
]
¢¢ 
.
¢¢ 
animTag
¢¢ 
==
¢¢  
tag
¢¢! $
)
¢¢$ %

AnimStruct
££ 
(
££ 
i
££ 
)
££ 
;
££ 
}
§§ 
}
•• 
void
ßß 
Update
ßß 
(
ßß 
)
ßß 
{
®® 
for
©© 
(
©© 
int
©© 
i
©© 
=
©© 
$num
©© 
;
©© 
i
©© 
<
©© 

theStructs
©© !
.
©©! "
Count
©©" '
;
©©' (
i
©©) *
++
©©* ,
)
©©, -
{
™™ 
if
´´ 
(
´´ 

activeList
´´ 
[
´´ 
i
´´ 
]
´´ 
==
´´ 
true
´´ 
)
´´ 
{
¨¨ 

tempStruct
≠≠ 
=
≠≠ 

theStructs
≠≠ 
[
≠≠ 
i
≠≠ 
]
≠≠ 
;
≠≠  

tempStruct
ØØ 
.
ØØ 
animDeltaTime
ØØ 
=
ØØ 
Time
ØØ  $
.
ØØ$ %"
realtimeSinceStartup
ØØ% 9
-
ØØ: ;

tempStruct
ØØ< F
.
ØØF G
animStartTime
ØØG T
;
ØØT U
if
±± 
(
±± 	

tempStruct
±±	 
.
±± 
animDeltaTime
±± !
<
±±" #

tempStruct
±±$ .
.
±±. /
animationDuration
±±/ @
)
±±@ A
{
≤≤ 
if
≥≥ 
(
≥≥	 


tempStruct
≥≥
 
.
≥≥ 
variableType
≥≥ !
==
≥≥" $
$str
≥≥% 4
)
≥≥4 5
{
¥¥ 
	tempFloat
µµ 
=
µµ 
UpdateAnimation
µµ "
(
µµ" #

tempStruct
µµ# -
.
µµ- .
initialFloat
µµ. :
,
µµ: ;

tempStruct
µµ< F
.
µµF G
targetFloat
µµG R
,
µµR S

tempStruct
µµT ^
.
µµ^ _
animDeltaTime
µµ_ l
,
µµl m

tempStruct
µµn x
.
µµx y 
animationDurationµµy ä
,µµä ã

tempStructµµå ñ
.µµñ ó
animationTypeµµó §
)µµ§ •
;µµ• ¶
if
∑∑ 	
(
∑∑
 

tempStruct
∑∑ 
.
∑∑ 
	valueType
∑∑ 
==
∑∑  "
ValType
∑∑# *
.
∑∑* +
Field
∑∑+ 0
)
∑∑0 1

tempStruct
∏∏ 
.
∏∏ 
	realField
∏∏ 
.
∏∏ 
SetValue
∏∏ %
(
∏∏% &

tempStruct
∏∏& 0
.
∏∏0 1
RealComponent
∏∏1 >
,
∏∏> ?
	tempFloat
∏∏@ I
)
∏∏I J
;
∏∏J K
else
ππ 
if
ππ 
(
ππ 

tempStruct
ππ 
.
ππ 
	valueType
ππ $
==
ππ% '
ValType
ππ( /
.
ππ/ 0
Property
ππ0 8
)
ππ8 9

tempStruct
∫∫ 
.
∫∫ 
realProperty
∫∫ 
.
∫∫  
SetValue
∫∫  (
(
∫∫( )

tempStruct
∫∫) 3
.
∫∫3 4
RealComponent
∫∫4 A
,
∫∫A B
	tempFloat
∫∫C L
,
∫∫L M
null
∫∫N R
)
∫∫R S
;
∫∫S T
}
ªª 
else
ºº 

if
ºº 
(
ºº 

tempStruct
ºº 
.
ºº 
variableType
ºº &
==
ºº' )
$str
ºº* 8
)
ºº8 9
{
ΩΩ 
	tempFloat
ææ 
=
ææ 
UpdateAnimation
ææ "
(
ææ" #

tempStruct
ææ# -
.
ææ- .

initialInt
ææ. 8
,
ææ8 9

tempStruct
ææ: D
.
ææD E
	targetInt
ææE N
,
ææN O

tempStruct
ææP Z
.
ææZ [
animDeltaTime
ææ[ h
,
ææh i

tempStruct
ææj t
.
ææt u 
animationDurationææu Ü
,ææÜ á

tempStructææà í
.ææí ì
animationTypeææì †
)ææ† °
;ææ° ¢
if
¿¿ 	
(
¿¿
 

tempStruct
¿¿ 
.
¿¿ 
	valueType
¿¿ 
==
¿¿  "
ValType
¿¿# *
.
¿¿* +
Field
¿¿+ 0
)
¿¿0 1

tempStruct
¡¡ 
.
¡¡ 
	realField
¡¡ 
.
¡¡ 
SetValue
¡¡ %
(
¡¡% &

tempStruct
¡¡& 0
.
¡¡0 1
RealComponent
¡¡1 >
,
¡¡> ?
Mathf
¡¡@ E
.
¡¡E F

RoundToInt
¡¡F P
(
¡¡P Q
	tempFloat
¡¡Q Z
)
¡¡Z [
)
¡¡[ \
;
¡¡\ ]
else
¬¬ 
if
¬¬ 
(
¬¬ 

tempStruct
¬¬ 
.
¬¬ 
	valueType
¬¬ $
==
¬¬% '
ValType
¬¬( /
.
¬¬/ 0
Property
¬¬0 8
)
¬¬8 9

tempStruct
√√ 
.
√√ 
realProperty
√√ 
.
√√  
SetValue
√√  (
(
√√( )

tempStruct
√√) 3
.
√√3 4
RealComponent
√√4 A
,
√√A B
Mathf
√√C H
.
√√H I

RoundToInt
√√I S
(
√√S T
	tempFloat
√√T ]
)
√√] ^
,
√√^ _
null
√√` d
)
√√d e
;
√√e f
}
ƒƒ 
else
≈≈ 

if
≈≈ 
(
≈≈ 

tempStruct
≈≈ 
.
≈≈ 
variableType
≈≈ &
==
≈≈' )
$str
≈≈* ?
)
≈≈? @
{
∆∆ 
tempVector2
«« 
=
«« 

tempStruct
«« 
.
««  
initialVector2
««  .
;
««. /
if
…… 	
(
……
 

tempStruct
…… 
.
…… 
modifyParameter1
…… &
)
……& '
tempVector2
   
.
   
x
   
=
   
UpdateAnimation
   '
(
  ' (

tempStruct
  ( 2
.
  2 3
initialVector2
  3 A
.
  A B
x
  B C
,
  C D

tempStruct
  E O
.
  O P
targetVector2
  P ]
.
  ] ^
x
  ^ _
,
  _ `

tempStruct
  a k
.
  k l
animDeltaTime
  l y
,
  y z

tempStruct  { Ö
.  Ö Ü!
animationDuration  Ü ó
,  ó ò

tempStruct  ô £
.  £ §
animationType  § ±
)  ± ≤
;  ≤ ≥
if
ÃÃ 	
(
ÃÃ
 

tempStruct
ÃÃ 
.
ÃÃ 
modifyParameter2
ÃÃ &
)
ÃÃ& '
tempVector2
ÕÕ 
.
ÕÕ 
y
ÕÕ 
=
ÕÕ 
UpdateAnimation
ÕÕ '
(
ÕÕ' (

tempStruct
ÕÕ( 2
.
ÕÕ2 3
initialVector2
ÕÕ3 A
.
ÕÕA B
y
ÕÕB C
,
ÕÕC D

tempStruct
ÕÕE O
.
ÕÕO P
targetVector2
ÕÕP ]
.
ÕÕ] ^
y
ÕÕ^ _
,
ÕÕ_ `

tempStruct
ÕÕa k
.
ÕÕk l
animDeltaTime
ÕÕl y
,
ÕÕy z

tempStructÕÕ{ Ö
.ÕÕÖ Ü!
animationDurationÕÕÜ ó
,ÕÕó ò

tempStructÕÕô £
.ÕÕ£ §
animationTypeÕÕ§ ±
)ÕÕ± ≤
;ÕÕ≤ ≥
if
œœ 	
(
œœ
 

tempStruct
œœ 
.
œœ 
	valueType
œœ 
==
œœ  "
ValType
œœ# *
.
œœ* +
Field
œœ+ 0
)
œœ0 1

tempStruct
–– 
.
–– 
	realField
–– 
.
–– 
SetValue
–– %
(
––% &

tempStruct
––& 0
.
––0 1
RealComponent
––1 >
,
––> ?
tempVector2
––@ K
)
––K L
;
––L M
else
—— 
if
—— 
(
—— 

tempStruct
—— 
.
—— 
	valueType
—— $
==
——% '
ValType
——( /
.
——/ 0
Property
——0 8
)
——8 9

tempStruct
““ 
.
““ 
realProperty
““ 
.
““  
SetValue
““  (
(
““( )

tempStruct
““) 3
.
““3 4
RealComponent
““4 A
,
““A B
tempVector2
““C N
,
““N O
null
““P T
)
““T U
;
““U V
}
”” 
else
‘‘ 

if
‘‘ 
(
‘‘ 

tempStruct
‘‘ 
.
‘‘ 
variableType
‘‘ &
==
‘‘' )
$str
‘‘* ?
)
‘‘? @
{
’’ 
tempVector3
÷÷ 
=
÷÷ 

tempStruct
÷÷ 
.
÷÷  
initialVector3
÷÷  .
;
÷÷. /
if
ÿÿ 	
(
ÿÿ
 

tempStruct
ÿÿ 
.
ÿÿ 
modifyParameter1
ÿÿ &
)
ÿÿ& '
tempVector3
ŸŸ 
.
ŸŸ 
x
ŸŸ 
=
ŸŸ 
UpdateAnimation
ŸŸ '
(
ŸŸ' (

tempStruct
ŸŸ( 2
.
ŸŸ2 3
initialVector3
ŸŸ3 A
.
ŸŸA B
x
ŸŸB C
,
ŸŸC D

tempStruct
ŸŸE O
.
ŸŸO P
targetVector3
ŸŸP ]
.
ŸŸ] ^
x
ŸŸ^ _
,
ŸŸ_ `

tempStruct
ŸŸa k
.
ŸŸk l
animDeltaTime
ŸŸl y
,
ŸŸy z

tempStructŸŸ{ Ö
.ŸŸÖ Ü!
animationDurationŸŸÜ ó
,ŸŸó ò

tempStructŸŸô £
.ŸŸ£ §
animationTypeŸŸ§ ±
)ŸŸ± ≤
;ŸŸ≤ ≥
if
€€ 	
(
€€
 

tempStruct
€€ 
.
€€ 
modifyParameter2
€€ &
)
€€& '
tempVector3
‹‹ 
.
‹‹ 
y
‹‹ 
=
‹‹ 
UpdateAnimation
‹‹ '
(
‹‹' (

tempStruct
‹‹( 2
.
‹‹2 3
initialVector3
‹‹3 A
.
‹‹A B
y
‹‹B C
,
‹‹C D

tempStruct
‹‹E O
.
‹‹O P
targetVector3
‹‹P ]
.
‹‹] ^
y
‹‹^ _
,
‹‹_ `

tempStruct
‹‹a k
.
‹‹k l
animDeltaTime
‹‹l y
,
‹‹y z

tempStruct‹‹{ Ö
.‹‹Ö Ü!
animationDuration‹‹Ü ó
,‹‹ó ò

tempStruct‹‹ô £
.‹‹£ §
animationType‹‹§ ±
)‹‹± ≤
;‹‹≤ ≥
if
ﬁﬁ 	
(
ﬁﬁ
 

tempStruct
ﬁﬁ 
.
ﬁﬁ 
modifyParameter3
ﬁﬁ &
)
ﬁﬁ& '
tempVector3
ﬂﬂ 
.
ﬂﬂ 
z
ﬂﬂ 
=
ﬂﬂ 
UpdateAnimation
ﬂﬂ '
(
ﬂﬂ' (

tempStruct
ﬂﬂ( 2
.
ﬂﬂ2 3
initialVector3
ﬂﬂ3 A
.
ﬂﬂA B
z
ﬂﬂB C
,
ﬂﬂC D

tempStruct
ﬂﬂE O
.
ﬂﬂO P
targetVector3
ﬂﬂP ]
.
ﬂﬂ] ^
z
ﬂﬂ^ _
,
ﬂﬂ_ `

tempStruct
ﬂﬂa k
.
ﬂﬂk l
animDeltaTime
ﬂﬂl y
,
ﬂﬂy z

tempStructﬂﬂ{ Ö
.ﬂﬂÖ Ü!
animationDurationﬂﬂÜ ó
,ﬂﬂó ò

tempStructﬂﬂô £
.ﬂﬂ£ §
animationTypeﬂﬂ§ ±
)ﬂﬂ± ≤
;ﬂﬂ≤ ≥
if
·· 	
(
··
 

tempStruct
·· 
.
·· 
	valueType
·· 
==
··  "
ValType
··# *
.
··* +
Field
··+ 0
)
··0 1

tempStruct
‚‚ 
.
‚‚ 
	realField
‚‚ 
.
‚‚ 
SetValue
‚‚ %
(
‚‚% &

tempStruct
‚‚& 0
.
‚‚0 1
RealComponent
‚‚1 >
,
‚‚> ?
tempVector3
‚‚@ K
)
‚‚K L
;
‚‚L M
else
„„ 
if
„„ 
(
„„ 

tempStruct
„„ 
.
„„ 
	valueType
„„ $
==
„„% '
ValType
„„( /
.
„„/ 0
Property
„„0 8
)
„„8 9

tempStruct
‰‰ 
.
‰‰ 
realProperty
‰‰ 
.
‰‰  
SetValue
‰‰  (
(
‰‰( )

tempStruct
‰‰) 3
.
‰‰3 4
RealComponent
‰‰4 A
,
‰‰A B
tempVector3
‰‰C N
,
‰‰N O
null
‰‰P T
)
‰‰T U
;
‰‰U V
}
ÂÂ 
else
ÊÊ 

if
ÊÊ 
(
ÊÊ 

tempStruct
ÊÊ 
.
ÊÊ 
variableType
ÊÊ &
==
ÊÊ' )
$str
ÊÊ* <
)
ÊÊ< =
{
ÁÁ 
tempRect
ËË 
=
ËË 

tempStruct
ËË 
.
ËË 
initialRect
ËË (
;
ËË( )
if
ÍÍ 	
(
ÍÍ
 

tempStruct
ÍÍ 
.
ÍÍ 
modifyParameter1
ÍÍ &
)
ÍÍ& '
tempRect
ÎÎ 
.
ÎÎ 
x
ÎÎ 
=
ÎÎ 
UpdateAnimation
ÎÎ $
(
ÎÎ$ %

tempStruct
ÎÎ% /
.
ÎÎ/ 0
initialRect
ÎÎ0 ;
.
ÎÎ; <
x
ÎÎ< =
,
ÎÎ= >

tempStruct
ÎÎ? I
.
ÎÎI J

targetRect
ÎÎJ T
.
ÎÎT U
x
ÎÎU V
,
ÎÎV W

tempStruct
ÎÎX b
.
ÎÎb c
animDeltaTime
ÎÎc p
,
ÎÎp q

tempStruct
ÎÎr |
.
ÎÎ| } 
animationDurationÎÎ} é
,ÎÎé è

tempStructÎÎê ö
.ÎÎö õ
animationTypeÎÎõ ®
)ÎÎ® ©
;ÎÎ© ™
if
ÌÌ 	
(
ÌÌ
 

tempStruct
ÌÌ 
.
ÌÌ 
modifyParameter2
ÌÌ &
)
ÌÌ& '
tempRect
ÓÓ 
.
ÓÓ 
y
ÓÓ 
=
ÓÓ 
UpdateAnimation
ÓÓ $
(
ÓÓ$ %

tempStruct
ÓÓ% /
.
ÓÓ/ 0
initialRect
ÓÓ0 ;
.
ÓÓ; <
y
ÓÓ< =
,
ÓÓ= >

tempStruct
ÓÓ? I
.
ÓÓI J

targetRect
ÓÓJ T
.
ÓÓT U
y
ÓÓU V
,
ÓÓV W

tempStruct
ÓÓX b
.
ÓÓb c
animDeltaTime
ÓÓc p
,
ÓÓp q

tempStruct
ÓÓr |
.
ÓÓ| } 
animationDurationÓÓ} é
,ÓÓé è

tempStructÓÓê ö
.ÓÓö õ
animationTypeÓÓõ ®
)ÓÓ® ©
;ÓÓ© ™
if
 	
(

 

tempStruct
 
.
 
modifyParameter3
 &
)
& '
tempRect
ÒÒ 
.
ÒÒ 
width
ÒÒ 
=
ÒÒ 
UpdateAnimation
ÒÒ (
(
ÒÒ( )

tempStruct
ÒÒ) 3
.
ÒÒ3 4
initialRect
ÒÒ4 ?
.
ÒÒ? @
width
ÒÒ@ E
,
ÒÒE F

tempStruct
ÒÒG Q
.
ÒÒQ R

targetRect
ÒÒR \
.
ÒÒ\ ]
width
ÒÒ] b
,
ÒÒb c

tempStruct
ÒÒd n
.
ÒÒn o
animDeltaTime
ÒÒo |
,
ÒÒ| }

tempStructÒÒ~ à
.ÒÒà â!
animationDurationÒÒâ ö
,ÒÒö õ

tempStructÒÒú ¶
.ÒÒ¶ ß
animationTypeÒÒß ¥
)ÒÒ¥ µ
;ÒÒµ ∂
if
ÛÛ 	
(
ÛÛ
 

tempStruct
ÛÛ 
.
ÛÛ 
modifyParameter4
ÛÛ &
)
ÛÛ& '
tempRect
ÙÙ 
.
ÙÙ 
height
ÙÙ 
=
ÙÙ 
UpdateAnimation
ÙÙ )
(
ÙÙ) *

tempStruct
ÙÙ* 4
.
ÙÙ4 5
initialRect
ÙÙ5 @
.
ÙÙ@ A
height
ÙÙA G
,
ÙÙG H

tempStruct
ÙÙI S
.
ÙÙS T

targetRect
ÙÙT ^
.
ÙÙ^ _
height
ÙÙ_ e
,
ÙÙe f

tempStruct
ÙÙg q
.
ÙÙq r
animDeltaTime
ÙÙr 
,ÙÙ Ä

tempStructÙÙÅ ã
.ÙÙã å!
animationDurationÙÙå ù
,ÙÙù û

tempStructÙÙü ©
.ÙÙ© ™
animationTypeÙÙ™ ∑
)ÙÙ∑ ∏
;ÙÙ∏ π
if
ˆˆ 	
(
ˆˆ
 

tempStruct
ˆˆ 
.
ˆˆ 
	valueType
ˆˆ 
==
ˆˆ  "
ValType
ˆˆ# *
.
ˆˆ* +
Field
ˆˆ+ 0
)
ˆˆ0 1

tempStruct
˜˜ 
.
˜˜ 
	realField
˜˜ 
.
˜˜ 
SetValue
˜˜ %
(
˜˜% &

tempStruct
˜˜& 0
.
˜˜0 1
RealComponent
˜˜1 >
,
˜˜> ?
tempRect
˜˜@ H
)
˜˜H I
;
˜˜I J
else
¯¯ 
if
¯¯ 
(
¯¯ 

tempStruct
¯¯ 
.
¯¯ 
	valueType
¯¯ $
==
¯¯% '
ValType
¯¯( /
.
¯¯/ 0
Property
¯¯0 8
)
¯¯8 9

tempStruct
˘˘ 
.
˘˘ 
realProperty
˘˘ 
.
˘˘  
SetValue
˘˘  (
(
˘˘( )

tempStruct
˘˘) 3
.
˘˘3 4
RealComponent
˘˘4 A
,
˘˘A B
tempRect
˘˘C K
,
˘˘K L
null
˘˘M Q
)
˘˘Q R
;
˘˘R S
}
˙˙ 
else
˚˚ 

if
˚˚ 
(
˚˚ 

tempStruct
˚˚ 
.
˚˚ 
variableType
˚˚ &
==
˚˚' )
$str
˚˚* =
)
˚˚= >
{
¸¸ 
	tempColor
˝˝ 
=
˝˝ 

tempStruct
˝˝ 
.
˝˝ 
initialColor
˝˝ *
;
˝˝* +
if
ˇˇ 	
(
ˇˇ
 

tempStruct
ˇˇ 
.
ˇˇ 
modifyParameter1
ˇˇ &
)
ˇˇ& '
	tempColor
ÄÄ 
.
ÄÄ 
r
ÄÄ 
=
ÄÄ 
UpdateAnimation
ÄÄ %
(
ÄÄ% &

tempStruct
ÄÄ& 0
.
ÄÄ0 1
initialColor
ÄÄ1 =
.
ÄÄ= >
r
ÄÄ> ?
,
ÄÄ? @

tempStruct
ÄÄA K
.
ÄÄK L
targetColor
ÄÄL W
.
ÄÄW X
r
ÄÄX Y
,
ÄÄY Z

tempStruct
ÄÄ[ e
.
ÄÄe f
animDeltaTime
ÄÄf s
,
ÄÄs t

tempStruct
ÄÄu 
.ÄÄ Ä!
animationDurationÄÄÄ ë
,ÄÄë í

tempStructÄÄì ù
.ÄÄù û
animationTypeÄÄû ´
)ÄÄ´ ¨
;ÄÄ¨ ≠
if
ÇÇ 	
(
ÇÇ
 

tempStruct
ÇÇ 
.
ÇÇ 
modifyParameter2
ÇÇ &
)
ÇÇ& '
	tempColor
ÉÉ 
.
ÉÉ 
g
ÉÉ 
=
ÉÉ 
UpdateAnimation
ÉÉ %
(
ÉÉ% &

tempStruct
ÉÉ& 0
.
ÉÉ0 1
initialColor
ÉÉ1 =
.
ÉÉ= >
g
ÉÉ> ?
,
ÉÉ? @

tempStruct
ÉÉA K
.
ÉÉK L
targetColor
ÉÉL W
.
ÉÉW X
g
ÉÉX Y
,
ÉÉY Z

tempStruct
ÉÉ[ e
.
ÉÉe f
animDeltaTime
ÉÉf s
,
ÉÉs t

tempStruct
ÉÉu 
.ÉÉ Ä!
animationDurationÉÉÄ ë
,ÉÉë í

tempStructÉÉì ù
.ÉÉù û
animationTypeÉÉû ´
)ÉÉ´ ¨
;ÉÉ¨ ≠
if
ÖÖ 	
(
ÖÖ
 

tempStruct
ÖÖ 
.
ÖÖ 
modifyParameter3
ÖÖ &
)
ÖÖ& '
	tempColor
ÜÜ 
.
ÜÜ 
b
ÜÜ 
=
ÜÜ 
UpdateAnimation
ÜÜ %
(
ÜÜ% &

tempStruct
ÜÜ& 0
.
ÜÜ0 1
initialColor
ÜÜ1 =
.
ÜÜ= >
b
ÜÜ> ?
,
ÜÜ? @

tempStruct
ÜÜA K
.
ÜÜK L
targetColor
ÜÜL W
.
ÜÜW X
b
ÜÜX Y
,
ÜÜY Z

tempStruct
ÜÜ[ e
.
ÜÜe f
animDeltaTime
ÜÜf s
,
ÜÜs t

tempStruct
ÜÜu 
.ÜÜ Ä!
animationDurationÜÜÄ ë
,ÜÜë í

tempStructÜÜì ù
.ÜÜù û
animationTypeÜÜû ´
)ÜÜ´ ¨
;ÜÜ¨ ≠
if
àà 	
(
àà
 

tempStruct
àà 
.
àà 
modifyParameter4
àà &
)
àà& '
	tempColor
ââ 
.
ââ 
a
ââ 
=
ââ 
UpdateAnimation
ââ %
(
ââ% &

tempStruct
ââ& 0
.
ââ0 1
initialColor
ââ1 =
.
ââ= >
a
ââ> ?
,
ââ? @

tempStruct
ââA K
.
ââK L
targetColor
ââL W
.
ââW X
a
ââX Y
,
ââY Z

tempStruct
ââ[ e
.
ââe f
animDeltaTime
ââf s
,
ââs t

tempStruct
ââu 
.ââ Ä!
animationDurationââÄ ë
,ââë í

tempStructââì ù
.ââù û
animationTypeââû ´
)ââ´ ¨
;ââ¨ ≠
if
ãã 	
(
ãã
 

tempStruct
ãã 
.
ãã 
	valueType
ãã 
==
ãã  "
ValType
ãã# *
.
ãã* +
Field
ãã+ 0
)
ãã0 1

tempStruct
åå 
.
åå 
	realField
åå 
.
åå 
SetValue
åå %
(
åå% &

tempStruct
åå& 0
.
åå0 1
RealComponent
åå1 >
,
åå> ?
	tempColor
åå@ I
)
ååI J
;
ååJ K
else
çç 
if
çç 
(
çç 

tempStruct
çç 
.
çç 
	valueType
çç $
==
çç% '
ValType
çç( /
.
çç/ 0
Property
çç0 8
)
çç8 9

tempStruct
éé 
.
éé 
realProperty
éé 
.
éé  
SetValue
éé  (
(
éé( )

tempStruct
éé) 3
.
éé3 4
RealComponent
éé4 A
,
ééA B
	tempColor
ééC L
,
ééL M
null
ééN R
)
ééR S
;
ééS T
}
èè 
else
êê 

if
êê 
(
êê 

tempStruct
êê 
.
êê 
variableType
êê &
==
êê' )
$str
êê* @
)
êê@ A
{
ëë 
tempMaterial
íí 
=
íí 

tempStruct
íí  
.
íí  !
initialMaterial
íí! 0
;
íí0 1
	tempColor
ìì 
=
ìì 
tempMaterial
ìì 
.
ìì  
color
ìì  %
;
ìì% &
if
ïï 	
(
ïï
 

tempStruct
ïï 
.
ïï 
modifyParameter1
ïï &
)
ïï& '
	tempColor
ññ 
.
ññ 
r
ññ 
=
ññ 
UpdateAnimation
ññ %
(
ññ% &

tempStruct
ññ& 0
.
ññ0 1
initialColor
ññ1 =
.
ññ= >
r
ññ> ?
,
ññ? @

tempStruct
ññA K
.
ññK L
initialColor
ññL X
.
ññX Y
r
ññY Z
,
ññZ [

tempStruct
ññ\ f
.
ññf g
animDeltaTime
ññg t
,
ññt u

tempStructññv Ä
.ññÄ Å!
animationDurationññÅ í
,ññí ì

tempStructññî û
.ññû ü
animationTypeññü ¨
)ññ¨ ≠
;ññ≠ Æ
if
òò 	
(
òò
 

tempStruct
òò 
.
òò 
modifyParameter2
òò &
)
òò& '
	tempColor
ôô 
.
ôô 
g
ôô 
=
ôô 
UpdateAnimation
ôô %
(
ôô% &

tempStruct
ôô& 0
.
ôô0 1
initialColor
ôô1 =
.
ôô= >
g
ôô> ?
,
ôô? @

tempStruct
ôôA K
.
ôôK L
initialColor
ôôL X
.
ôôX Y
g
ôôY Z
,
ôôZ [

tempStruct
ôô\ f
.
ôôf g
animDeltaTime
ôôg t
,
ôôt u

tempStructôôv Ä
.ôôÄ Å!
animationDurationôôÅ í
,ôôí ì

tempStructôôî û
.ôôû ü
animationTypeôôü ¨
)ôô¨ ≠
;ôô≠ Æ
if
õõ 	
(
õõ
 

tempStruct
õõ 
.
õõ 
modifyParameter3
õõ &
)
õõ& '
	tempColor
úú 
.
úú 
b
úú 
=
úú 
UpdateAnimation
úú %
(
úú% &

tempStruct
úú& 0
.
úú0 1
initialColor
úú1 =
.
úú= >
b
úú> ?
,
úú? @

tempStruct
úúA K
.
úúK L
initialColor
úúL X
.
úúX Y
b
úúY Z
,
úúZ [

tempStruct
úú\ f
.
úúf g
animDeltaTime
úúg t
,
úút u

tempStructúúv Ä
.úúÄ Å!
animationDurationúúÅ í
,úúí ì

tempStructúúî û
.úúû ü
animationTypeúúü ¨
)úú¨ ≠
;úú≠ Æ
if
ûû 	
(
ûû
 

tempStruct
ûû 
.
ûû 
modifyParameter4
ûû &
)
ûû& '
	tempColor
üü 
.
üü 
a
üü 
=
üü 
UpdateAnimation
üü %
(
üü% &

tempStruct
üü& 0
.
üü0 1
initialColor
üü1 =
.
üü= >
a
üü> ?
,
üü? @

tempStruct
üüA K
.
üüK L
initialColor
üüL X
.
üüX Y
a
üüY Z
,
üüZ [

tempStruct
üü\ f
.
üüf g
animDeltaTime
üüg t
,
üüt u

tempStructüüv Ä
.üüÄ Å!
animationDurationüüÅ í
,üüí ì

tempStructüüî û
.üüû ü
animationTypeüüü ¨
)üü¨ ≠
;üü≠ Æ
tempMaterial
°° 
.
°° 
color
°° 
=
°° 
	tempColor
°° %
;
°°% &
if
££ 	
(
££
 

tempStruct
££ 
.
££ 
	valueType
££ 
==
££  "
ValType
££# *
.
££* +
Field
££+ 0
)
££0 1

tempStruct
§§ 
.
§§ 
	realField
§§ 
.
§§ 
SetValue
§§ %
(
§§% &

tempStruct
§§& 0
.
§§0 1
RealComponent
§§1 >
,
§§> ?
tempMaterial
§§@ L
)
§§L M
;
§§M N
else
•• 
if
•• 
(
•• 

tempStruct
•• 
.
•• 
	valueType
•• $
==
••% '
ValType
••( /
.
••/ 0
Property
••0 8
)
••8 9

tempStruct
¶¶ 
.
¶¶ 
realProperty
¶¶ 
.
¶¶  
SetValue
¶¶  (
(
¶¶( )

tempStruct
¶¶) 3
.
¶¶3 4
RealComponent
¶¶4 A
,
¶¶A B
tempMaterial
¶¶C O
,
¶¶O P
null
¶¶Q U
)
¶¶U V
;
¶¶V W
}
ßß 
}
®® 
else
©© 	
{
™™ 
if
´´ 
(
´´	 


tempStruct
´´
 
.
´´ 
variableType
´´ !
==
´´" $
$str
´´% 4
)
´´4 5
{
¨¨ 
	tempFloat
≠≠ 
=
≠≠ 

tempStruct
≠≠ 
.
≠≠ 
targetFloat
≠≠ )
;
≠≠) *
if
ØØ 	
(
ØØ
 

tempStruct
ØØ 
.
ØØ 
	valueType
ØØ 
==
ØØ  "
ValType
ØØ# *
.
ØØ* +
Field
ØØ+ 0
)
ØØ0 1

tempStruct
∞∞ 
.
∞∞ 
	realField
∞∞ 
.
∞∞ 
SetValue
∞∞ %
(
∞∞% &

tempStruct
∞∞& 0
.
∞∞0 1
RealComponent
∞∞1 >
,
∞∞> ?
	tempFloat
∞∞@ I
)
∞∞I J
;
∞∞J K
else
±± 
if
±± 
(
±± 

tempStruct
±± 
.
±± 
	valueType
±± $
==
±±% '
ValType
±±( /
.
±±/ 0
Property
±±0 8
)
±±8 9

tempStruct
≤≤ 
.
≤≤ 
realProperty
≤≤ 
.
≤≤  
SetValue
≤≤  (
(
≤≤( )

tempStruct
≤≤) 3
.
≤≤3 4
RealComponent
≤≤4 A
,
≤≤A B
	tempFloat
≤≤C L
,
≤≤L M
null
≤≤N R
)
≤≤R S
;
≤≤S T
}
≥≥ 
else
¥¥ 

if
¥¥ 
(
¥¥ 

tempStruct
¥¥ 
.
¥¥ 
variableType
¥¥ &
==
¥¥' )
$str
¥¥* 8
)
¥¥8 9
{
µµ 
	tempFloat
∂∂ 
=
∂∂ 

tempStruct
∂∂ 
.
∂∂ 
targetFloat
∂∂ )
;
∂∂) *
if
∏∏ 	
(
∏∏
 

tempStruct
∏∏ 
.
∏∏ 
	valueType
∏∏ 
==
∏∏  "
ValType
∏∏# *
.
∏∏* +
Field
∏∏+ 0
)
∏∏0 1

tempStruct
ππ 
.
ππ 
	realField
ππ 
.
ππ 
SetValue
ππ %
(
ππ% &

tempStruct
ππ& 0
.
ππ0 1
RealComponent
ππ1 >
,
ππ> ?
Mathf
ππ@ E
.
ππE F

RoundToInt
ππF P
(
ππP Q
	tempFloat
ππQ Z
)
ππZ [
)
ππ[ \
;
ππ\ ]
else
∫∫ 
if
∫∫ 
(
∫∫ 

tempStruct
∫∫ 
.
∫∫ 
	valueType
∫∫ $
==
∫∫% '
ValType
∫∫( /
.
∫∫/ 0
Property
∫∫0 8
)
∫∫8 9

tempStruct
ªª 
.
ªª 
realProperty
ªª 
.
ªª  
SetValue
ªª  (
(
ªª( )

tempStruct
ªª) 3
.
ªª3 4
RealComponent
ªª4 A
,
ªªA B
Mathf
ªªC H
.
ªªH I

RoundToInt
ªªI S
(
ªªS T
	tempFloat
ªªT ]
)
ªª] ^
,
ªª^ _
null
ªª` d
)
ªªd e
;
ªªe f
}
ºº 
else
ΩΩ 

if
ΩΩ 
(
ΩΩ 

tempStruct
ΩΩ 
.
ΩΩ 
variableType
ΩΩ &
==
ΩΩ' )
$str
ΩΩ* ?
)
ΩΩ? @
{
ææ 
tempVector2
øø 
=
øø 

tempStruct
øø 
.
øø  
initialVector2
øø  .
;
øø. /
if
¡¡ 	
(
¡¡
 

tempStruct
¡¡ 
.
¡¡ 
modifyParameter1
¡¡ &
)
¡¡& '
tempVector2
¬¬ 
.
¬¬ 
x
¬¬ 
=
¬¬ 

tempStruct
¬¬ "
.
¬¬" #
targetVector2
¬¬# 0
.
¬¬0 1
x
¬¬1 2
;
¬¬2 3
if
ƒƒ 	
(
ƒƒ
 

tempStruct
ƒƒ 
.
ƒƒ 
modifyParameter2
ƒƒ &
)
ƒƒ& '
tempVector2
≈≈ 
.
≈≈ 
y
≈≈ 
=
≈≈ 

tempStruct
≈≈ "
.
≈≈" #
targetVector2
≈≈# 0
.
≈≈0 1
y
≈≈1 2
;
≈≈2 3
if
«« 	
(
««
 

tempStruct
«« 
.
«« 
	valueType
«« 
==
««  "
ValType
««# *
.
««* +
Field
««+ 0
)
««0 1

tempStruct
»» 
.
»» 
	realField
»» 
.
»» 
SetValue
»» %
(
»»% &

tempStruct
»»& 0
.
»»0 1
RealComponent
»»1 >
,
»»> ?
tempVector2
»»@ K
)
»»K L
;
»»L M
else
…… 
if
…… 
(
…… 

tempStruct
…… 
.
…… 
	valueType
…… $
==
……% '
ValType
……( /
.
……/ 0
Property
……0 8
)
……8 9

tempStruct
   
.
   
realProperty
   
.
    
SetValue
    (
(
  ( )

tempStruct
  ) 3
.
  3 4
RealComponent
  4 A
,
  A B
tempVector2
  C N
,
  N O
null
  P T
)
  T U
;
  U V
}
ÀÀ 
else
ÃÃ 

if
ÃÃ 
(
ÃÃ 

tempStruct
ÃÃ 
.
ÃÃ 
variableType
ÃÃ &
==
ÃÃ' )
$str
ÃÃ* ?
)
ÃÃ? @
{
ÕÕ 
tempVector3
ŒŒ 
=
ŒŒ 

tempStruct
ŒŒ 
.
ŒŒ  
initialVector3
ŒŒ  .
;
ŒŒ. /
if
–– 	
(
––
 

tempStruct
–– 
.
–– 
modifyParameter1
–– &
)
––& '
tempVector3
—— 
.
—— 
x
—— 
=
—— 

tempStruct
—— "
.
——" #
targetVector3
——# 0
.
——0 1
x
——1 2
;
——2 3
if
”” 	
(
””
 

tempStruct
”” 
.
”” 
modifyParameter2
”” &
)
””& '
tempVector3
‘‘ 
.
‘‘ 
y
‘‘ 
=
‘‘ 

tempStruct
‘‘ "
.
‘‘" #
targetVector3
‘‘# 0
.
‘‘0 1
y
‘‘1 2
;
‘‘2 3
if
÷÷ 	
(
÷÷
 

tempStruct
÷÷ 
.
÷÷ 
modifyParameter3
÷÷ &
)
÷÷& '
tempVector3
◊◊ 
.
◊◊ 
z
◊◊ 
=
◊◊ 

tempStruct
◊◊ "
.
◊◊" #
targetVector3
◊◊# 0
.
◊◊0 1
z
◊◊1 2
;
◊◊2 3
if
ŸŸ 	
(
ŸŸ
 

tempStruct
ŸŸ 
.
ŸŸ 
	valueType
ŸŸ 
==
ŸŸ  "
ValType
ŸŸ# *
.
ŸŸ* +
Field
ŸŸ+ 0
)
ŸŸ0 1

tempStruct
⁄⁄ 
.
⁄⁄ 
	realField
⁄⁄ 
.
⁄⁄ 
SetValue
⁄⁄ %
(
⁄⁄% &

tempStruct
⁄⁄& 0
.
⁄⁄0 1
RealComponent
⁄⁄1 >
,
⁄⁄> ?
tempVector3
⁄⁄@ K
)
⁄⁄K L
;
⁄⁄L M
else
€€ 
if
€€ 
(
€€ 

tempStruct
€€ 
.
€€ 
	valueType
€€ $
==
€€% '
ValType
€€( /
.
€€/ 0
Property
€€0 8
)
€€8 9

tempStruct
‹‹ 
.
‹‹ 
realProperty
‹‹ 
.
‹‹  
SetValue
‹‹  (
(
‹‹( )

tempStruct
‹‹) 3
.
‹‹3 4
RealComponent
‹‹4 A
,
‹‹A B
tempVector3
‹‹C N
,
‹‹N O
null
‹‹P T
)
‹‹T U
;
‹‹U V
}
›› 
else
ﬁﬁ 

if
ﬁﬁ 
(
ﬁﬁ 

tempStruct
ﬁﬁ 
.
ﬁﬁ 
variableType
ﬁﬁ &
==
ﬁﬁ' )
$str
ﬁﬁ* <
)
ﬁﬁ< =
{
ﬂﬂ 
tempRect
‡‡ 
=
‡‡ 

tempStruct
‡‡ 
.
‡‡ 
initialRect
‡‡ (
;
‡‡( )
if
‚‚ 	
(
‚‚
 

tempStruct
‚‚ 
.
‚‚ 
modifyParameter1
‚‚ &
)
‚‚& '
tempRect
„„ 
.
„„ 
x
„„ 
=
„„ 

tempStruct
„„ 
.
„„  

targetRect
„„  *
.
„„* +
x
„„+ ,
;
„„, -
if
ÂÂ 	
(
ÂÂ
 

tempStruct
ÂÂ 
.
ÂÂ 
modifyParameter2
ÂÂ &
)
ÂÂ& '
tempRect
ÊÊ 
.
ÊÊ 
y
ÊÊ 
=
ÊÊ 

tempStruct
ÊÊ 
.
ÊÊ  

targetRect
ÊÊ  *
.
ÊÊ* +
y
ÊÊ+ ,
;
ÊÊ, -
if
ËË 	
(
ËË
 

tempStruct
ËË 
.
ËË 
modifyParameter3
ËË &
)
ËË& '
tempRect
ÈÈ 
.
ÈÈ 
width
ÈÈ 
=
ÈÈ 

tempStruct
ÈÈ #
.
ÈÈ# $

targetRect
ÈÈ$ .
.
ÈÈ. /
width
ÈÈ/ 4
;
ÈÈ4 5
if
ÎÎ 	
(
ÎÎ
 

tempStruct
ÎÎ 
.
ÎÎ 
modifyParameter4
ÎÎ &
)
ÎÎ& '
tempRect
ÏÏ 
.
ÏÏ 
height
ÏÏ 
=
ÏÏ 

tempStruct
ÏÏ $
.
ÏÏ$ %

targetRect
ÏÏ% /
.
ÏÏ/ 0
height
ÏÏ0 6
;
ÏÏ6 7
if
ÓÓ 	
(
ÓÓ
 

tempStruct
ÓÓ 
.
ÓÓ 
	valueType
ÓÓ 
==
ÓÓ  "
ValType
ÓÓ# *
.
ÓÓ* +
Field
ÓÓ+ 0
)
ÓÓ0 1

tempStruct
ÔÔ 
.
ÔÔ 
	realField
ÔÔ 
.
ÔÔ 
SetValue
ÔÔ %
(
ÔÔ% &

tempStruct
ÔÔ& 0
.
ÔÔ0 1
RealComponent
ÔÔ1 >
,
ÔÔ> ?
tempRect
ÔÔ@ H
)
ÔÔH I
;
ÔÔI J
else
 
if
 
(
 

tempStruct
 
.
 
	valueType
 $
==
% '
ValType
( /
.
/ 0
Property
0 8
)
8 9

tempStruct
ÒÒ 
.
ÒÒ 
realProperty
ÒÒ 
.
ÒÒ  
SetValue
ÒÒ  (
(
ÒÒ( )

tempStruct
ÒÒ) 3
.
ÒÒ3 4
RealComponent
ÒÒ4 A
,
ÒÒA B
tempRect
ÒÒC K
,
ÒÒK L
null
ÒÒM Q
)
ÒÒQ R
;
ÒÒR S
}
ÚÚ 
else
ÛÛ 

if
ÛÛ 
(
ÛÛ 

tempStruct
ÛÛ 
.
ÛÛ 
variableType
ÛÛ &
==
ÛÛ' )
$str
ÛÛ* =
)
ÛÛ= >
{
ÙÙ 
	tempColor
ıı 
=
ıı 

tempStruct
ıı 
.
ıı 
initialColor
ıı *
;
ıı* +
if
˜˜ 	
(
˜˜
 

tempStruct
˜˜ 
.
˜˜ 
modifyParameter1
˜˜ &
)
˜˜& '
	tempColor
¯¯ 
.
¯¯ 
r
¯¯ 
=
¯¯ 

tempStruct
¯¯  
.
¯¯  !
targetColor
¯¯! ,
.
¯¯, -
r
¯¯- .
;
¯¯. /
if
˙˙ 	
(
˙˙
 

tempStruct
˙˙ 
.
˙˙ 
modifyParameter2
˙˙ &
)
˙˙& '
	tempColor
˚˚ 
.
˚˚ 
g
˚˚ 
=
˚˚ 

tempStruct
˚˚  
.
˚˚  !
targetColor
˚˚! ,
.
˚˚, -
g
˚˚- .
;
˚˚. /
if
˝˝ 	
(
˝˝
 

tempStruct
˝˝ 
.
˝˝ 
modifyParameter3
˝˝ &
)
˝˝& '
	tempColor
˛˛ 
.
˛˛ 
b
˛˛ 
=
˛˛ 

tempStruct
˛˛  
.
˛˛  !
targetColor
˛˛! ,
.
˛˛, -
b
˛˛- .
;
˛˛. /
if
ÄÄ 	
(
ÄÄ
 

tempStruct
ÄÄ 
.
ÄÄ 
modifyParameter4
ÄÄ &
)
ÄÄ& '
	tempColor
ÅÅ 
.
ÅÅ 
a
ÅÅ 
=
ÅÅ 

tempStruct
ÅÅ  
.
ÅÅ  !
targetColor
ÅÅ! ,
.
ÅÅ, -
a
ÅÅ- .
;
ÅÅ. /
if
ÉÉ 	
(
ÉÉ
 

tempStruct
ÉÉ 
.
ÉÉ 
	valueType
ÉÉ 
==
ÉÉ  "
ValType
ÉÉ# *
.
ÉÉ* +
Field
ÉÉ+ 0
)
ÉÉ0 1

tempStruct
ÑÑ 
.
ÑÑ 
	realField
ÑÑ 
.
ÑÑ 
SetValue
ÑÑ %
(
ÑÑ% &

tempStruct
ÑÑ& 0
.
ÑÑ0 1
RealComponent
ÑÑ1 >
,
ÑÑ> ?
	tempColor
ÑÑ@ I
)
ÑÑI J
;
ÑÑJ K
else
ÖÖ 
if
ÖÖ 
(
ÖÖ 

tempStruct
ÖÖ 
.
ÖÖ 
	valueType
ÖÖ $
==
ÖÖ% '
ValType
ÖÖ( /
.
ÖÖ/ 0
Property
ÖÖ0 8
)
ÖÖ8 9

tempStruct
ÜÜ 
.
ÜÜ 
realProperty
ÜÜ 
.
ÜÜ  
SetValue
ÜÜ  (
(
ÜÜ( )

tempStruct
ÜÜ) 3
.
ÜÜ3 4
RealComponent
ÜÜ4 A
,
ÜÜA B
	tempColor
ÜÜC L
,
ÜÜL M
null
ÜÜN R
)
ÜÜR S
;
ÜÜS T
}
áá 
else
àà 

if
àà 
(
àà 

tempStruct
àà 
.
àà 
variableType
àà &
==
àà' )
$str
àà* @
)
àà@ A
{
ââ 
tempMaterial
ää 
=
ää 

tempStruct
ää  
.
ää  !
initialMaterial
ää! 0
;
ää0 1
	tempColor
ãã 
=
ãã 
tempMaterial
ãã 
.
ãã  
color
ãã  %
;
ãã% &
if
çç 	
(
çç
 

tempStruct
çç 
.
çç 
modifyParameter1
çç &
)
çç& '
	tempColor
éé 
.
éé 
r
éé 
=
éé 

tempStruct
éé  
.
éé  !
initialColor
éé! -
.
éé- .
r
éé. /
;
éé/ 0
if
êê 	
(
êê
 

tempStruct
êê 
.
êê 
modifyParameter2
êê &
)
êê& '
	tempColor
ëë 
.
ëë 
g
ëë 
=
ëë 

tempStruct
ëë  
.
ëë  !
initialColor
ëë! -
.
ëë- .
g
ëë. /
;
ëë/ 0
if
ìì 	
(
ìì
 

tempStruct
ìì 
.
ìì 
modifyParameter3
ìì &
)
ìì& '
	tempColor
îî 
.
îî 
b
îî 
=
îî 

tempStruct
îî  
.
îî  !
initialColor
îî! -
.
îî- .
b
îî. /
;
îî/ 0
if
ññ 	
(
ññ
 

tempStruct
ññ 
.
ññ 
modifyParameter4
ññ &
)
ññ& '
	tempColor
óó 
.
óó 
a
óó 
=
óó 

tempStruct
óó  
.
óó  !
initialColor
óó! -
.
óó- .
a
óó. /
;
óó/ 0
tempMaterial
ôô 
.
ôô 
color
ôô 
=
ôô 
	tempColor
ôô %
;
ôô% &
if
õõ 	
(
õõ
 

tempStruct
õõ 
.
õõ 
	valueType
õõ 
==
õõ  "
ValType
õõ# *
.
õõ* +
Field
õõ+ 0
)
õõ0 1

tempStruct
úú 
.
úú 
	realField
úú 
.
úú 
SetValue
úú %
(
úú% &

tempStruct
úú& 0
.
úú0 1
RealComponent
úú1 >
,
úú> ?
tempMaterial
úú@ L
)
úúL M
;
úúM N
else
ùù 
if
ùù 
(
ùù 

tempStruct
ùù 
.
ùù 
	valueType
ùù $
==
ùù% '
ValType
ùù( /
.
ùù/ 0
Property
ùù0 8
)
ùù8 9

tempStruct
ûû 
.
ûû 
realProperty
ûû 
.
ûû  
SetValue
ûû  (
(
ûû( )

tempStruct
ûû) 3
.
ûû3 4
RealComponent
ûû4 A
,
ûûA B
tempMaterial
ûûC O
,
ûûO P
null
ûûQ U
)
ûûU V
;
ûûV W
}
üü 

activeList
†† 
[
†† 
i
†† 
]
†† 
=
†† 
false
†† 
;
†† 
if
¢¢ 
(
¢¢	 


tempStruct
¢¢
 
.
¢¢ 
methodOnEnd
¢¢  
&&
¢¢! #
!
¢¢$ %

tempStruct
¢¢% /
.
¢¢/ 0
called
¢¢0 6
)
¢¢6 7
{
££ 
StartCoroutine
§§ 
(
§§ 
delayedCall
§§ !
(
§§! "
)
§§" #
)
§§# $
;
§§$ %
	oldStruct
•• 
=
•• 

tempStruct
•• 
;
•• 

tempStruct
¶¶ 
.
¶¶ 
called
¶¶ 
=
¶¶ 
true
¶¶ 
;
¶¶  
}
ßß 
}
®® 

theStructs
™™ 
[
™™ 
i
™™ 
]
™™ 
=
™™ 

tempStruct
™™ 
;
™™  
}
´´ 
}
¨¨ 
}
≠≠ 
IEnumerator
ØØ 
delayedCall
ØØ 
(
ØØ 
)
ØØ 
{
∞∞ 
yield
±± 
return
±±	 
new
±± 
WaitForEndOfFrame
±± %
(
±±% &
)
±±& '
;
±±' (
object
≥≥ 	
[
≥≥	 

]
≥≥
 
parametersArray
≥≥ 
=
≥≥ 
new
≥≥ !
object
≥≥" (
[
≥≥( )
]
≥≥) *
{
≥≥+ ,
	oldStruct
≥≥- 6
.
≥≥6 7
methodParam
≥≥7 B
}
≥≥C D
;
≥≥D E
	oldStruct
µµ 
.
µµ 
methodRealMethod
µµ 
.
µµ 
Invoke
µµ $
(
µµ$ %
	oldStruct
µµ% .
.
µµ. /!
methodRealComponent
µµ/ B
,
µµB C
parametersArray
µµD S
)
µµS T
;
µµT U
}
∂∂ 
float
∏∏ 
UpdateAnimation
∏∏ 
(
∏∏ 
float
∏∏ 
initialValue
∏∏ *
,
∏∏* +
float
∏∏, 1
targetValue
∏∏2 =
,
∏∏= >
float
∏∏? D
time
∏∏E I
,
∏∏I J
float
∏∏K P
duration
∏∏Q Y
,
∏∏Y Z
AnimType
∏∏[ c
animationType
∏∏d q
)
∏∏q r
{
ππ 
switch
∫∫ 	
(
∫∫
 
animationType
∫∫ 
)
∫∫ 
{
ªª 
case
ºº 
AnimType
ºº	 
.
ºº 
Linear
ºº 
:
ºº 
return
ΩΩ 
Anim
ΩΩ 
.
ΩΩ 
Linear
ΩΩ 
(
ΩΩ 
initialValue
ΩΩ $
,
ΩΩ$ %
targetValue
ΩΩ& 1
,
ΩΩ1 2
time
ΩΩ3 7
,
ΩΩ7 8
duration
ΩΩ9 A
)
ΩΩA B
;
ΩΩB C
case
ææ 
AnimType
ææ	 
.
ææ 
	Overshoot
ææ 
:
ææ 
return
øø 
Anim
øø 
.
øø 
	Overshoot
øø 
(
øø 
initialValue
øø '
,
øø' (
targetValue
øø) 4
,
øø4 5
time
øø6 :
,
øø: ;
duration
øø< D
)
øøD E
;
øøE F
case
¿¿ 
AnimType
¿¿	 
.
¿¿ 
Bounce
¿¿ 
:
¿¿ 
return
¡¡ 
Anim
¡¡ 
.
¡¡ 
Bounce
¡¡ 
(
¡¡ 
initialValue
¡¡ $
,
¡¡$ %
targetValue
¡¡& 1
,
¡¡1 2
time
¡¡3 7
,
¡¡7 8
duration
¡¡9 A
)
¡¡A B
;
¡¡B C
case
¬¬ 
AnimType
¬¬	 
.
¬¬ 
EaseOutCubed
¬¬ 
:
¬¬ 
return
√√ 
Anim
√√ 
.
√√ 
Cube
√√ 
.
√√ 
Out
√√ 
(
√√ 
initialValue
√√ &
,
√√& '
targetValue
√√( 3
,
√√3 4
time
√√5 9
,
√√9 :
duration
√√; C
)
√√C D
;
√√D E
case
ƒƒ 
AnimType
ƒƒ	 
.
ƒƒ 
EaseOutQuint
ƒƒ 
:
ƒƒ 
return
≈≈ 
Anim
≈≈ 
.
≈≈ 
Quint
≈≈ 
.
≈≈ 
Out
≈≈ 
(
≈≈ 
initialValue
≈≈ '
,
≈≈' (
targetValue
≈≈) 4
,
≈≈4 5
time
≈≈6 :
,
≈≈: ;
duration
≈≈< D
)
≈≈D E
;
≈≈E F
case
∆∆ 
AnimType
∆∆	 
.
∆∆ 
EaseOutSept
∆∆ 
:
∆∆ 
return
«« 
Anim
«« 
.
«« 
Sept
«« 
.
«« 
Out
«« 
(
«« 
initialValue
«« &
,
««& '
targetValue
««( 3
,
««3 4
time
««5 9
,
««9 :
duration
««; C
)
««C D
;
««D E
case
»» 
AnimType
»»	 
.
»» 
EaseInCubed
»» 
:
»» 
return
…… 
Anim
…… 
.
…… 
Cube
…… 
.
…… 
In
…… 
(
…… 
initialValue
…… %
,
……% &
targetValue
……' 2
,
……2 3
time
……4 8
,
……8 9
duration
……: B
)
……B C
;
……C D
case
   
AnimType
  	 
.
   
EaseInQuint
   
:
   
return
ÀÀ 
Anim
ÀÀ 
.
ÀÀ 
Quint
ÀÀ 
.
ÀÀ 
In
ÀÀ 
(
ÀÀ 
initialValue
ÀÀ &
,
ÀÀ& '
targetValue
ÀÀ( 3
,
ÀÀ3 4
time
ÀÀ5 9
,
ÀÀ9 :
duration
ÀÀ; C
)
ÀÀC D
;
ÀÀD E
case
ÃÃ 
AnimType
ÃÃ	 
.
ÃÃ 

EaseInSept
ÃÃ 
:
ÃÃ 
return
ÕÕ 
Anim
ÕÕ 
.
ÕÕ 
Sept
ÕÕ 
.
ÕÕ 
In
ÕÕ 
(
ÕÕ 
initialValue
ÕÕ %
,
ÕÕ% &
targetValue
ÕÕ' 2
,
ÕÕ2 3
time
ÕÕ4 8
,
ÕÕ8 9
duration
ÕÕ: B
)
ÕÕB C
;
ÕÕC D
case
ŒŒ 
AnimType
ŒŒ	 
.
ŒŒ 
EaseInOutCubed
ŒŒ  
:
ŒŒ  !
return
œœ 
Anim
œœ 
.
œœ 
Cube
œœ 
.
œœ 
InOut
œœ 
(
œœ 
initialValue
œœ (
,
œœ( )
targetValue
œœ* 5
,
œœ5 6
time
œœ7 ;
,
œœ; <
duration
œœ= E
)
œœE F
;
œœF G
case
–– 
AnimType
––	 
.
–– 
EaseInOutQuint
––  
:
––  !
return
—— 
Anim
—— 
.
—— 
Quint
—— 
.
—— 
InOut
—— 
(
—— 
initialValue
—— )
,
——) *
targetValue
——+ 6
,
——6 7
time
——8 <
,
——< =
duration
——> F
)
——F G
;
——G H
case
““ 
AnimType
““	 
.
““ 
EaseInOutSept
““ 
:
““  
return
”” 
Anim
”” 
.
”” 
Sept
”” 
.
”” 
InOut
”” 
(
”” 
initialValue
”” (
,
””( )
targetValue
””* 5
,
””5 6
time
””7 ;
,
””; <
duration
””= E
)
””E F
;
””F G
case
‘‘ 
AnimType
‘‘	 
.
‘‘ 
SoftEaseOutCubed
‘‘ "
:
‘‘" #
return
’’ 
Anim
’’ 
.
’’ 
Cube
’’ 
.
’’ 
SoftOut
’’ 
(
’’ 
initialValue
’’ *
,
’’* +
targetValue
’’, 7
,
’’7 8
time
’’9 =
,
’’= >
duration
’’? G
)
’’G H
;
’’H I
case
÷÷ 
AnimType
÷÷	 
.
÷÷ 
SoftEaseOutQuint
÷÷ "
:
÷÷" #
return
◊◊ 
Anim
◊◊ 
.
◊◊ 
Quint
◊◊ 
.
◊◊ 
SoftOut
◊◊ 
(
◊◊ 
initialValue
◊◊ +
,
◊◊+ ,
targetValue
◊◊- 8
,
◊◊8 9
time
◊◊: >
,
◊◊> ?
duration
◊◊@ H
)
◊◊H I
;
◊◊I J
case
ÿÿ 
AnimType
ÿÿ	 
.
ÿÿ 
SoftEaseOutSept
ÿÿ !
:
ÿÿ! "
return
ŸŸ 
Anim
ŸŸ 
.
ŸŸ 
Sept
ŸŸ 
.
ŸŸ 
SoftOut
ŸŸ 
(
ŸŸ 
initialValue
ŸŸ *
,
ŸŸ* +
targetValue
ŸŸ, 7
,
ŸŸ7 8
time
ŸŸ9 =
,
ŸŸ= >
duration
ŸŸ? G
)
ŸŸG H
;
ŸŸH I
}
⁄⁄ 
return
€€ 	
$num
€€
 
;
€€ 
}
‹‹ 
}
›› 
}ﬁﬁ ˆ‡
JF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\SelectionBoxConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
SelectionBoxConfig  
:! "
MonoBehaviour# 0
{ 
[ 
Header 	
(	 

$str
 
) 
] 
public 
bool	 
rippleEnabled 
= 
true "
;" #
public 
int	 

rippleSize 
; 
public 
float	 
rippleSpeed 
= 
$num 
;  
public 
Color	 
rippleColor 
= 
Color "
." #
black# (
;( )
public 
float	 
rippleStartAlpha 
=  !
$num" &
;& '
public 
float	 
rippleEndAlpha 
= 
$num  $
;$ %
public 
enum	 
HighlightActive 
{ 
Never 
, 	
Hovered 

,
 
Clicked 

}   
public!! 
HighlightActive!!	 
highlightWhen!! &
=!!' (
HighlightActive!!) 8
.!!8 9
Clicked!!9 @
;!!@ A
public"" 
bool""	 
moveTowardCenter"" 
;"" 
public## 
bool##	 

toggleMask## 
=## 
true## 
;##  
public$$ 
bool$$	 !
highlightLastSelected$$ #
=$$$ %
true$$& *
;$$* +
public%% 
float%%	 
animationDuration%%  
=%%! "
$num%%# (
;%%( )
public&& 
Color&&	 
expandedListColor&&  
=&&! "
Color&&# (
.&&( )
white&&) .
;&&. /
private'' 	
Color''
 
contractedListColor'' #
;''# $
private(( 	
Color((
 
currentColor(( 
;(( 
[)) 
Range)) 
()) 	
$num))	 

,))
 
$num)) 
))) 
])) 
public** 
int**	 #
expandedListShadowLevel** $
=**% &
$num**' (
;**( )
private++ 	
ShadowConfig++
 
shadowConfig++ #
;++# $
private,, 	
int,,
 "
contractedNormalShadow,, $
;,,$ %
private-- 	
int--
 !
contractedHoverShadow-- #
;--# $
[// 
Space// 
(// 	
$num//	 
)// 
]// 
public00 
string00	 
[00 
]00 
	listItems00 
;00 
[11 
Header11 	
(11	 

$str11
 
)11 
]11 
public22 
bool22	 
autoMaxItemHeight22 
;22  
public33 
float33	 $
percentageOfScreenHeight33 '
=33( )
$num33* -
;33- .
public44 
int44	 
manualMaxItemHeight44  
;44  !
public66 
int66	 
currentSelection66 
=66 
-66  !
$num66! "
;66" #
public77 
enum77	 
PopDirection77 
{77 
Popup77 !
,77! "
Center77# )
,77) *
Popdown77+ 2
}772 3
;773 4
public88 
PopDirection88	 
expandDirection88 %
=88& '
PopDirection88( 4
.884 5
Center885 ;
;88; <
[:: 
Space:: 
(:: 	
$num::	 
):: 
]:: 
public<< 

GameObject<<	 
	listLayer<< 
;<< 
public== 
Text==	 
selectedText== 
;== 
public>> 
Image>>	 
cancelLayer>> 
;>> 
public?? 
Image??	 
	scrollbar?? 
;?? 
public@@ 
Image@@	 
icon@@ 
;@@ 
publicAA 
ImageAA	 
textLineAA 
;AA 
privateBB 	
floatBB
 
textLineAlphaBB 
;BB 

GameObjectDD 
[DD 
]DD 
listItemObjectsDD 
;DD 
floatEE 

listheightEE 
;EE 
floatFF 
listLayerHeightFF 
;FF 
floatGG 
listPosGG 
;GG 
privateHH 	
boolHH
 

hasShadowsHH 
;HH 
privateII 	
intII
 !
contractedShadowLevelII #
;II# $
RippleConfigJJ 
rippleConfigJJ 
;JJ 
ButtonKK 

thisButtonKK	 
;KK 

GameObjectLL 
listItemPrefabLL 
;LL 

GameObjectMM 
listItemMM 
;MM 
CanvasGroupNN 
listCanvasGroupNN 
;NN 
RectTransformOO 
thisRectOO 
;OO 
privatePP 	
ImagePP
 
	thisImagePP 
;PP 
CanvasGroupQQ  
scrollbarCanvasGroupQQ "
;QQ" #
floatRR 
originalHeightRR 
;RR 
floatSS 
expandedPosSS 
;SS 
floatTT 
originalPosTT 
;TT 
Vector3VV 	
textPosVV
 
;VV 
Vector3WW 	
iconPosWW
 
;WW 
floatYY 
listCanvasAlphaYY 
;YY 
Color[[ 
normalColor[[ 
;[[ 
Color\\ 
highlightColor\\ 
;\\ 
float^^ 
animStartTime^^ 
;^^ 
float__ 
animDeltaTime__ 
;__ 
int`` 
state`` 
;`` 
boolbb 
scrollbarEnabledbb 
;bb 
publicdd 
delegatedd	 
voiddd 
PickItemdd 
(dd  !
intdd! $
itemIddd% +
)dd+ ,
;dd, -
publicee 
PickItemee	 

ItemPickedee 
;ee 
privateff 	
	Transformff
 
parentTransformff #
;ff# $
voidhh 
Starthh 
(hh 
)hh 
{ii 
thisRectjj 
=jj 

gameObjectjj 
.jj 
GetComponentjj %
<jj% &
RectTransformjj& 3
>jj3 4
(jj5 6
)jj6 7
;jj7 8
	thisImagekk 
=kk 

gameObjectkk 
.kk 
GetComponentkk &
<kk& '
Imagekk' ,
>kk, -
(kk- .
)kk. /
;kk/ 0
listCanvasGroupll 
=ll 
	listLayerll 
.ll 
GetComponentll +
<ll+ ,
CanvasGroupll, 7
>ll7 8
(ll9 :
)ll: ;
;ll; < 
scrollbarCanvasGroupmm 
=mm 
	scrollbarmm #
.mm# $
GetComponentmm$ 0
<mm0 1
CanvasGroupmm1 <
>mm< =
(mm> ?
)mm? @
;mm@ A
shadowConfignn 
=nn 

gameObjectnn 
.nn 
GetComponentnn )
<nn) *
ShadowConfignn* 6
>nn6 7
(nn7 8
)nn8 9
;nn9 :
listItemPrefabpp 
=pp 
	Resourcespp 
.pp 
Loadpp "
(pp# $
$strpp$ 7
,pp7 8
typeofpp9 ?
(pp? @

GameObjectpp@ J
)ppJ K
)ppK L
asppM O

GameObjectppP Z
;ppZ [
Setupqq 
(qq	 

)qq
 
;qq 
}rr 
publictt 
voidtt	 
Setuptt 
(tt 
)tt 
{uu 
contractedListColorvv 
=vv 
	thisImagevv "
.vv" #
colorvv# (
;vv( )
normalColorww 
=ww 
expandedListColorww "
;ww" #"
contractedNormalShadowyy 
=yy 
shadowConfigyy (
.yy( )
shadowNormalSizeyy) 9
;yy9 :!
contractedHoverShadowzz 
=zz 
shadowConfigzz '
.zz' (
shadowActiveSizezz( 8
;zz8 9
if|| 
(|| 
textLine|| 
)|| 
textLineAlpha}} 
=}} 
textLine}} 
.}} 
color}} "
.}}" #
a}}# $
;}}$ %
listItemObjects 
= 
new 

GameObject #
[# $
	listItems$ -
.- .
Length. 4
]4 5
;5 6
for
ÅÅ 
(
ÅÅ 
int
ÅÅ 
i
ÅÅ 
=
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
i
ÅÅ 
<
ÅÅ 
	listItems
ÅÅ  
.
ÅÅ  !
Length
ÅÅ! '
;
ÅÅ' (
i
ÅÅ) *
++
ÅÅ* ,
)
ÅÅ, -
{
ÇÇ 
listItem
ÉÉ 
=
ÉÉ 
Instantiate
ÉÉ 
(
ÉÉ 
listItemPrefab
ÉÉ )
)
ÉÉ) *
as
ÉÉ+ -

GameObject
ÉÉ. 8
;
ÉÉ8 9
listItemObjects
ÖÖ 
[
ÖÖ 
i
ÖÖ 
]
ÖÖ 
=
ÖÖ 
listItem
ÖÖ !
;
ÖÖ! "
listItem
áá 
.
áá 
	transform
áá 
.
áá 
	SetParent
áá  
(
áá  !
	listLayer
áá! *
.
áá* +
	transform
áá+ 4
)
áá4 5
;
áá5 6
listItem
àà 
.
àà 
GetComponent
àà 
<
àà 
RectTransform
àà '
>
àà' (
(
àà( )
)
àà) *
.
àà* +

localScale
àà+ 5
=
àà6 7
new
àà8 ;
Vector3
àà< C
(
ààD E
$num
ààE G
,
ààG H
$num
ààI K
,
ààK L
$num
ààM O
)
ààO P
;
ààP Q
listItem
ââ 
.
ââ 
	transform
ââ 
.
ââ 
localPosition
ââ $
=
ââ% &
new
ââ' *
Vector3
ââ+ 2
(
ââ2 3
listItem
ââ3 ;
.
ââ; <
	transform
ââ< E
.
ââE F
localPosition
ââF S
.
ââS T
x
ââT U
,
ââU V
listItem
ââW _
.
ââ_ `
	transform
ââ` i
.
ââi j
localPosition
ââj w
.
ââw x
y
ââx y
,
âây z
$num
ââ{ }
)
ââ} ~
;
ââ~ 
listItem
ää 
.
ää 
	transform
ää 
.
ää 
localRotation
ää $
=
ää% &
new
ää' *

Quaternion
ää+ 5
(
ää5 6
$num
ää6 8
,
ää8 9
$num
ää: <
,
ää< =
$num
ää> @
,
ää@ A
$num
ääB D
)
ääD E
;
ääE F
listItem
ãã 
.
ãã $
GetComponentInChildren
ãã #
<
ãã# $
Text
ãã$ (
>
ãã( )
(
ãã) *
)
ãã* +
.
ãã+ ,
text
ãã, 0
=
ãã1 2
	listItems
ãã3 <
[
ãã< =
i
ãã= >
]
ãã> ?
;
ãã? @%
SelectionListItemConfig
çç 

tempConfig
çç &
=
çç' (
listItem
çç) 1
.
çç1 2
GetComponent
çç2 >
<
çç> ?%
SelectionListItemConfig
çç? V
>
ççV W
(
ççW X
)
ççX Y
;
ççY Z

tempConfig
éé 
.
éé 
listId
éé 
=
éé 
i
éé 
;
éé 
RippleConfig
êê 
tempRippleConfig
êê !
=
êê" #

tempConfig
êê$ .
.
êê. /
GetComponent
êê/ ;
<
êê; <
RippleConfig
êê< H
>
êêH I
(
êêI J
)
êêJ K
;
êêK L
if
íí 
(
íí 
rippleEnabled
íí 
)
íí 
{
ìì 
tempRippleConfig
îî 
.
îî 
autoSize
îî 
=
îî  
false
îî! &
;
îî& '
tempRippleConfig
ïï 
.
ïï 

rippleSize
ïï  
=
ïï! "

rippleSize
ïï# -
;
ïï- .
tempRippleConfig
ññ 
.
ññ 
rippleSpeed
ññ !
=
ññ" #
rippleSpeed
ññ$ /
;
ññ/ 0
tempRippleConfig
óó 
.
óó 
rippleColor
óó !
=
óó" #
rippleColor
óó$ /
;
óó/ 0
tempRippleConfig
òò 
.
òò 
rippleStartAlpha
òò &
=
òò' (
rippleStartAlpha
òò) 9
;
òò9 :
tempRippleConfig
ôô 
.
ôô 
rippleEndAlpha
ôô $
=
ôô% &
rippleEndAlpha
ôô' 5
;
ôô5 6
tempRippleConfig
öö 
.
öö 
moveTowardCenter
öö &
=
öö' (
moveTowardCenter
öö) 9
;
öö9 :
tempRippleConfig
õõ 
.
õõ 

toggleMask
õõ  
=
õõ! "

toggleMask
õõ# -
;
õõ- .
}
úú 
else
ùù 
{
ûû 
tempRippleConfig
üü 
.
üü 
autoSize
üü 
=
üü  
false
üü! &
;
üü& '
tempRippleConfig
†† 
.
†† 

rippleSize
††  
=
††! "
$num
††# $
;
††$ %
tempRippleConfig
°° 
.
°° 
rippleStartAlpha
°° &
=
°°' (
$num
°°) +
;
°°+ ,
tempRippleConfig
¢¢ 
.
¢¢ 
rippleEndAlpha
¢¢ $
=
¢¢% &
$num
¢¢' )
;
¢¢) *
}
££ 
if
•• 
(
•• 
highlightWhen
•• 
==
•• 
HighlightActive
•• (
.
••( )
Never
••) .
)
••. /
tempRippleConfig
¶¶ 
.
¶¶ 
highlightWhen
¶¶ #
=
¶¶$ %
RippleConfig
¶¶& 2
.
¶¶2 3
HighlightActive
¶¶3 B
.
¶¶B C
Never
¶¶C H
;
¶¶H I
else
ßß 
if
ßß	 
(
ßß 
highlightWhen
ßß 
==
ßß 
HighlightActive
ßß -
.
ßß- .
Clicked
ßß. 5
)
ßß5 6
tempRippleConfig
®® 
.
®® 
highlightWhen
®® #
=
®®$ %
RippleConfig
®®& 2
.
®®2 3
HighlightActive
®®3 B
.
®®B C
Clicked
®®C J
;
®®J K
else
©© 
if
©©	 
(
©© 
highlightWhen
©© 
==
©© 
HighlightActive
©© -
.
©©- .
Hovered
©©. 5
)
©©5 6
tempRippleConfig
™™ 
.
™™ 
highlightWhen
™™ #
=
™™$ %
RippleConfig
™™& 2
.
™™2 3
HighlightActive
™™3 B
.
™™B C
Hovered
™™C J
;
™™J K
tempRippleConfig
¨¨ 
.
¨¨ 
Refresh
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
listItem
ÆÆ 
.
ÆÆ 
GetComponent
ÆÆ 
<
ÆÆ 
Image
ÆÆ 
>
ÆÆ  
(
ÆÆ  !
)
ÆÆ! "
.
ÆÆ" #
color
ÆÆ# (
=
ÆÆ) *
normalColor
ÆÆ+ 6
;
ÆÆ6 7
listItem
∞∞ 
.
∞∞ 
GetComponent
∞∞ 
<
∞∞ %
SelectionListItemConfig
∞∞ 1
>
∞∞1 2
(
∞∞2 3
)
∞∞3 4
.
∞∞4 5
Setup
∞∞5 :
(
∞∞: ;
)
∞∞; <
;
∞∞< =
}
±± 
highlightColor
≥≥ 
=
≥≥ 
rippleColor
≥≥ 
;
≥≥  
HSBColor
µµ 
highlightColorHSB
µµ 
=
µµ 
HSBColor
µµ  (
.
µµ( )
	FromColor
µµ) 2
(
µµ3 4
highlightColor
µµ4 B
)
µµB C
;
µµC D
if
∏∏ 
(
∏∏ 
highlightColorHSB
∏∏ 
.
∏∏ 
s
∏∏ 
<=
∏∏ 
$num
∏∏ #
)
∏∏# $
{
ππ 
highlightColorHSB
∫∫ 
.
∫∫ 
s
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
highlightColorHSB
ªª 
.
ªª 
b
ªª 
=
ªª 
$num
ªª 
;
ªª 
}
ºº 
else
ΩΩ 
{
ææ 
highlightColorHSB
øø 
.
øø 
s
øø 
=
øø 
$num
øø 
;
øø 
highlightColorHSB
¿¿ 
.
¿¿ 
b
¿¿ 
=
¿¿ 
$num
¿¿ 
;
¿¿ 
}
¡¡ 
highlightColor
√√ 
=
√√ 
HSBColor
√√ 
.
√√ 
ToColor
√√ $
(
√√% &
highlightColorHSB
√√& 7
)
√√7 8
;
√√8 9
highlightColor
≈≈ 
.
≈≈ 
a
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
HSBColor
«« 
normalColorHSB
«« 
=
«« 
HSBColor
«« %
.
««% &
	FromColor
««& /
(
««0 1
normalColor
««1 <
)
««< =
;
««= >
if
…… 
(
…… 
normalColorHSB
…… 
.
…… 
b
…… 
>
…… 
$num
…… 
)
…… 
highlightColor
   
*=
   
normalColor
   !
;
  ! "
else
ÀÀ 
highlightColor
ÃÃ 
.
ÃÃ 
a
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
;
ÃÃ 
originalHeight
ŒŒ 
=
ŒŒ 
thisRect
ŒŒ 
.
ŒŒ 
	sizeDelta
ŒŒ &
.
ŒŒ& '
y
ŒŒ' (
;
ŒŒ( )
originalPos
–– 
=
–– 
thisRect
–– 
.
–– 
anchoredPosition
–– *
.
––* +
y
––+ ,
;
––, -
	listLayer
—— 
.
—— 
	SetActive
—— 
(
—— 
false
—— 
)
—— 
;
—— 
listCanvasGroup
““ 
.
““ 
interactable
““ 
=
““  !
false
““" '
;
““' (
listCanvasGroup
”” 
.
”” 
blocksRaycasts
”” !
=
””" #
false
””$ )
;
””) *
listCanvasGroup
’’ 
.
’’ 
alpha
’’ 
=
’’ 
$num
’’ 
;
’’ 
	listLayer
◊◊ 
.
◊◊ 
GetComponent
◊◊ 
<
◊◊ 
Image
◊◊ 
>
◊◊  
(
◊◊  !
)
◊◊! "
.
◊◊" #
color
◊◊# (
=
◊◊) *
expandedListColor
◊◊+ <
;
◊◊< =
}
ÿÿ 
public
⁄⁄ 
void
⁄⁄	 

ExpandList
⁄⁄ 
(
⁄⁄ 
)
⁄⁄ 
{
€€ 
originalPos
‹‹ 
=
‹‹ 
thisRect
‹‹ 
.
‹‹ 
anchoredPosition
‹‹ *
.
‹‹* +
y
‹‹+ ,
;
‹‹, -
if
ﬁﬁ 
(
ﬁﬁ 

gameObject
ﬁﬁ 
.
ﬁﬁ 
GetComponent
ﬁﬁ 
<
ﬁﬁ 
ShadowConfig
ﬁﬁ +
>
ﬁﬁ+ ,
(
ﬁﬁ, -
)
ﬁﬁ- .
)
ﬁﬁ. /
{
ﬂﬂ 

hasShadows
‡‡ 
=
‡‡ 
true
‡‡ 
;
‡‡ 
if
·· 
(
·· 
!
·· 	
shadowConfig
··	 
)
·· 
shadowConfig
‚‚ 
=
‚‚ 

gameObject
‚‚ 
.
‚‚ 
GetComponent
‚‚ +
<
‚‚+ ,
ShadowConfig
‚‚, 8
>
‚‚8 9
(
‚‚9 :
)
‚‚: ;
;
‚‚; <
}
„„ 
else
‰‰ 
{
ÂÂ 

hasShadows
ÊÊ 
=
ÊÊ 
false
ÊÊ 
;
ÊÊ 
}
ÁÁ #
contractedShadowLevel
ÈÈ 
=
ÈÈ 
shadowConfig
ÈÈ '
.
ÈÈ' (
shadowNormalSize
ÈÈ( 8
;
ÈÈ8 9
if
ÎÎ 
(
ÎÎ 
!
ÎÎ 
rippleConfig
ÎÎ 
)
ÎÎ 
rippleConfig
ÏÏ 
=
ÏÏ 

gameObject
ÏÏ 
.
ÏÏ 
GetComponent
ÏÏ *
<
ÏÏ* +
RippleConfig
ÏÏ+ 7
>
ÏÏ7 8
(
ÏÏ9 :
)
ÏÏ: ;
;
ÏÏ; <
if
ÌÌ 
(
ÌÌ 
!
ÌÌ 

thisButton
ÌÌ 
)
ÌÌ 

thisButton
ÓÓ 
=
ÓÓ 

gameObject
ÓÓ 
.
ÓÓ 
GetComponent
ÓÓ (
<
ÓÓ( )
Button
ÓÓ) /
>
ÓÓ/ 0
(
ÓÓ1 2
)
ÓÓ2 3
;
ÓÓ3 4
shadowConfig
 
.
 
shadowNormalSize
  
=
! "%
expandedListShadowLevel
# :
;
: ;
shadowConfig
ÒÒ 
.
ÒÒ 
shadowActiveSize
ÒÒ  
=
ÒÒ! "%
expandedListShadowLevel
ÒÒ# :
;
ÒÒ: ;
rippleConfig
ÛÛ 
.
ÛÛ 
enabled
ÛÛ 
=
ÛÛ 
false
ÛÛ 
;
ÛÛ  

thisButton
ÙÙ 
.
ÙÙ 
interactable
ÙÙ 
=
ÙÙ 
false
ÙÙ "
;
ÙÙ" #
icon
ˆˆ 
.
ˆˆ 
enabled
ˆˆ 
=
ˆˆ 
false
ˆˆ 
;
ˆˆ 
selectedText
˜˜ 
.
˜˜ 
enabled
˜˜ 
=
˜˜ 
false
˜˜ 
;
˜˜  
currentColor
˘˘ 
=
˘˘ 
	thisImage
˘˘ 
.
˘˘ 
color
˘˘ !
;
˘˘! "
if
˚˚ 
(
˚˚ 
autoMaxItemHeight
˚˚ 
)
˚˚ 
{
¸¸ 
float
˝˝ 	
	tempFloat
˝˝
 
=
˝˝ 
(
˝˝ 
Screen
˝˝ 
.
˝˝ 
height
˝˝ $
/
˝˝% &
$num
˝˝' +
*
˝˝, -&
percentageOfScreenHeight
˝˝. F
/
˝˝G H
$num
˝˝I L
)
˝˝L M
;
˝˝M N
if
ÄÄ 
(
ÄÄ 
	tempFloat
ÄÄ 
>=
ÄÄ 
	listItems
ÄÄ 
.
ÄÄ 
Length
ÄÄ %
)
ÄÄ% &
{
ÅÅ 

listheight
ÇÇ 
=
ÇÇ 
(
ÇÇ 
	listItems
ÇÇ 
.
ÇÇ 
Length
ÇÇ #
*
ÇÇ$ %
$num
ÇÇ& )
)
ÇÇ) *
+
ÇÇ+ ,
$num
ÇÇ- 0
;
ÇÇ0 1
}
ÉÉ 
else
ÑÑ 
{
ÖÖ 

listheight
ÜÜ 
=
ÜÜ 
(
ÜÜ 
	tempFloat
ÜÜ 
*
ÜÜ 
$num
ÜÜ "
)
ÜÜ" #
-
ÜÜ$ %
$num
ÜÜ& (
;
ÜÜ( )
scrollbarEnabled
áá 
=
áá 
true
áá 
;
áá 
	scrollbar
àà 
.
àà 
enabled
àà 
=
àà 
true
àà 
;
àà "
scrollbarCanvasGroup
ââ 
.
ââ 
interactable
ââ &
=
ââ' (
true
ââ) -
;
ââ- ."
scrollbarCanvasGroup
ää 
.
ää 
blocksRaycasts
ää (
=
ää) *
true
ää+ /
;
ää/ 0
}
ãã 
}
åå 
else
çç 
if
çç 

(
çç !
manualMaxItemHeight
çç 
>
çç  !
$num
çç" #
)
çç# $
{
éé 

listheight
êê 
=
êê 
(
êê !
manualMaxItemHeight
êê %
*
êê& '
$num
êê( +
)
êê+ ,
-
êê- .
$num
êê/ 1
;
êê1 2
scrollbarEnabled
ëë 
=
ëë 
true
ëë 
;
ëë 
	scrollbar
íí 
.
íí 
enabled
íí 
=
íí 
true
íí 
;
íí "
scrollbarCanvasGroup
ìì 
.
ìì 
interactable
ìì %
=
ìì& '
true
ìì( ,
;
ìì, -"
scrollbarCanvasGroup
îî 
.
îî 
blocksRaycasts
îî '
=
îî( )
true
îî* .
;
îî. /
}
ïï 
else
ññ 
{
óó 

listheight
òò 
=
òò 
(
òò 
	listItems
òò 
.
òò 
Length
òò "
*
òò# $
$num
òò% (
)
òò( )
+
òò* +
$num
òò, /
;
òò/ 0
}
ôô 
listLayerHeight
õõ 
=
õõ 
(
õõ 
	listItems
õõ 
.
õõ  
Length
õõ  &
*
õõ' (
$num
õõ) ,
)
õõ, -
+
õõ. /
$num
õõ0 3
;
õõ3 4
if
ùù 
(
ùù 
expandDirection
ùù 
==
ùù 
PopDirection
ùù &
.
ùù& '
Popup
ùù' ,
)
ùù, -
expandedPos
ûû 
=
ûû 
originalPos
ûû 
+
ûû 
(
ûû  !

listheight
ûû! +
/
ûû, -
$num
ûû. 0
)
ûû0 1
-
ûû2 3
$num
ûû4 7
;
ûû7 8
else
üü 
if
üü 

(
üü 
expandDirection
üü 
==
üü 
PopDirection
üü +
.
üü+ ,
Popdown
üü, 3
)
üü3 4
expandedPos
†† 
=
†† 
originalPos
†† 
-
†† 
(
††  !

listheight
††! +
/
††, -
$num
††. 0
)
††0 1
+
††2 3
$num
††4 7
;
††7 8
else
°° 
expandedPos
¢¢ 
=
¢¢ 
originalPos
¢¢ 
;
¢¢ 
	listLayer
§§ 
.
§§ 
	SetActive
§§ 
(
§§ 
true
§§ 
)
§§ 
;
§§ 
listCanvasGroup
•• 
.
•• 
interactable
•• 
=
••  !
true
••" &
;
••& '
listCanvasGroup
¶¶ 
.
¶¶ 
blocksRaycasts
¶¶ !
=
¶¶" #
true
¶¶$ (
;
¶¶( )
cancelLayer
ßß 
.
ßß 
enabled
ßß 
=
ßß 
true
ßß 
;
ßß 
icon
®® 
.
®® 
enabled
®® 
=
®® 
false
®® 
;
®® 
selectedText
©© 
.
©© 
enabled
©© 
=
©© 
true
©© 
;
©© 
listCanvasAlpha
´´ 
=
´´ 
listCanvasGroup
´´ $
.
´´$ %
alpha
´´% *
;
´´* +
animStartTime
≠≠ 
=
≠≠ 
Time
≠≠ 
.
≠≠ "
realtimeSinceStartup
≠≠ ,
;
≠≠, -
state
ÆÆ 
=
ÆÆ	 

$num
ÆÆ 
;
ÆÆ 
}
ØØ 
public
±± 
void
±±	 
ContractList
±± 
(
±± 
)
±± 
{
≤≤ 
icon
≥≥ 
.
≥≥ 
enabled
≥≥ 
=
≥≥ 
true
≥≥ 
;
≥≥ 
if
µµ 
(
µµ 

hasShadows
µµ 
)
µµ 
{
∂∂ 
shadowConfig
∑∑ 
.
∑∑ 
	isEnabled
∑∑ 
=
∑∑ 
true
∑∑ !
;
∑∑! "
shadowConfig
∏∏ 
.
∏∏ 

SetShadows
∏∏ 
(
∏∏ #
contractedShadowLevel
∏∏ 1
)
∏∏1 2
;
∏∏2 3
}
ππ 
currentColor
ªª 
=
ªª 
	thisImage
ªª 
.
ªª 
color
ªª !
;
ªª! "
rippleConfig
ΩΩ 
.
ΩΩ 
enabled
ΩΩ 
=
ΩΩ 
true
ΩΩ 
;
ΩΩ 

thisButton
ææ 
.
ææ 
interactable
ææ 
=
ææ 
true
ææ !
;
ææ! "
shadowConfig
¿¿ 
.
¿¿ 
shadowNormalSize
¿¿  
=
¿¿! "$
contractedNormalShadow
¿¿# 9
;
¿¿9 :
shadowConfig
¡¡ 
.
¡¡ 
shadowActiveSize
¡¡  
=
¡¡! "#
contractedHoverShadow
¡¡# 8
;
¡¡8 9
listCanvasGroup
√√ 
.
√√ 
interactable
√√ 
=
√√  !
false
√√" '
;
√√' (
listCanvasGroup
ƒƒ 
.
ƒƒ 
blocksRaycasts
ƒƒ !
=
ƒƒ" #
false
ƒƒ$ )
;
ƒƒ) *
	scrollbar
≈≈ 
.
≈≈ 
enabled
≈≈ 
=
≈≈ 
false
≈≈ 
;
≈≈ "
scrollbarCanvasGroup
∆∆ 
.
∆∆ 
interactable
∆∆ $
=
∆∆% &
false
∆∆' ,
;
∆∆, -"
scrollbarCanvasGroup
«« 
.
«« 
blocksRaycasts
«« &
=
««' (
false
««) .
;
««. /
cancelLayer
…… 
.
…… 
enabled
…… 
=
…… 
false
…… 
;
…… 

listheight
ÀÀ 
=
ÀÀ 
thisRect
ÀÀ 
.
ÀÀ 
	sizeDelta
ÀÀ "
.
ÀÀ" #
y
ÀÀ# $
;
ÀÀ$ %
listCanvasAlpha
ÃÃ 
=
ÃÃ 
listCanvasGroup
ÃÃ $
.
ÃÃ$ %
alpha
ÃÃ% *
;
ÃÃ* +
animStartTime
ŒŒ 
=
ŒŒ 
Time
ŒŒ 
.
ŒŒ "
realtimeSinceStartup
ŒŒ ,
;
ŒŒ, -
state
œœ 
=
œœ	 

$num
œœ 
;
œœ 
}
–– 
void
““ 
Update
““ 
(
““ 
)
““ 
{
”” 
animDeltaTime
‘‘ 
=
‘‘ 
Time
‘‘ 
.
‘‘ "
realtimeSinceStartup
‘‘ ,
-
‘‘- .
animStartTime
‘‘/ <
;
‘‘< =
if
÷÷ 
(
÷÷ 
state
÷÷ 
==
÷÷ 
$num
÷÷ 
)
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
animDeltaTime
ÿÿ 
<=
ÿÿ 
animationDuration
ÿÿ *
)
ÿÿ* +
{
ŸŸ 
Color
€€ 

	tempColor
€€ 
=
€€ 
selectedText
€€ #
.
€€# $
color
€€$ )
;
€€) *
	tempColor
‹‹ 
.
‹‹ 
a
‹‹ 
=
‹‹ 
Anim
‹‹ 
.
‹‹ 
Quint
‹‹ 
.
‹‹ 
Out
‹‹ !
(
‹‹" #
$num
‹‹# %
,
‹‹% &
$num
‹‹' )
,
‹‹) *
animDeltaTime
‹‹+ 8
,
‹‹8 9
animationDuration
‹‹: K
*
‹‹L M
$num
‹‹N R
)
‹‹R S
;
‹‹S T
selectedText
›› 
.
›› 
color
›› 
=
›› 
	tempColor
›› #
;
››# $
	tempColor
‡‡ 
=
‡‡ 
icon
‡‡ 
.
‡‡ 
color
‡‡ 
;
‡‡ 
	tempColor
·· 
.
·· 
a
·· 
=
·· 
Anim
·· 
.
·· 
Quint
·· 
.
·· 
Out
·· !
(
··" #
$num
··# '
,
··' (
$num
··) +
,
··+ ,
animDeltaTime
··- :
,
··: ;
animationDuration
··< M
*
··N O
$num
··P T
)
··T U
;
··U V
icon
‚‚ 	
.
‚‚	 

color
‚‚
 
=
‚‚ 
	tempColor
‚‚ 
;
‚‚ 
Vector2
ÂÂ 
tempVec2
ÂÂ 
=
ÂÂ 
thisRect
ÂÂ  
.
ÂÂ  !
	sizeDelta
ÂÂ! *
;
ÂÂ* +
tempVec2
ÊÊ 
.
ÊÊ 
y
ÊÊ 
=
ÊÊ 
Anim
ÊÊ 
.
ÊÊ 
Quint
ÊÊ 
.
ÊÊ 
Out
ÊÊ  
(
ÊÊ  !
originalHeight
ÊÊ! /
,
ÊÊ/ 0

listheight
ÊÊ1 ;
,
ÊÊ; <
animDeltaTime
ÊÊ= J
,
ÊÊJ K
animationDuration
ÊÊL ]
)
ÊÊ] ^
;
ÊÊ^ _
thisRect
ÁÁ 
.
ÁÁ 
	sizeDelta
ÁÁ 
=
ÁÁ 
tempVec2
ÁÁ "
;
ÁÁ" #
tempVec2
ÈÈ 
=
ÈÈ 
	listLayer
ÈÈ 
.
ÈÈ 
GetComponent
ÈÈ &
<
ÈÈ& '
RectTransform
ÈÈ' 4
>
ÈÈ4 5
(
ÈÈ5 6
)
ÈÈ6 7
.
ÈÈ7 8
	sizeDelta
ÈÈ8 A
;
ÈÈA B
tempVec2
ÍÍ 
.
ÍÍ 
y
ÍÍ 
=
ÍÍ 
Anim
ÍÍ 
.
ÍÍ 
Quint
ÍÍ 
.
ÍÍ 
Out
ÍÍ  
(
ÍÍ  !
originalHeight
ÍÍ! /
,
ÍÍ/ 0
listLayerHeight
ÍÍ1 @
,
ÍÍ@ A
animDeltaTime
ÍÍB O
,
ÍÍO P
animationDuration
ÍÍQ b
)
ÍÍb c
;
ÍÍc d
	listLayer
ÎÎ 
.
ÎÎ 
GetComponent
ÎÎ 
<
ÎÎ 
RectTransform
ÎÎ )
>
ÎÎ) *
(
ÎÎ* +
)
ÎÎ+ ,
.
ÎÎ, -
	sizeDelta
ÎÎ- 6
=
ÎÎ7 8
tempVec2
ÎÎ9 A
;
ÎÎA B
Vector3
ÓÓ 
tempVec3
ÓÓ 
=
ÓÓ 
thisRect
ÓÓ  
.
ÓÓ  !
anchoredPosition
ÓÓ! 1
;
ÓÓ1 2
tempVec3
ÔÔ 
.
ÔÔ 
y
ÔÔ 
=
ÔÔ 
Anim
ÔÔ 
.
ÔÔ 
Quint
ÔÔ 
.
ÔÔ 
Out
ÔÔ  
(
ÔÔ  !
originalPos
ÔÔ! ,
,
ÔÔ, -
expandedPos
ÔÔ. 9
,
ÔÔ9 :
animDeltaTime
ÔÔ; H
,
ÔÔH I
animationDuration
ÔÔJ [
)
ÔÔ[ \
;
ÔÔ\ ]
thisRect
 
.
 
anchoredPosition
 
=
  
tempVec3
! )
;
) *
	thisImage
ÛÛ 
.
ÛÛ 
color
ÛÛ 
=
ÛÛ 
Anim
ÛÛ 
.
ÛÛ 
Quint
ÛÛ !
.
ÛÛ! "
Out
ÛÛ" %
(
ÛÛ% &
currentColor
ÛÛ& 2
,
ÛÛ2 3
expandedListColor
ÛÛ4 E
,
ÛÛE F
animDeltaTime
ÛÛG T
,
ÛÛT U
animationDuration
ÛÛV g
)
ÛÛg h
;
ÛÛh i
listCanvasGroup
ˆˆ 
.
ˆˆ 
alpha
ˆˆ 
=
ˆˆ 
Anim
ˆˆ !
.
ˆˆ! "
Quint
ˆˆ" '
.
ˆˆ' (
In
ˆˆ( *
(
ˆˆ+ ,
listCanvasAlpha
ˆˆ, ;
,
ˆˆ; <
$num
ˆˆ= ?
,
ˆˆ? @
animDeltaTime
ˆˆA N
,
ˆˆN O
animationDuration
ˆˆP a
)
ˆˆa b
;
ˆˆb c
if
˘˘ 
(
˘˘ 	
scrollbarEnabled
˘˘	 
)
˘˘ 
{
˙˙ 
	tempColor
˚˚ 
=
˚˚ 
	scrollbar
˚˚ 
.
˚˚ 
color
˚˚ !
;
˚˚! "
	tempColor
¸¸ 
.
¸¸ 
a
¸¸ 
=
¸¸ 
Anim
¸¸ 
.
¸¸ 
Quint
¸¸ 
.
¸¸ 
In
¸¸ !
(
¸¸" #
$num
¸¸# %
,
¸¸% &
$num
¸¸' +
,
¸¸+ ,
animDeltaTime
¸¸- :
,
¸¸: ;
animationDuration
¸¸< M
)
¸¸M N
;
¸¸N O
	scrollbar
˝˝ 
.
˝˝ 
color
˝˝ 
=
˝˝ 
	tempColor
˝˝ !
;
˝˝! "
}
˛˛ 
else
ˇˇ 	
{
ÄÄ 
	scrollbar
ÅÅ 
.
ÅÅ 
color
ÅÅ 
=
ÅÅ 
Color
ÅÅ 
.
ÅÅ 
clear
ÅÅ #
;
ÅÅ# $
}
ÇÇ 
if
ÖÖ 
(
ÖÖ 	
textLine
ÖÖ	 
)
ÖÖ 
{
ÜÜ 
	tempColor
áá 
=
áá 
textLine
áá 
.
áá 
color
áá  
;
áá  !
	tempColor
àà 
.
àà 
a
àà 
=
àà 
Anim
àà 
.
àà 
Quint
àà 
.
àà 
Out
àà "
(
àà" #
$num
àà# %
,
àà% &
$num
àà' )
,
àà) *
animDeltaTime
àà+ 8
,
àà8 9
animationDuration
àà: K
/
ààL M
$num
ààN P
)
ààP Q
;
ààQ R
textLine
ââ 
.
ââ 
color
ââ 
=
ââ 
	tempColor
ââ  
;
ââ  !
}
ää 
}
ãã 
else
åå 
{
çç 
state
éé 

=
éé 
$num
éé 
;
éé 
}
èè 
}
êê 
else
ëë 
if
ëë 

(
ëë 
state
ëë 
==
ëë 
$num
ëë 
)
ëë 
{
íí 
if
ìì 
(
ìì 
animDeltaTime
ìì 
<=
ìì 
animationDuration
ìì *
)
ìì* +
{
îî 
Color
ññ 

	tempColor
ññ 
=
ññ 
selectedText
ññ #
.
ññ# $
color
ññ$ )
;
ññ) *
	tempColor
óó 
.
óó 
a
óó 
=
óó 
Anim
óó 
.
óó 
Quint
óó 
.
óó 
In
óó  
(
óó! "
$num
óó" $
,
óó$ %
$num
óó& (
,
óó( )
animDeltaTime
óó* 7
,
óó7 8
animationDuration
óó9 J
)
óóJ K
;
óóK L
selectedText
òò 
.
òò 
color
òò 
=
òò 
	tempColor
òò #
;
òò# $
	tempColor
õõ 
=
õõ 
icon
õõ 
.
õõ 
color
õõ 
;
õõ 
	tempColor
úú 
.
úú 
a
úú 
=
úú 
Anim
úú 
.
úú 
Quint
úú 
.
úú 
In
úú  
(
úú! "
$num
úú" $
,
úú$ %
$num
úú& *
,
úú* +
animDeltaTime
úú, 9
,
úú9 :
animationDuration
úú; L
)
úúL M
;
úúM N
icon
ùù 	
.
ùù	 

color
ùù
 
=
ùù 
	tempColor
ùù 
;
ùù 
Vector2
†† 
tempVec2
†† 
=
†† 
thisRect
††  
.
††  !
	sizeDelta
††! *
;
††* +
tempVec2
°° 
.
°° 
y
°° 
=
°° 
Anim
°° 
.
°° 
Quint
°° 
.
°° 
InOut
°° "
(
°°" #

listheight
°°# -
,
°°- .
originalHeight
°°/ =
,
°°= >
animDeltaTime
°°? L
,
°°L M
animationDuration
°°N _
)
°°_ `
;
°°` a
thisRect
¢¢ 
.
¢¢ 
	sizeDelta
¢¢ 
=
¢¢ 
tempVec2
¢¢ "
;
¢¢" #
tempVec2
§§ 
=
§§ 
	listLayer
§§ 
.
§§ 
GetComponent
§§ &
<
§§& '
RectTransform
§§' 4
>
§§4 5
(
§§5 6
)
§§6 7
.
§§7 8
	sizeDelta
§§8 A
;
§§A B
tempVec2
•• 
.
•• 
y
•• 
=
•• 
Anim
•• 
.
•• 
Quint
•• 
.
•• 
InOut
•• "
(
••" #
listLayerHeight
••# 2
,
••2 3
originalHeight
••4 B
,
••B C
animDeltaTime
••D Q
,
••Q R
animationDuration
••S d
)
••d e
;
••e f
	listLayer
¶¶ 
.
¶¶ 
GetComponent
¶¶ 
<
¶¶ 
RectTransform
¶¶ )
>
¶¶) *
(
¶¶* +
)
¶¶+ ,
.
¶¶, -
	sizeDelta
¶¶- 6
=
¶¶7 8
tempVec2
¶¶9 A
;
¶¶A B
Vector3
©© 
tempVec3
©© $
=
©©% &
thisRect
©©' /
.
©©/ 0
anchoredPosition
©©0 @
;
©©@ A
tempVec3
™™ 
.
™™ 
y
™™ 
=
™™ 
Anim
™™ 
.
™™ 
Quint
™™ 
.
™™ 
InOut
™™ "
(
™™" #
expandedPos
™™# .
,
™™. /
originalPos
™™0 ;
,
™™; <
animDeltaTime
™™= J
,
™™J K
animationDuration
™™L ]
)
™™] ^
;
™™^ _
thisRect
´´ 
.
´´ 
anchoredPosition
´´ 
=
´´  
tempVec3
´´! )
;
´´) *
	thisImage
ÆÆ 
.
ÆÆ 
color
ÆÆ 
=
ÆÆ 
Anim
ÆÆ 
.
ÆÆ 
Quint
ÆÆ !
.
ÆÆ! "
In
ÆÆ" $
(
ÆÆ$ %
currentColor
ÆÆ% 1
,
ÆÆ1 2!
contractedListColor
ÆÆ3 F
,
ÆÆF G
animDeltaTime
ÆÆH U
,
ÆÆU V
animationDuration
ÆÆW h
)
ÆÆh i
;
ÆÆi j
listCanvasGroup
±± 
.
±± 
alpha
±± 
=
±± 
Anim
±± !
.
±±! "
Quint
±±" '
.
±±' (
Out
±±( +
(
±±+ ,
listCanvasAlpha
±±, ;
,
±±; <
$num
±±= ?
,
±±? @
animDeltaTime
±±A N
,
±±N O
animationDuration
±±P a
*
±±b c
$num
±±d h
)
±±h i
;
±±i j
if
¥¥ 
(
¥¥ 	
scrollbarEnabled
¥¥	 
)
¥¥ 
{
µµ 
	tempColor
∂∂ 
=
∂∂ 
	scrollbar
∂∂ 
.
∂∂ 
color
∂∂ !
;
∂∂! "
	tempColor
∑∑ 
.
∑∑ 
a
∑∑ 
=
∑∑ 
Anim
∑∑ 
.
∑∑ 
Quint
∑∑ 
.
∑∑ 
Out
∑∑ "
(
∑∑# $
$num
∑∑$ (
,
∑∑( )
$num
∑∑* ,
,
∑∑, -
animDeltaTime
∑∑. ;
,
∑∑; <
animationDuration
∑∑= N
*
∑∑O P
$num
∑∑Q U
)
∑∑U V
;
∑∑V W
	scrollbar
∏∏ 
.
∏∏ 
color
∏∏ 
=
∏∏ 
	tempColor
∏∏ !
;
∏∏! "
}
ππ 
else
∫∫ 	
{
ªª 
	scrollbar
ºº 
.
ºº 
color
ºº 
=
ºº 
Color
ºº 
.
ºº 
clear
ºº #
;
ºº# $
}
ΩΩ 
if
¿¿ 
(
¿¿ 	
textLine
¿¿	 
)
¿¿ 
{
¡¡ 
	tempColor
¬¬ 
=
¬¬ 
textLine
¬¬ 
.
¬¬ 
color
¬¬  
;
¬¬  !
	tempColor
√√ 
.
√√ 
a
√√ 
=
√√ 
Anim
√√ 
.
√√ 
Quint
√√ 
.
√√ 
In
√√ !
(
√√! "
$num
√√" $
,
√√$ %
textLineAlpha
√√& 3
,
√√3 4
animDeltaTime
√√5 B
,
√√B C
animationDuration
√√D U
)
√√U V
;
√√V W
textLine
ƒƒ 
.
ƒƒ 
color
ƒƒ 
=
ƒƒ 
	tempColor
ƒƒ  
;
ƒƒ  !
}
≈≈ 
}
∆∆ 
else
«« 
{
»» 
	listLayer
…… 
.
…… 
	SetActive
…… 
(
…… 
false
…… 
)
……  
;
……  !
listCanvasGroup
   
.
   
alpha
   
=
   
$num
   
;
    
listCanvasGroup
ÃÃ 
.
ÃÃ 
interactable
ÃÃ !
=
ÃÃ" #
false
ÃÃ$ )
;
ÃÃ) *
listCanvasGroup
ÕÕ 
.
ÕÕ 
blocksRaycasts
ÕÕ #
=
ÕÕ$ %
false
ÕÕ& +
;
ÕÕ+ ,
	scrollbar
ŒŒ 
.
ŒŒ 
enabled
ŒŒ 
=
ŒŒ 
false
ŒŒ 
;
ŒŒ "
scrollbarCanvasGroup
œœ 
.
œœ 
interactable
œœ &
=
œœ' (
false
œœ) .
;
œœ. /"
scrollbarCanvasGroup
–– 
.
–– 
blocksRaycasts
–– (
=
––) *
false
––+ 0
;
––0 1
state
““ 

=
““ 
$num
““ 
;
““ 
}
”” 
}
‘‘ 
}
’’ 
public
◊◊ 
void
◊◊	 
Select
◊◊ 
(
◊◊ 
int
◊◊ 
selectionId
◊◊ %
)
◊◊% &
{
ÿÿ 
if
ŸŸ 
(
ŸŸ 
currentSelection
ŸŸ 
>=
ŸŸ 
$num
ŸŸ 
)
ŸŸ 
listItemObjects
⁄⁄ 
[
⁄⁄ 
currentSelection
⁄⁄ $
]
⁄⁄$ %
.
⁄⁄% &
GetComponent
⁄⁄& 2
<
⁄⁄2 3
Image
⁄⁄3 8
>
⁄⁄8 9
(
⁄⁄9 :
)
⁄⁄: ;
.
⁄⁄; <
color
⁄⁄< A
=
⁄⁄B C
normalColor
⁄⁄D O
;
⁄⁄O P
currentSelection
‹‹ 
=
‹‹ 
selectionId
‹‹ !
;
‹‹! "
selectedText
›› 
.
›› 
text
›› 
=
›› 
	listItems
››  
[
››  !
selectionId
››! ,
]
››, -
;
››- .
ContractList
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ 
;
ﬁﬁ 
if
‡‡ 
(
‡‡ 

ItemPicked
‡‡ 
!=
‡‡ 
null
‡‡ 
)
‡‡ 

ItemPicked
·· 
(
·· 
selectionId
·· 
)
·· 
;
·· 
if
„„ 
(
„„ #
highlightLastSelected
„„ 
)
„„ 
listItemObjects
‰‰ 
[
‰‰ 
selectionId
‰‰ 
]
‰‰  
.
‰‰  !
GetComponent
‰‰! -
<
‰‰- .
Image
‰‰. 3
>
‰‰3 4
(
‰‰4 5
)
‰‰5 6
.
‰‰6 7
color
‰‰7 <
=
‰‰= >
highlightColor
‰‰? M
;
‰‰M N
}
ÂÂ 
}
ÊÊ 
}ÁÁ ∆π
AF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ShadowGen.cs
	namespace 	

MaterialUI
 
{ 
[ 
@RequireComponent 
( 
typeof 
( 
Image #
)# $
)$ %
]% &
[ 
ExecuteInEditMode 
( 
) 
] 
public 

class 
	ShadowGen 
: 
MonoBehaviour *
{ 
public 
Image 
sourceImage  
;  !
[ 	
Range	 
( 
$num 
, 
$num 
) 
] 
public   
int   
	blurRange   
=   
$num    
;    !
public## 
int## 
blurIterations## !
=##" #
$num##$ %
;##% &
public&& 
Vector3&& "
shadowRelativePosition&& -
;&&- .
public'' 
Vector2'' 
shadowRelativeSize'' )
;'') *
public(( 
float(( 
shadowAlpha((  
=((! "
$num((# $
;(($ %
float++ 
darkenShadow++ 
=++ 
$num++ "
;++" #
int.. 
imagePadding.. 
=.. 
$num.. 
;.. 
[11 	
HideInInspector11	 
]11 
public22 
Sprite22 
sourceSprite22 "
;22" #
[33 	
HideInInspector33	 
]33 
public44 
	Texture2D44 
	sourceTex44 "
;44" #
[55 	
HideInInspector55	 
]55 
public66 
	Texture2D66 
destTex66  
;66  !
[77 	
HideInInspector77	 
]77 
public88 
Sprite88 

destSprite88  
;88  !
[99 	
HideInInspector99	 
]99 
public:: 
Image:: 
	destImage:: 
;:: 
string== 
textureFileName== 
;== 
void?? 
Start?? 
(?? 
)?? 
{@@ 	
ifBB 
(BB 

destSpriteBB 
)BB 
{CC 
	destImageDD 
.DD 
spriteDD  
=DD! "

destSpriteDD# -
;DD- .
}EE 
}FF 	
publicHH 
voidHH #
GenerateShadowFromImageHH +
(HH+ ,
)HH, -
{II 	
	destImageKK 
=KK 

gameObjectKK "
.KK" #
GetComponentKK# /
<KK/ 0
ImageKK0 5
>KK5 6
(KK6 7
)KK7 8
;KK8 9
sourceSpriteLL 
=LL 
sourceImageLL &
.LL& '
spriteLL' -
;LL- .
	sourceTexMM 
=MM 
sourceSpriteMM $
.MM$ %
textureMM% ,
;MM, -
ifPP 
(PP 
!PP 
	DirectoryPP 
.PP 
ExistsPP !
(PP! "
$strPP" F
)PPF G
)PPG H
{QQ 
	DirectoryRR 
.RR 
CreateDirectoryRR )
(RR) *
$strRR* N
)RRN O
;RRO P
}SS 
ifVV 
(VV 
sourceImageVV 
)VV 
{WW 
ifYY 
(YY 
!YY 
	destImageYY 
.YY 
spriteYY %
)YY% &
{ZZ 
if[[ 
([[ 
destTex[[ 
)[[  
{\\ 
DestroyImmediate]] (
(]]( )
destTex]]) 0
)]]0 1
;]]1 2
}^^ 
}__ 
ifbb 
(bb 
	destImagebb 
&&bb  

destSpritebb! +
&&bb, .
destTexbb/ 6
)bb6 7
{cc 
ifdd 
(dd 
AssetDatabasedd %
.dd% &
LoadAssetAtPathdd& 5
(dd5 6
AssetDatabasedd6 C
.ddC D
GetAssetPathddD P
(ddP Q

destSpriteddQ [
)dd[ \
,dd\ ]
typeofdd^ d
(ddd e
Spritedde k
)ddk l
)ddl m
)ddm n
{ee 
textureFileNameff '
=ff( )
AssetDatabaseff* 7
.ff7 8
GetAssetPathff8 D
(ffD E

destSpriteffE O
)ffO P
;ffP Q
Debuggg 
.gg 
Loggg !
(gg! "
$strgg" 2
+gg3 4
textureFileNamegg5 D
)ggD E
;ggE F
}hh 
elseii 
{jj 
Debugkk 
.kk 
Logkk !
(kk! "
$strkk" a
)kka b
;kkb c
}ll 
}mm 
elsenn 
{oo 
textureFileNamepp #
=pp$ %
stringpp& ,
.pp, -
Formatpp- 3
(pp3 4
$strpp4 a
,ppa b
Systemppc i
.ppi j
Guidppj n
.ppn o
NewGuidppo v
(ppv w
)ppw x
)ppx y
;ppy z
Debugqq 
.qq 
Logqq 
(qq 
$strqq *
+qq+ ,
textureFileNameqq- <
)qq< =
;qq= >
}rr 
Debuguu 
.uu 
Loguu 
(uu 
$struu 5
)uu5 6
;uu6 7
Setupvv 
(vv 
)vv 
;vv 
Debugww 
.ww 
Logww 
(ww 
$strww 5
)ww5 6
;ww6 7
Darkenxx 

(xx
 
)xx 
;xx 
Bluryy 
(yy 	
)yy	 

;yy
 
ApplyChangeszz 
(zz 
)zz 
;zz 
Debug{{ 
.{{ 
Log{{ 
({{ 
$str{{ !
){{! "
;{{" #
}|| 
else}} 
{~~ 
Debug 
. 
Log 
( 
$str K
)K L
;L M
}
ÄÄ 
}
ÅÅ 	
void
ÑÑ 
Setup
ÑÑ 
(
ÑÑ 
)
ÑÑ 
{
ÖÖ 	
int
áá 
widthWithPadding
áá  
=
áá! "
	sourceTex
áá# ,
.
áá, -
width
áá- 2
+
áá3 4
imagePadding
áá5 A
*
ááB C
$num
ááD E
;
ááE F
int
àà 
heightWithPadding
àà !
=
àà" #
	sourceTex
àà$ -
.
àà- .
height
àà. 4
+
àà5 6
imagePadding
àà7 C
*
ààD E
$num
ààF G
;
ààG H
destTex
ää 
=
ää 
new
ää 
	Texture2D
ää #
(
ää# $
widthWithPadding
ää$ 4
,
ää4 5
heightWithPadding
ää6 G
,
ääG H
TextureFormat
ääI V
.
ääV W
RGBA32
ääW ]
,
ää] ^
false
ää_ d
)
ääd e
;
ääe f
destTex
ãã 
.
ãã 

filterMode
ãã 
=
ãã  

FilterMode
ãã! +
.
ãã+ ,
	Trilinear
ãã, 5
;
ãã5 6
destTex
åå 
.
åå 
wrapMode
åå 
=
åå 
TextureWrapMode
åå .
.
åå. /
Clamp
åå/ 4
;
åå4 5
int
èè 
yCounter
èè 
=
èè 
$num
èè 
;
èè 
int
êê 
xCounter
êê 
=
êê 
$num
êê 
;
êê 
Color
ëë 
pixCol
ëë 
=
ëë 
new
ëë 
Color
ëë $
(
ëë$ %
$num
ëë% &
,
ëë& '
$num
ëë( )
,
ëë) *
$num
ëë+ ,
,
ëë, -
$num
ëë. /
)
ëë/ 0
;
ëë0 1
while
íí 
(
íí	 

xCounter
íí
 
<
íí 
destTex
íí 
.
íí 
width
íí "
)
íí" #
{
ìì 
while
îî 	
(
îî
 
yCounter
îî 
<
îî 
destTex
îî 
.
îî 
height
îî $
)
îî$ %
{
ïï 
destTex
ññ 
.
ññ 
SetPixel
ññ 
(
ññ 
xCounter
ññ 
,
ññ 
yCounter
ññ  (
,
ññ( )
pixCol
ññ* 0
)
ññ0 1
;
ññ1 2
yCounter
óó 
++
óó 
;
óó 
}
òò 
xCounter
ôô 
++
ôô 
;
ôô 
yCounter
öö 
=
öö 
$num
öö 
;
öö 
}
õõ 
destTex
úú 
.
úú 
Apply
úú 
(
úú 
)
úú 
;
úú 
}
ùù 	
void
†† 
Darken
†† 
(
†† 
)
†† 
{
°° 	
int
££ 
yCounter
££ 
=
££ 
$num
££ 
;
££ 
int
§§ 
xCounter
§§ 
=
§§ 
$num
§§ 
;
§§ 
Color
•• 
pixCol
•• 
=
•• 
new
•• 
Color
•• $
(
••$ %
$num
••% &
,
••& '
$num
••( )
,
••) *
$num
••+ ,
,
••, -
$num
••. /
)
••/ 0
;
••0 1
while
ßß 
(
ßß 
xCounter
ßß 
<
ßß 
	sourceTex
ßß '
.
ßß' (
width
ßß( -
)
ßß- .
{
®® 
while
©© 
(
©© 
yCounter
©© 
<
©©  !
	sourceTex
©©" +
.
©©+ ,
height
©©, 2
)
©©2 3
{
™™ 
pixCol
´´ 
.
´´ 
a
´´ 
=
´´ 
	sourceTex
´´ (
.
´´( )
GetPixel
´´) 1
(
´´1 2
xCounter
´´2 :
,
´´: ;
yCounter
´´< D
)
´´D E
.
´´E F
a
´´F G
;
´´G H
destTex
¨¨ 
.
¨¨ 
SetPixel
¨¨ $
(
¨¨$ %
xCounter
¨¨% -
+
¨¨. /
imagePadding
¨¨0 <
,
¨¨< =
yCounter
¨¨> F
+
¨¨G H
imagePadding
¨¨I U
,
¨¨U V
pixCol
¨¨W ]
)
¨¨] ^
;
¨¨^ _
yCounter
≠≠ 
++
≠≠ 
;
≠≠ 
}
ÆÆ 
xCounter
∞∞ 
++
∞∞ 
;
∞∞ 
yCounter
±± 
=
±± 
$num
±± 
;
±± 
}
≤≤ 
destTex
≥≥ 
.
≥≥ 
Apply
≥≥ 
(
≥≥ 
)
≥≥ 
;
≥≥ 
}
¥¥ 	
void
∂∂ 
Blur
∂∂ 
(
∂∂ 
)
∂∂ 
{
∑∑ 	
int
ππ 
i
ππ 
=
ππ 
$num
ππ 
;
ππ 
int
∫∫ 
xCounter
∫∫ 
=
∫∫ 
$num
∫∫ 
;
∫∫ 
int
ªª 
yCounter
ªª 
=
ªª 
$num
ªª 
;
ªª 
Color
ºº 
pixCol
ºº 
=
ºº 
new
ºº 
Color
ºº $
(
ºº$ %
$num
ºº% &
,
ºº& '
$num
ºº( )
,
ºº) *
$num
ºº+ ,
,
ºº, -
$num
ºº. /
)
ºº/ 0
;
ºº0 1
while
ææ 
(
ææ 
i
ææ 
<
ææ 
blurIterations
ææ %
)
ææ% &
{
øø 
while
¿¿ 
(
¿¿ 
xCounter
¿¿ 
<
¿¿  !
destTex
¿¿" )
.
¿¿) *
width
¿¿* /
)
¿¿/ 0
{
¡¡ 
while
¬¬ 
(
¬¬ 
yCounter
¬¬ #
<
¬¬$ %
destTex
¬¬& -
.
¬¬- .
height
¬¬. 4
)
¬¬4 5
{
√√ 
if
ƒƒ 
(
ƒƒ 
	blurRange
ƒƒ %
==
ƒƒ& (
$num
ƒƒ) *
)
ƒƒ* +
{
≈≈ 
pixCol
∆∆ "
.
∆∆" #
a
∆∆# $
=
∆∆% &
destTex
∆∆' .
.
∆∆. /
GetPixel
∆∆/ 7
(
∆∆7 8
xCounter
∆∆8 @
,
∆∆@ A
yCounter
∆∆B J
-
∆∆K L
$num
∆∆M N
)
∆∆N O
.
∆∆O P
a
∆∆P Q
/
∆∆R S
$num
∆∆T U
+
∆∆V W
destTex
∆∆X _
.
∆∆_ `
GetPixel
∆∆` h
(
∆∆h i
xCounter
∆∆i q
,
∆∆q r
yCounter
∆∆s {
)
∆∆{ |
.
∆∆| }
a
∆∆} ~
/∆∆ Ä
$num∆∆Å Ç
+∆∆É Ñ
destTex∆∆Ö å
.∆∆å ç
GetPixel∆∆ç ï
(∆∆ï ñ
xCounter∆∆ñ û
,∆∆û ü
yCounter∆∆† ®
+∆∆© ™
$num∆∆´ ¨
)∆∆¨ ≠
.∆∆≠ Æ
a∆∆Æ Ø
/∆∆∞ ±
$num∆∆≤ ≥
;∆∆≥ ¥
pixCol
«« "
.
««" #
r
««# $
=
««% &
$num
««' (
;
««( )
pixCol
»» "
.
»»" #
g
»»# $
=
»»% &
$num
»»' (
;
»»( )
pixCol
…… "
.
……" #
b
……# $
=
……% &
$num
……' (
;
……( )
destTex
   #
.
  # $
SetPixel
  $ ,
(
  , -
xCounter
  - 5
,
  5 6
yCounter
  7 ?
,
  ? @
pixCol
  A G
/
  H I
(
  J K
darkenShadow
  K W
)
  W X
)
  X Y
;
  Y Z
}
ÀÀ 
else
ÃÃ 
if
ÃÃ 
(
ÃÃ  !
	blurRange
ÃÃ! *
==
ÃÃ+ -
$num
ÃÃ. /
)
ÃÃ/ 0
{
ÕÕ 
pixCol
ŒŒ "
=
ŒŒ# $
destTex
ŒŒ% ,
.
ŒŒ, -
GetPixel
ŒŒ- 5
(
ŒŒ5 6
xCounter
ŒŒ6 >
,
ŒŒ> ?
yCounter
ŒŒ@ H
-
ŒŒI J
$num
ŒŒK L
)
ŒŒL M
+
ŒŒN O
destTex
ŒŒP W
.
ŒŒW X
GetPixel
ŒŒX `
(
ŒŒ` a
xCounter
ŒŒa i
,
ŒŒi j
yCounter
ŒŒk s
-
ŒŒt u
$num
ŒŒv w
)
ŒŒw x
+
ŒŒy z
destTexŒŒ{ Ç
.ŒŒÇ É
GetPixelŒŒÉ ã
(ŒŒã å
xCounterŒŒå î
,ŒŒî ï
yCounterŒŒñ û
)ŒŒû ü
+ŒŒ† °
destTexŒŒ¢ ©
.ŒŒ© ™
GetPixelŒŒ™ ≤
(ŒŒ≤ ≥
xCounterŒŒ≥ ª
,ŒŒª º
yCounterŒŒΩ ≈
+ŒŒ∆ «
$numŒŒ» …
)ŒŒ…  
+ŒŒÀ Ã
destTexŒŒÕ ‘
.ŒŒ‘ ’
GetPixelŒŒ’ ›
(ŒŒ› ﬁ
xCounterŒŒﬁ Ê
,ŒŒÊ Á
yCounterŒŒË 
+ŒŒÒ Ú
$numŒŒÛ Ù
)ŒŒÙ ı
;ŒŒı ˆ
destTex
œœ #
.
œœ# $
SetPixel
œœ$ ,
(
œœ, -
xCounter
œœ- 5
,
œœ5 6
yCounter
œœ7 ?
,
œœ? @
pixCol
œœA G
/
œœH I
(
œœJ K
darkenShadow
œœK W
*
œœX Y
$num
œœZ [
)
œœ[ \
)
œœ\ ]
;
œœ] ^
}
–– 
else
—— 
if
—— 
(
——  !
	blurRange
——! *
==
——+ -
$num
——. /
)
——/ 0
{
““ 
pixCol
”” "
=
””# $
destTex
””% ,
.
””, -
GetPixel
””- 5
(
””5 6
xCounter
””6 >
,
””> ?
yCounter
””@ H
-
””I J
$num
””K L
)
””L M
+
””N O
destTex
””P W
.
””W X
GetPixel
””X `
(
””` a
xCounter
””a i
,
””i j
yCounter
””k s
-
””t u
$num
””v w
)
””w x
+
””y z
destTex””{ Ç
.””Ç É
GetPixel””É ã
(””ã å
xCounter””å î
,””î ï
yCounter””ñ û
-””ü †
$num””° ¢
)””¢ £
+””§ •
destTex””¶ ≠
.””≠ Æ
GetPixel””Æ ∂
(””∂ ∑
xCounter””∑ ø
,””ø ¿
yCounter””¡ …
)””…  
+””À Ã
destTex””Õ ‘
.””‘ ’
GetPixel””’ ›
(””› ﬁ
xCounter””ﬁ Ê
,””Ê Á
yCounter””Ë 
+””Ò Ú
$num””Û Ù
)””Ù ı
+””ˆ ˜
destTex””¯ ˇ
.””ˇ Ä
GetPixel””Ä à
(””à â
xCounter””â ë
,””ë í
yCounter””ì õ
+””ú ù
$num””û ü
)””ü †
+””° ¢
destTex””£ ™
.””™ ´
GetPixel””´ ≥
(””≥ ¥
xCounter””¥ º
,””º Ω
yCounter””æ ∆
+””« »
$num””…  
)””  À
;””À Ã
destTex
‘‘ #
.
‘‘# $
SetPixel
‘‘$ ,
(
‘‘, -
xCounter
‘‘- 5
,
‘‘5 6
yCounter
‘‘7 ?
,
‘‘? @
pixCol
‘‘A G
/
‘‘H I
(
‘‘J K
darkenShadow
‘‘K W
*
‘‘X Y
$num
‘‘Z [
)
‘‘[ \
)
‘‘\ ]
;
‘‘] ^
}
’’ 
else
÷÷ 
if
÷÷ 
(
÷÷  !
	blurRange
÷÷! *
==
÷÷+ -
$num
÷÷. /
)
÷÷/ 0
{
◊◊ 
pixCol
ÿÿ "
=
ÿÿ# $
destTex
ÿÿ% ,
.
ÿÿ, -
GetPixel
ÿÿ- 5
(
ÿÿ5 6
xCounter
ÿÿ6 >
,
ÿÿ> ?
yCounter
ÿÿ@ H
-
ÿÿI J
$num
ÿÿK L
)
ÿÿL M
+
ÿÿN O
destTex
ÿÿP W
.
ÿÿW X
GetPixel
ÿÿX `
(
ÿÿ` a
xCounter
ÿÿa i
,
ÿÿi j
yCounter
ÿÿk s
-
ÿÿt u
$num
ÿÿv w
)
ÿÿw x
+
ÿÿy z
destTexÿÿ{ Ç
.ÿÿÇ É
GetPixelÿÿÉ ã
(ÿÿã å
xCounterÿÿå î
,ÿÿî ï
yCounterÿÿñ û
-ÿÿü †
$numÿÿ° ¢
)ÿÿ¢ £
+ÿÿ§ •
destTexÿÿ¶ ≠
.ÿÿ≠ Æ
GetPixelÿÿÆ ∂
(ÿÿ∂ ∑
xCounterÿÿ∑ ø
,ÿÿø ¿
yCounterÿÿ¡ …
-ÿÿ  À
$numÿÿÃ Õ
)ÿÿÕ Œ
+ÿÿœ –
destTexÿÿ— ÿ
.ÿÿÿ Ÿ
GetPixelÿÿŸ ·
(ÿÿ· ‚
xCounterÿÿ‚ Í
,ÿÿÍ Î
yCounterÿÿÏ Ù
)ÿÿÙ ı
+ÿÿˆ ˜
destTexÿÿ¯ ˇ
.ÿÿˇ Ä
GetPixelÿÿÄ à
(ÿÿà â
xCounterÿÿâ ë
,ÿÿë í
yCounterÿÿì õ
+ÿÿú ù
$numÿÿû ü
)ÿÿü †
+ÿÿ° ¢
destTexÿÿ£ ™
.ÿÿ™ ´
GetPixelÿÿ´ ≥
(ÿÿ≥ ¥
xCounterÿÿ¥ º
,ÿÿº Ω
yCounterÿÿæ ∆
+ÿÿ« »
$numÿÿ…  
)ÿÿ  À
+ÿÿÃ Õ
destTexÿÿŒ ’
.ÿÿ’ ÷
GetPixelÿÿ÷ ﬁ
(ÿÿﬁ ﬂ
xCounterÿÿﬂ Á
,ÿÿÁ Ë
yCounterÿÿÈ Ò
+ÿÿÚ Û
$numÿÿÙ ı
)ÿÿı ˆ
+ÿÿ˜ ¯
destTexÿÿ˘ Ä
.ÿÿÄ Å
GetPixelÿÿÅ â
(ÿÿâ ä
xCounterÿÿä í
,ÿÿí ì
yCounterÿÿî ú
+ÿÿù û
$numÿÿü †
)ÿÿ† °
;ÿÿ° ¢
destTex
ŸŸ #
.
ŸŸ# $
SetPixel
ŸŸ$ ,
(
ŸŸ, -
xCounter
ŸŸ- 5
,
ŸŸ5 6
yCounter
ŸŸ7 ?
,
ŸŸ? @
pixCol
ŸŸA G
/
ŸŸH I
(
ŸŸJ K
darkenShadow
ŸŸK W
*
ŸŸX Y
$num
ŸŸZ [
)
ŸŸ[ \
)
ŸŸ\ ]
;
ŸŸ] ^
}
⁄⁄ 
else
€€ 
if
€€ 
(
€€  !
	blurRange
€€! *
==
€€+ -
$num
€€. /
)
€€/ 0
{
‹‹ 
pixCol
›› "
=
››# $
destTex
››% ,
.
››, -
GetPixel
››- 5
(
››5 6
xCounter
››6 >
,
››> ?
yCounter
››@ H
-
››I J
$num
››K L
)
››L M
+
››N O
destTex
››P W
.
››W X
GetPixel
››X `
(
››` a
xCounter
››a i
,
››i j
yCounter
››k s
-
››t u
$num
››v w
)
››w x
+
››y z
destTex››{ Ç
.››Ç É
GetPixel››É ã
(››ã å
xCounter››å î
,››î ï
yCounter››ñ û
-››ü †
$num››° ¢
)››¢ £
+››§ •
destTex››¶ ≠
.››≠ Æ
GetPixel››Æ ∂
(››∂ ∑
xCounter››∑ ø
,››ø ¿
yCounter››¡ …
-››  À
$num››Ã Õ
)››Õ Œ
+››œ –
destTex››— ÿ
.››ÿ Ÿ
GetPixel››Ÿ ·
(››· ‚
xCounter››‚ Í
,››Í Î
yCounter››Ï Ù
-››ı ˆ
$num››˜ ¯
)››¯ ˘
+››˙ ˚
destTex››¸ É
.››É Ñ
GetPixel››Ñ å
(››å ç
xCounter››ç ï
,››ï ñ
yCounter››ó ü
)››ü †
+››° ¢
destTex››£ ™
.››™ ´
GetPixel››´ ≥
(››≥ ¥
xCounter››¥ º
,››º Ω
yCounter››æ ∆
+››« »
$num››…  
)››  À
+››Ã Õ
destTex››Œ ’
.››’ ÷
GetPixel››÷ ﬁ
(››ﬁ ﬂ
xCounter››ﬂ Á
,››Á Ë
yCounter››È Ò
+››Ú Û
$num››Ù ı
)››ı ˆ
+››˜ ¯
destTex››˘ Ä
.››Ä Å
GetPixel››Å â
(››â ä
xCounter››ä í
,››í ì
yCounter››î ú
+››ù û
$num››ü †
)››† °
+››¢ £
destTex››§ ´
.››´ ¨
GetPixel››¨ ¥
(››¥ µ
xCounter››µ Ω
,››Ω æ
yCounter››ø «
+››» …
$num››  À
)››À Ã
+››Õ Œ
destTex››œ ÷
.››÷ ◊
GetPixel››◊ ﬂ
(››ﬂ ‡
xCounter››‡ Ë
,››Ë È
yCounter››Í Ú
+››Û Ù
$num››ı ˆ
)››ˆ ˜
;››˜ ¯
destTex
ﬁﬁ #
.
ﬁﬁ# $
SetPixel
ﬁﬁ$ ,
(
ﬁﬁ, -
xCounter
ﬁﬁ- 5
,
ﬁﬁ5 6
yCounter
ﬁﬁ7 ?
,
ﬁﬁ? @
pixCol
ﬁﬁA G
/
ﬁﬁH I
(
ﬁﬁJ K
darkenShadow
ﬁﬁK W
*
ﬁﬁX Y
$num
ﬁﬁZ \
)
ﬁﬁ\ ]
)
ﬁﬁ] ^
;
ﬁﬁ^ _
}
ﬂﬂ 
yCounter
‡‡  
++
‡‡  "
;
‡‡" #
}
·· 
xCounter
‚‚ 
++
‚‚ 
;
‚‚ 
yCounter
„„ 
=
„„ 
$num
„„  
;
„„  !
}
‰‰ 
destTex
ÊÊ 
.
ÊÊ 
Apply
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ  
xCounter
ËË 
=
ËË 
$num
ËË 
;
ËË 
yCounter
ÈÈ 
=
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
while
ÎÎ 
(
ÎÎ 
xCounter
ÎÎ 
<
ÎÎ  !
destTex
ÎÎ" )
.
ÎÎ) *
width
ÎÎ* /
)
ÎÎ/ 0
{
ÏÏ 
while
ÌÌ 
(
ÌÌ 
yCounter
ÌÌ #
<
ÌÌ$ %
destTex
ÌÌ& -
.
ÌÌ- .
height
ÌÌ. 4
)
ÌÌ4 5
{
ÓÓ 
if
ÔÔ 
(
ÔÔ 
	blurRange
ÔÔ %
==
ÔÔ& (
$num
ÔÔ) *
)
ÔÔ* +
{
 
pixCol
ÒÒ "
.
ÒÒ" #
a
ÒÒ# $
=
ÒÒ% &
destTex
ÒÒ' .
.
ÒÒ. /
GetPixel
ÒÒ/ 7
(
ÒÒ7 8
xCounter
ÒÒ8 @
-
ÒÒA B
$num
ÒÒC D
,
ÒÒD E
yCounter
ÒÒF N
)
ÒÒN O
.
ÒÒO P
a
ÒÒP Q
/
ÒÒR S
$num
ÒÒT U
+
ÒÒV W
destTex
ÒÒX _
.
ÒÒ_ `
GetPixel
ÒÒ` h
(
ÒÒh i
xCounter
ÒÒi q
,
ÒÒq r
yCounter
ÒÒs {
)
ÒÒ{ |
.
ÒÒ| }
a
ÒÒ} ~
/ÒÒ Ä
$numÒÒÅ Ç
+ÒÒÉ Ñ
destTexÒÒÖ å
.ÒÒå ç
GetPixelÒÒç ï
(ÒÒï ñ
xCounterÒÒñ û
+ÒÒü †
$numÒÒ° ¢
,ÒÒ¢ £
yCounterÒÒ§ ¨
)ÒÒ¨ ≠
.ÒÒ≠ Æ
aÒÒÆ Ø
/ÒÒ∞ ±
$numÒÒ≤ ≥
;ÒÒ≥ ¥
pixCol
ÚÚ "
.
ÚÚ" #
r
ÚÚ# $
=
ÚÚ% &
$num
ÚÚ' (
;
ÚÚ( )
pixCol
ÛÛ "
.
ÛÛ" #
g
ÛÛ# $
=
ÛÛ% &
$num
ÛÛ' (
;
ÛÛ( )
pixCol
ÙÙ "
.
ÙÙ" #
b
ÙÙ# $
=
ÙÙ% &
$num
ÙÙ' (
;
ÙÙ( )
destTex
ıı #
.
ıı# $
SetPixel
ıı$ ,
(
ıı, -
xCounter
ıı- 5
,
ıı5 6
yCounter
ıı7 ?
,
ıı? @
pixCol
ııA G
/
ııH I
(
ııJ K
darkenShadow
ııK W
)
ııW X
)
ııX Y
;
ııY Z
}
ˆˆ 
else
˜˜ 
if
˜˜ 
(
˜˜  !
	blurRange
˜˜! *
==
˜˜+ -
$num
˜˜. /
)
˜˜/ 0
{
¯¯ 
pixCol
˘˘ "
=
˘˘# $
destTex
˘˘% ,
.
˘˘, -
GetPixel
˘˘- 5
(
˘˘5 6
xCounter
˘˘6 >
-
˘˘? @
$num
˘˘A B
,
˘˘B C
yCounter
˘˘D L
)
˘˘L M
+
˘˘N O
destTex
˘˘P W
.
˘˘W X
GetPixel
˘˘X `
(
˘˘` a
xCounter
˘˘a i
-
˘˘j k
$num
˘˘l m
,
˘˘m n
yCounter
˘˘o w
)
˘˘w x
+
˘˘y z
destTex˘˘{ Ç
.˘˘Ç É
GetPixel˘˘É ã
(˘˘ã å
xCounter˘˘å î
,˘˘î ï
yCounter˘˘ñ û
)˘˘û ü
+˘˘† °
destTex˘˘¢ ©
.˘˘© ™
GetPixel˘˘™ ≤
(˘˘≤ ≥
xCounter˘˘≥ ª
+˘˘º Ω
$num˘˘æ ø
,˘˘ø ¿
yCounter˘˘¡ …
)˘˘…  
+˘˘À Ã
destTex˘˘Õ ‘
.˘˘‘ ’
GetPixel˘˘’ ›
(˘˘› ﬁ
xCounter˘˘ﬁ Ê
+˘˘Á Ë
$num˘˘È Í
,˘˘Í Î
yCounter˘˘Ï Ù
)˘˘Ù ı
;˘˘ı ˆ
destTex
˙˙ #
.
˙˙# $
SetPixel
˙˙$ ,
(
˙˙, -
xCounter
˙˙- 5
,
˙˙5 6
yCounter
˙˙7 ?
,
˙˙? @
pixCol
˙˙A G
/
˙˙H I
(
˙˙J K
darkenShadow
˙˙K W
*
˙˙X Y
$num
˙˙Z [
)
˙˙[ \
)
˙˙\ ]
;
˙˙] ^
}
˚˚ 
else
¸¸ 
if
¸¸ 
(
¸¸  !
	blurRange
¸¸! *
==
¸¸+ -
$num
¸¸. /
)
¸¸/ 0
{
˝˝ 
pixCol
˛˛ "
=
˛˛# $
destTex
˛˛% ,
.
˛˛, -
GetPixel
˛˛- 5
(
˛˛5 6
xCounter
˛˛6 >
-
˛˛? @
$num
˛˛A B
,
˛˛B C
yCounter
˛˛D L
)
˛˛L M
+
˛˛N O
destTex
˛˛P W
.
˛˛W X
GetPixel
˛˛X `
(
˛˛` a
xCounter
˛˛a i
-
˛˛j k
$num
˛˛l m
,
˛˛m n
yCounter
˛˛o w
)
˛˛w x
+
˛˛y z
destTex˛˛{ Ç
.˛˛Ç É
GetPixel˛˛É ã
(˛˛ã å
xCounter˛˛å î
-˛˛ï ñ
$num˛˛ó ò
,˛˛ò ô
yCounter˛˛ö ¢
)˛˛¢ £
+˛˛§ •
destTex˛˛¶ ≠
.˛˛≠ Æ
GetPixel˛˛Æ ∂
(˛˛∂ ∑
xCounter˛˛∑ ø
,˛˛ø ¿
yCounter˛˛¡ …
)˛˛…  
+˛˛À Ã
destTex˛˛Õ ‘
.˛˛‘ ’
GetPixel˛˛’ ›
(˛˛› ﬁ
xCounter˛˛ﬁ Ê
+˛˛Á Ë
$num˛˛È Í
,˛˛Í Î
yCounter˛˛Ï Ù
)˛˛Ù ı
+˛˛ˆ ˜
destTex˛˛¯ ˇ
.˛˛ˇ Ä
GetPixel˛˛Ä à
(˛˛à â
xCounter˛˛â ë
+˛˛í ì
$num˛˛î ï
,˛˛ï ñ
yCounter˛˛ó ü
)˛˛ü †
+˛˛° ¢
destTex˛˛£ ™
.˛˛™ ´
GetPixel˛˛´ ≥
(˛˛≥ ¥
xCounter˛˛¥ º
+˛˛Ω æ
$num˛˛ø ¿
,˛˛¿ ¡
yCounter˛˛¬  
)˛˛  À
;˛˛À Ã
destTex
ˇˇ #
.
ˇˇ# $
SetPixel
ˇˇ$ ,
(
ˇˇ, -
xCounter
ˇˇ- 5
,
ˇˇ5 6
yCounter
ˇˇ7 ?
,
ˇˇ? @
pixCol
ˇˇA G
/
ˇˇH I
(
ˇˇJ K
darkenShadow
ˇˇK W
*
ˇˇX Y
$num
ˇˇZ [
)
ˇˇ[ \
)
ˇˇ\ ]
;
ˇˇ] ^
}
ÄÄ 
else
ÅÅ 
if
ÅÅ 
(
ÅÅ  !
	blurRange
ÅÅ! *
==
ÅÅ+ -
$num
ÅÅ. /
)
ÅÅ/ 0
{
ÇÇ 
pixCol
ÉÉ "
=
ÉÉ# $
destTex
ÉÉ% ,
.
ÉÉ, -
GetPixel
ÉÉ- 5
(
ÉÉ5 6
xCounter
ÉÉ6 >
-
ÉÉ? @
$num
ÉÉA B
,
ÉÉB C
yCounter
ÉÉD L
)
ÉÉL M
+
ÉÉN O
destTex
ÉÉP W
.
ÉÉW X
GetPixel
ÉÉX `
(
ÉÉ` a
xCounter
ÉÉa i
-
ÉÉj k
$num
ÉÉl m
,
ÉÉm n
yCounter
ÉÉo w
)
ÉÉw x
+
ÉÉy z
destTexÉÉ{ Ç
.ÉÉÇ É
GetPixelÉÉÉ ã
(ÉÉã å
xCounterÉÉå î
-ÉÉï ñ
$numÉÉó ò
,ÉÉò ô
yCounterÉÉö ¢
)ÉÉ¢ £
+ÉÉ§ •
destTexÉÉ¶ ≠
.ÉÉ≠ Æ
GetPixelÉÉÆ ∂
(ÉÉ∂ ∑
xCounterÉÉ∑ ø
-ÉÉ¿ ¡
$numÉÉ¬ √
,ÉÉ√ ƒ
yCounterÉÉ≈ Õ
)ÉÉÕ Œ
+ÉÉœ –
destTexÉÉ— ÿ
.ÉÉÿ Ÿ
GetPixelÉÉŸ ·
(ÉÉ· ‚
xCounterÉÉ‚ Í
,ÉÉÍ Î
yCounterÉÉÏ Ù
)ÉÉÙ ı
+ÉÉˆ ˜
destTexÉÉ¯ ˇ
.ÉÉˇ Ä
GetPixelÉÉÄ à
(ÉÉà â
xCounterÉÉâ ë
+ÉÉí ì
$numÉÉî ï
,ÉÉï ñ
yCounterÉÉó ü
)ÉÉü †
+ÉÉ° ¢
destTexÉÉ£ ™
.ÉÉ™ ´
GetPixelÉÉ´ ≥
(ÉÉ≥ ¥
xCounterÉÉ¥ º
+ÉÉΩ æ
$numÉÉø ¿
,ÉÉ¿ ¡
yCounterÉÉ¬  
)ÉÉ  À
+ÉÉÃ Õ
destTexÉÉŒ ’
.ÉÉ’ ÷
GetPixelÉÉ÷ ﬁ
(ÉÉﬁ ﬂ
xCounterÉÉﬂ Á
+ÉÉË È
$numÉÉÍ Î
,ÉÉÎ Ï
yCounterÉÉÌ ı
)ÉÉı ˆ
+ÉÉ˜ ¯
destTexÉÉ˘ Ä
.ÉÉÄ Å
GetPixelÉÉÅ â
(ÉÉâ ä
xCounterÉÉä í
+ÉÉì î
$numÉÉï ñ
,ÉÉñ ó
yCounterÉÉò †
)ÉÉ† °
;ÉÉ° ¢
destTex
ÑÑ #
.
ÑÑ# $
SetPixel
ÑÑ$ ,
(
ÑÑ, -
xCounter
ÑÑ- 5
,
ÑÑ5 6
yCounter
ÑÑ7 ?
,
ÑÑ? @
pixCol
ÑÑA G
/
ÑÑH I
(
ÑÑJ K
darkenShadow
ÑÑK W
*
ÑÑX Y
$num
ÑÑZ [
)
ÑÑ[ \
)
ÑÑ\ ]
;
ÑÑ] ^
}
ÖÖ 
else
ÜÜ 
if
ÜÜ 
(
ÜÜ  !
	blurRange
ÜÜ! *
==
ÜÜ+ -
$num
ÜÜ. /
)
ÜÜ/ 0
{
áá 
pixCol
àà "
=
àà# $
destTex
àà% ,
.
àà, -
GetPixel
àà- 5
(
àà5 6
xCounter
àà6 >
-
àà? @
$num
ààA B
,
ààB C
yCounter
ààD L
)
ààL M
+
ààN O
destTex
ààP W
.
ààW X
GetPixel
ààX `
(
àà` a
xCounter
ààa i
-
ààj k
$num
ààl m
,
ààm n
yCounter
àào w
)
ààw x
+
àày z
destTexàà{ Ç
.ààÇ É
GetPixelààÉ ã
(ààã å
xCounterààå î
-ààï ñ
$numààó ò
,ààò ô
yCounterààö ¢
)àà¢ £
+àà§ •
destTexàà¶ ≠
.àà≠ Æ
GetPixelààÆ ∂
(àà∂ ∑
xCounteràà∑ ø
-àà¿ ¡
$numàà¬ √
,àà√ ƒ
yCounteràà≈ Õ
)ààÕ Œ
+ààœ –
destTexàà— ÿ
.ààÿ Ÿ
GetPixelààŸ ·
(àà· ‚
xCounteràà‚ Í
-ààÎ Ï
$numààÌ Ó
,ààÓ Ô
yCounteràà ¯
)àà¯ ˘
+àà˙ ˚
destTexàà¸ É
.ààÉ Ñ
GetPixelààÑ å
(ààå ç
xCounterààç ï
,ààï ñ
yCounterààó ü
)ààü †
+àà° ¢
destTexàà£ ™
.àà™ ´
GetPixelàà´ ≥
(àà≥ ¥
xCounteràà¥ º
+ààΩ æ
$numààø ¿
,àà¿ ¡
yCounteràà¬  
)àà  À
+ààÃ Õ
destTexààŒ ’
.àà’ ÷
GetPixelàà÷ ﬁ
(ààﬁ ﬂ
xCounterààﬂ Á
+ààË È
$numààÍ Î
,ààÎ Ï
yCounterààÌ ı
)ààı ˆ
+àà˜ ¯
destTexàà˘ Ä
.ààÄ Å
GetPixelààÅ â
(ààâ ä
xCounterààä í
+ààì î
$numààï ñ
,ààñ ó
yCounterààò †
)àà† °
+àà¢ £
destTexàà§ ´
.àà´ ¨
GetPixelàà¨ ¥
(àà¥ µ
xCounterààµ Ω
+ààæ ø
$numàà¿ ¡
,àà¡ ¬
yCounteràà√ À
)ààÀ Ã
+ààÕ Œ
destTexààœ ÷
.àà÷ ◊
GetPixelàà◊ ﬂ
(ààﬂ ‡
xCounteràà‡ Ë
+ààÈ Í
$numààÎ Ï
,ààÏ Ì
yCounterààÓ ˆ
)ààˆ ˜
;àà˜ ¯
destTex
ââ #
.
ââ# $
SetPixel
ââ$ ,
(
ââ, -
xCounter
ââ- 5
,
ââ5 6
yCounter
ââ7 ?
,
ââ? @
pixCol
ââA G
/
ââH I
(
ââJ K
darkenShadow
ââK W
*
ââX Y
$num
ââZ \
)
ââ\ ]
)
ââ] ^
;
ââ^ _
}
ää 
yCounter
çç  
++
çç  "
;
çç" #
}
éé 
xCounter
èè 
++
èè 
;
èè 
yCounter
êê 
=
êê 
$num
êê  
;
êê  !
}
ëë 
destTex
ìì 
.
ìì 
Apply
ìì 
(
ìì 
)
ìì 
;
ìì  
xCounter
ïï 
=
ïï 
$num
ïï 
;
ïï 
yCounter
ññ 
=
ññ 
$num
ññ 
;
ññ 
i
óó 
++
óó 
;
óó 
}
òò 
}
ôô 	
void
õõ 
ApplyChanges
õõ 
(
õõ 
)
õõ 
{
úú 	
byte
ûû 
[
ûû 
]
ûû 
bytes
ûû 
=
ûû 
destTex
ûû "
.
ûû" #
EncodeToPNG
ûû# .
(
ûû. /
)
ûû/ 0
;
ûû0 1
MaterialGlobals
°° 
.
°°  
shadowSpriteBorder
°° .
=
°°/ 0
new
°°1 4
Vector4
°°5 <
(
°°< =
sourceSprite
°°= I
.
°°I J
border
°°J P
.
°°P Q
w
°°Q R
+
°°S T
imagePadding
°°U a
,
°°a b
sourceSprite
°°c o
.
°°o p
border
°°p v
.
°°v w
x
°°w x
+
°°y z
imagePadding°°{ á
,°°á à
sourceSprite°°â ï
.°°ï ñ
border°°ñ ú
.°°ú ù
y°°ù û
+°°ü †
imagePadding°°° ≠
,°°≠ Æ
sourceSprite°°Ø ª
.°°ª º
border°°º ¬
.°°¬ √
z°°√ ƒ
+°°≈ ∆
imagePadding°°« ”
)°°” ‘
;°°‘ ’
System
§§ 	
.
§§	 

IO
§§
 
.
§§ 
File
§§ 
.
§§ 
WriteAllBytes
§§ 
(
§§  
textureFileName
§§  /
,
§§/ 0
bytes
§§1 6
)
§§6 7
;
§§7 8
AssetDatabase
ßß 
.
ßß 
Refresh
ßß !
(
ßß! "
)
ßß" #
;
ßß# $

destSprite
™™ 
=
™™ 
AssetDatabase
™™ &
.
™™& '
LoadAssetAtPath
™™' 6
(
™™6 7
textureFileName
™™7 F
,
™™F G
typeof
™™H N
(
™™N O
Sprite
™™O U
)
™™U V
)
™™V W
as
™™X Z
Sprite
™™[ a
;
™™a b
	destImage
≠≠ 
.
≠≠ 
rectTransform
≠≠ #
.
≠≠# $
	sizeDelta
≠≠$ -
=
≠≠. /
new
≠≠0 3
Vector2
≠≠4 ;
(
≠≠; <
sourceImage
≠≠< G
.
≠≠G H
rectTransform
≠≠H U
.
≠≠U V
	sizeDelta
≠≠V _
.
≠≠_ `
x
≠≠` a
+
≠≠b c
imagePadding
≠≠d p
*
≠≠q r
$num
≠≠s t
,
≠≠t u
sourceImage≠≠v Å
.≠≠Å Ç
rectTransform≠≠Ç è
.≠≠è ê
	sizeDelta≠≠ê ô
.≠≠ô ö
y≠≠ö õ
+≠≠ú ù
imagePadding≠≠û ™
*≠≠´ ¨
$num≠≠≠ Æ
)≠≠Æ Ø
;≠≠Ø ∞
	destImage
ÆÆ 
.
ÆÆ 
rectTransform
ÆÆ #
.
ÆÆ# $
position
ÆÆ$ ,
=
ÆÆ- .
sourceImage
ÆÆ/ :
.
ÆÆ: ;
rectTransform
ÆÆ; H
.
ÆÆH I
position
ÆÆI Q
;
ÆÆQ R
	destImage
ØØ 
.
ØØ 
sprite
ØØ 
=
ØØ 

destSprite
ØØ )
;
ØØ) *
	destImage
∞∞ 
.
∞∞ 
type
∞∞ 
=
∞∞ 
UnityEngine
∞∞ (
.
∞∞( )
UI
∞∞) +
.
∞∞+ ,
Image
∞∞, 1
.
∞∞1 2
Type
∞∞2 6
.
∞∞6 7
Sliced
∞∞7 =
;
∞∞= >
Vector3
≥≥ 
tempRect
≥≥ 
=
≥≥ 
	destImage
≥≥ (
.
≥≥( )
rectTransform
≥≥) 6
.
≥≥6 7
position
≥≥7 ?
+
≥≥@ A$
shadowRelativePosition
≥≥B X
;
≥≥X Y
	destImage
¥¥ 
.
¥¥ 
rectTransform
¥¥ #
.
¥¥# $
position
¥¥$ ,
=
¥¥- .
tempRect
¥¥/ 7
;
¥¥7 8
Vector2
∑∑ 
tempVec2
∑∑ 
=
∑∑ 
	destImage
∑∑ (
.
∑∑( )
rectTransform
∑∑) 6
.
∑∑6 7
	sizeDelta
∑∑7 @
+
∑∑A B 
shadowRelativeSize
∑∑C U
;
∑∑U V
	destImage
∏∏ 
.
∏∏ 
rectTransform
∏∏ #
.
∏∏# $
	sizeDelta
∏∏$ -
=
∏∏. /
tempVec2
∏∏0 8
;
∏∏8 9
Color
ªª 
	tempColor
ªª 
=
ªª 
	destImage
ªª '
.
ªª' (
color
ªª( -
;
ªª- .
	tempColor
ºº 
.
ºº 
a
ºº 
=
ºº 
shadowAlpha
ºº %
;
ºº% &
	destImage
ΩΩ 
.
ΩΩ 
color
ΩΩ 
=
ΩΩ 
	tempColor
ΩΩ '
;
ΩΩ' (
}
ææ 	
}
øø 
}¿¿ 
QF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ButtonInteractableControl.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
[ 
RequireComponent 
( 
typeof 
( 
CanvasGroup &
)& '
)' (
]( )
public 
class %
ButtonInteractableControl '
:( )
MonoBehaviour* 7
{ 
private 	
CanvasGroup
 
canvasGroup !
;! "
private 	
Button
 
button 
; 
private 	
bool
 !
lastInteractableState $
;$ %
[ 
SerializeField 
] 
private 
CanvasGroup &
shadows' .
;. /
private 	
void
 
OnEnable 
( 
) 
{ 
canvasGroup 
= 

gameObject 
. 
GetComponent (
<( )
CanvasGroup) 4
>4 5
(5 6
)6 7
;7 8
button 	
=
 

gameObject 
. 
GetComponent #
<# $
Button$ *
>* +
(+ ,
), -
;- .
} 
void!! 
Update!! 
(!! 
)!! 
{"" 
if## 
(## !
lastInteractableState## 
!=## 
button##  &
.##& '
interactable##' 3
)##3 4
{$$ !
lastInteractableState%% 
=%% 
button%% "
.%%" #
interactable%%# /
;%%/ 0
if'' 
('' !
lastInteractableState'' 
)'' 
{(( 
canvasGroup)) 
.)) 
alpha)) 
=)) 
$num)) 
;)) 
canvasGroup** 
.** 
blocksRaycasts** 
=**  !
true**" &
;**& '
if,, 
(,, 	
shadows,,	 
),, 
shadows-- 
.-- 
alpha-- 
=-- 
$num-- 
;-- 
}.. 
else// 
{00 
canvasGroup11 
.11 
alpha11 
=11 
$num11 
;11 
canvasGroup22 
.22 
blocksRaycasts22 
=22  !
false22" '
;22' (
if44 
(44 	
shadows44	 
)44 
shadows55 
.55 
alpha55 
=55 
$num55 
;55 
}66 
}77 
}88 
}99 
}:: Å
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ToggleConfig.cs
	namespace 	

MaterialUI
 
{ 
public 
class 
ToggleConfig 
: 
MonoBehaviour *
,* +
IPointerUpHandler, =
{ 
Slider 
	theSlider	 
; 
Toggle 
	theToggle	 
; 
void 
Start 
( 
) 
{ 
	theSlider 
= 

gameObject 
. "
GetComponentInChildren 0
<0 1
Slider1 7
>7 8
(9 :
): ;
;; <
	theToggle 
= 

gameObject 
. 
GetComponent &
<& '
Toggle' -
>- .
(/ 0
)0 1
;1 2
} 
public 
void	 
OnPointerUp 
( 
PointerEventData +
data, 0
)0 1
{ 
if 
( 
	theSlider 
. 
value 
> 
$num 
) 
{   
	theToggle!! 
.!! 
isOn!! 
=!! 
true!! 
;!! 
}"" 
else## 
{$$ 
	theToggle%% 
.%% 
isOn%% 
=%% 
false%% 
;%% 
}&& 
}'' 
}(( 
})) ó
9F:\Github\CS 230\unityProj\Assets\Scenes\Scripts\Score.cs
public 
class 
Score 
: 
MonoBehaviour "
{ 
public 	
static
 
int 

totalScore 
;  
} 

ZF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\DropdownSample.cs
public 
class 
DropdownSample 
: 
MonoBehaviour *
{ 
[ 
SerializeField 
] 
private 
TextMeshProUGUI	 
text 
= 
null  $
;$ %
[		 
SerializeField		 
]		 
private

 
TMP_Dropdown

	 &
dropdownWithoutPlaceholder

 0
=

1 2
null

3 7
;

7 8
[ 
SerializeField 
] 
private 
TMP_Dropdown	 #
dropdownWithPlaceholder -
=. /
null0 4
;4 5
public 
void 
OnButtonClick 
( 
) 
{ 
text 
. 
text 
= #
dropdownWithPlaceholder %
.% &
value& +
>, -
-. /
$num/ 0
?1 2
$str3 G
+H I&
dropdownWithoutPlaceholderJ d
.d e
valuee j
+k l
$strm r
+s t$
dropdownWithPlaceholder	u å
.
å ç
value
ç í
:
ì î
$str
ï µ
;
µ ∂
} 
} ®0
dF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TMP_PhoneNumberValidator.cs
	namespace 	
TMPro
 
{ 
[

 
Serializable

 
]

 
public 

class $
TMP_PhoneNumberValidator )
:* +
TMP_InputValidator, >
{ 
public 
override 
char 
Validate %
(% &
ref& )
string* 0
text1 5
,5 6
ref7 :
int; >
pos? B
,B C
charD H
chI K
)K L
{ 	
Debug 
. 
Log 
( 
$str -
)- .
;. /
if 
( 
ch 
< 
$char 
&& 
ch 
>  
$char! $
)$ %
return& ,
(- .
char. 2
)2 3
$num3 4
;4 5
int 
length 
= 
text 
. 
Length $
;$ %
for 
( 
int 
i 
= 
$num 
; 
i 
< 
length  &
+' (
$num) *
;* +
i, -
++- /
)/ 0
{ 
switch 
( 
i 
) 
{ 
case 
$num 
: 
if 
( 
i 
==  
length! '
)' (
text  
=! "
$str# &
+' (
ch) +
;+ ,
pos   
=   
$num   
;    
break!! 
;!! 
case"" 
$num"" 
:"" 
if## 
(## 
i## 
==##  
length##! '
)##' (
text$$  
+=$$! #
ch$$$ &
;$$& '
pos%% 
=%% 
$num%% 
;%%  
break&& 
;&& 
case'' 
$num'' 
:'' 
if(( 
((( 
i(( 
==((  
length((! '
)((' (
text))  
+=))! #
ch))$ &
;))& '
pos** 
=** 
$num** 
;**  
break++ 
;++ 
case,, 
$num,, 
:,, 
if-- 
(-- 
i-- 
==--  
length--! '
)--' (
text..  
+=..! #
ch..$ &
+..' (
$str..) -
;..- .
pos// 
=// 
$num// 
;//  
break00 
;00 
case11 
$num11 
:11 
if22 
(22 
i22 
==22  
length22! '
)22' (
text33  
+=33! #
$str33$ (
+33) *
ch33+ -
;33- .
pos44 
=44 
$num44 
;44  
break55 
;55 
case66 
$num66 
:66 
if77 
(77 
i77 
==77  
length77! '
)77' (
text88  
+=88! #
$str88$ '
+88( )
ch88* ,
;88, -
pos99 
=99 
$num99 
;99  
break:: 
;:: 
case;; 
$num;; 
:;; 
if<< 
(<< 
i<< 
==<<  
length<<! '
)<<' (
text==  
+===! #
ch==$ &
;==& '
pos>> 
=>> 
$num>> 
;>>  
break?? 
;?? 
case@@ 
$num@@ 
:@@ 
ifAA 
(AA 
iAA 
==AA  
lengthAA! '
)AA' (
textBB  
+=BB! #
chBB$ &
;BB& '
posCC 
=CC 
$numCC 
;CC  
breakDD 
;DD 
caseEE 
$numEE 
:EE 
ifFF 
(FF 
iFF 
==FF  
lengthFF! '
)FF' (
textGG  
+=GG! #
chGG$ &
+GG' (
$strGG) ,
;GG, -
posHH 
=HH 
$numHH  
;HH  !
breakII 
;II 
caseJJ 
$numJJ 
:JJ 
ifKK 
(KK 
iKK 
==KK  
lengthKK! '
)KK' (
textLL  
+=LL! #
$strLL$ '
+LL( )
chLL* ,
;LL, -
posMM 
=MM 
$numMM  
;MM  !
breakNN 
;NN 
caseOO 
$numOO 
:OO 
ifPP 
(PP 
iPP 
==PP  
lengthPP! '
)PP' (
textQQ  
+=QQ! #
chQQ$ &
;QQ& '
posRR 
=RR 
$numRR  
;RR  !
breakSS 
;SS 
caseTT 
$numTT 
:TT 
ifUU 
(UU 
iUU 
==UU  
lengthUU! '
)UU' (
textVV  
+=VV! #
chVV$ &
;VV& '
posWW 
=WW 
$numWW  
;WW  !
breakXX 
;XX 
caseYY 
$numYY 
:YY 
ifZZ 
(ZZ 
iZZ 
==ZZ  
lengthZZ! '
)ZZ' (
text[[  
+=[[! #
ch[[$ &
;[[& '
pos\\ 
=\\ 
$num\\  
;\\  !
break]] 
;]] 
case^^ 
$num^^ 
:^^ 
if__ 
(__ 
i__ 
==__  
length__! '
)__' (
text``  
+=``! #
ch``$ &
;``& '
posaa 
=aa 
$numaa  
;aa  !
breakbb 
;bb 
}cc 
}dd 
returnff 
chff 
;ff 
}gg 	
}hh 
}ii ˛û
CF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\RadioConfig.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
] 
public 
class 
RadioConfig 
: 
MonoBehaviour )
{ 
public 
float	 
animationDuration  
=! "
$num# '
;' (
public 
Color	 
onColor 
; 
public 
Color	 
offColor 
; 
public 
Color	 
disabledColor 
; 
public 
bool	 
changeTextColor 
; 
public 
Color	 
textNormalColor 
; 
public 
Color	 
textDisabledColor  
;  !
public   
bool  	 
changeRippleColor   
;    
[## 
SerializeField## 
]## 
private## 
Image##  
dotImage##! )
;##) *
[$$ 
SerializeField$$ 
]$$ 
private$$ 
Image$$  
	ringImage$$! *
;$$* +
[%% 
SerializeField%% 
]%% 
private%% 
Text%% 
text%%  $
;%%$ %
private'' 	
RectTransform''
 
dotRectTransform'' (
;''( )
private(( 	
CheckBoxToggler((
 
checkBoxToggler(( )
;(() *
private)) 	
RippleConfig))
 
rippleConfig)) #
;))# $
private++ 	
Toggle++
 
toggle++ 
;++ 
private,, 	
ToggleGroup,,
 
toggleGroup,, !
;,,! "
private.. 	
bool..
 '
lastToggleInteractableState.. *
;..* +
private// 	
bool//
 
lastToggleState// 
;// 
private11 	
float11
 
currentDotSize11 
;11 
private22 	
Color22
 
currentColor22 
;22 
private33 	
Color33
 
currentTextColor33  
;33  !
private55 	
Vector355
 
tempVector355 
;55 
private66 	
Color66
 
	tempColor66 
;66 
private88 	
int88
 
state88 
;88 
private99 	
float99
 
animStartTime99 
;99 
private:: 	
float::
 
animDeltaTime:: 
;:: 
public<< 
void<<	 
OnEnable<< 
(<< 
)<< 
{== 
toggle?? 	
=??
 

gameObject?? 
.?? 
GetComponent?? #
<??# $
Toggle??$ *
>??* +
(??+ ,
)??, -
;??- .
toggleGroup@@ 
=@@ 

gameObject@@ 
.@@ 
GetComponent@@ (
<@@( )
	Transform@@) 2
>@@2 3
(@@3 4
)@@4 5
.@@5 6
parent@@6 <
.@@< =
parent@@= C
.@@C D
GetComponent@@D P
<@@P Q
ToggleGroup@@Q \
>@@\ ]
(@@] ^
)@@^ _
;@@_ `
dotRectTransformAA 
=AA 
dotImageAA 
.AA 
GetComponentAA +
<AA+ ,
RectTransformAA, 9
>AA9 :
(AA: ;
)AA; <
;AA< =
checkBoxTogglerBB 
=BB 
textBB 
.BB 
GetComponentBB &
<BB& '
CheckBoxTogglerBB' 6
>BB6 7
(BB7 8
)BB8 9
;BB9 :
rippleConfigCC 
=CC 

gameObjectCC 
.CC 
GetComponentCC )
<CC) *
RippleConfigCC* 6
>CC6 7
(CC7 8
)CC8 9
;CC9 :
toggleDD 	
.DD	 

groupDD
 
=DD 
toggleGroupDD 
;DD 
}EE 
voidGG 
StartGG 
(GG 
)GG 
{HH '
lastToggleInteractableStateII 
=II  
toggleII! '
.II' (
interactableII( 4
;II4 5
ifKK 
(KK '
lastToggleInteractableStateKK "
)KK" #
{LL 
ifMM 
(MM 
lastToggleStateMM 
!=MM 
toggleMM !
.MM! "
isOnMM" &
)MM& '
{NN 
lastToggleStateOO 
=OO 
toggleOO 
.OO 
isOnOO "
;OO" #
ifQQ 
(QQ 	
lastToggleStateQQ	 
)QQ 
TurnOnSilentRR 
(RR 
)RR 
;RR 
elseSS 	
TurnOffSilentTT 
(TT 
)TT 
;TT 
}UU 
}VV 
ifXX 
(XX 
changeRippleColorXX 
)XX 
rippleConfigYY 
.YY 
rippleColorYY 
=YY 
	ringImageYY (
.YY( )
colorYY) .
;YY. /
}ZZ 
public\\ 
void\\	 
ToggleCheckbox\\ 
(\\ 
bool\\ "
state\\# (
)\\( )
{]] 
if^^ 
(^^ 
toggle^^ 
.^^ 
isOn^^ 
)^^ 
TurnOn__ 

(__ 
)__ 
;__ 
else`` 
TurnOffaa 
(aa 
)aa 
;aa 
}bb 
voiddd 
TurnOndd 
(dd 
)dd 
{ee 
dotImageff 
.ff 
enabledff 
=ff 
trueff 
;ff 
currentDotSizehh 
=hh 
dotRectTransformhh $
.hh$ %

localScalehh% /
.hh/ 0
xhh0 1
;hh1 2
currentColorii 
=ii 
	ringImageii 
.ii 
colorii !
;ii! "
currentTextColorjj 
=jj 
textjj 
.jj 
colorjj  
;jj  !
animStartTimell 
=ll 
Timell 
.ll  
realtimeSinceStartupll ,
;ll, -
statemm 
=mm	 

$nummm 
;mm 
}nn 
privatepp 	
voidpp
 
TurnOnSilentpp 
(pp 
)pp 
{qq 
dotImagerr 
.rr 
enabledrr 
=rr 
truerr 
;rr 
ifss 
(ss 
dotRectTransformss 
.ss 

localScaless "
!=ss# %
newss& )
Vector3ss* 1
(ss1 2
$numss2 4
,ss4 5
$numss6 8
,ss8 9
$numss: <
)ss< =
)ss= >
dotRectTransformtt 
.tt 

localScalett 
=tt  !
newtt" %
Vector3tt& -
(tt- .
$numtt. 0
,tt0 1
$numtt2 4
,tt4 5
$numtt6 8
)tt8 9
;tt9 :
ifvv 
(vv '
lastToggleInteractableStatevv "
)vv" #
{ww 
	ringImagexx 
.xx 
colorxx 
=xx 
onColorxx 
;xx 
ifzz 
(zz 
changeTextColorzz 
)zz 
text{{ 	
.{{	 

color{{
 
={{ 
onColor{{ 
;{{ 
if}} 
(}} 
changeRippleColor}} 
)}} 
rippleConfig~~ 
.~~ 
rippleColor~~ 
=~~ 
onColor~~  '
;~~' (
} 
}
ÄÄ 
void
ÇÇ 
TurnOff
ÇÇ 
(
ÇÇ 
)
ÇÇ 
{
ÉÉ 
currentDotSize
ÑÑ 
=
ÑÑ 
dotRectTransform
ÑÑ $
.
ÑÑ$ %

localScale
ÑÑ% /
.
ÑÑ/ 0
x
ÑÑ0 1
;
ÑÑ1 2
currentColor
ÖÖ 
=
ÖÖ 
	ringImage
ÖÖ 
.
ÖÖ 
color
ÖÖ !
;
ÖÖ! "
currentTextColor
ÜÜ 
=
ÜÜ 
text
ÜÜ 
.
ÜÜ 
color
ÜÜ  
;
ÜÜ  !
animStartTime
àà 
=
àà 
Time
àà 
.
àà "
realtimeSinceStartup
àà ,
;
àà, -
state
ââ 
=
ââ	 

$num
ââ 
;
ââ 
}
ää 
private
åå 	
void
åå
 
TurnOffSilent
åå 
(
åå 
)
åå 
{
çç 
if
éé 
(
éé 
dotRectTransform
éé 
.
éé 

localScale
éé "
!=
éé# %
new
éé& )
Vector3
éé* 1
(
éé1 2
$num
éé2 4
,
éé4 5
$num
éé6 8
,
éé8 9
$num
éé: <
)
éé< =
)
éé= >
dotRectTransform
èè 
.
èè 

localScale
èè 
=
èè  !
new
èè" %
Vector3
èè& -
(
èè- .
$num
èè. 0
,
èè0 1
$num
èè2 4
,
èè4 5
$num
èè6 8
)
èè8 9
;
èè9 :
if
ëë 
(
ëë )
lastToggleInteractableState
ëë "
)
ëë" #
{
íí 
	ringImage
ìì 
.
ìì 
color
ìì 
=
ìì 
offColor
ìì 
;
ìì 
if
ïï 
(
ïï 
changeTextColor
ïï 
)
ïï 
text
ññ 	
.
ññ	 

color
ññ
 
=
ññ 
textNormalColor
ññ !
;
ññ! "
if
òò 
(
òò 
changeRippleColor
òò 
)
òò 
rippleConfig
ôô 
.
ôô 
rippleColor
ôô 
=
ôô 
offColor
ôô  (
;
ôô( )
}
öö 
dotImage
úú 
.
úú 
enabled
úú 
=
úú 
false
úú 
;
úú 
}
ùù 
private
üü 	
void
üü
 
EnableRadioButton
üü  
(
üü  !
)
üü! "
{
†† 
if
°° 
(
°° 
toggle
°° 
.
°° 
isOn
°° 
)
°° 
{
¢¢ 
	ringImage
££ 
.
££ 
color
££ 
=
££ 
onColor
££ 
;
££ 
if
§§ 
(
§§ 
changeTextColor
§§ 
)
§§ 
text
•• 	
.
••	 

color
••
 
=
•• 
onColor
•• 
;
•• 
else
¶¶ 
text
ßß 	
.
ßß	 

color
ßß
 
=
ßß 
textNormalColor
ßß !
;
ßß! "
}
®® 
else
©© 
{
™™ 
	ringImage
´´ 
.
´´ 
color
´´ 
=
´´ 
offColor
´´ 
;
´´ 
text
¨¨ 
.
¨¨ 	
color
¨¨	 
=
¨¨ 
textNormalColor
¨¨  
;
¨¨  !
}
≠≠ 
checkBoxToggler
ØØ 
.
ØØ 
enabled
ØØ 
=
ØØ 
true
ØØ !
;
ØØ! "
rippleConfig
∞∞ 
.
∞∞ 
enabled
∞∞ 
=
∞∞ 
true
∞∞ 
;
∞∞ 
}
±± 
private
≥≥ 	
void
≥≥
  
DisableRadioButton
≥≥ !
(
≥≥! "
)
≥≥" #
{
¥¥ 
	ringImage
µµ 
.
µµ 
color
µµ 
=
µµ 
disabledColor
µµ "
;
µµ" #
text
∂∂ 
.
∂∂ 
color
∂∂ 
=
∂∂ 
disabledColor
∂∂ 
;
∂∂ 
checkBoxToggler
∏∏ 
.
∏∏ 
enabled
∏∏ 
=
∏∏ 
false
∏∏ "
;
∏∏" #
rippleConfig
ππ 
.
ππ 
enabled
ππ 
=
ππ 
false
ππ 
;
ππ  
}
∫∫ 
void
ºº 
Update
ºº 
(
ºº 
)
ºº 
{
ΩΩ 
animDeltaTime
ææ 
=
ææ 
Time
ææ 
.
ææ "
realtimeSinceStartup
ææ ,
-
ææ- .
animStartTime
ææ/ <
;
ææ< =
if
¿¿ 
(
¿¿ 
state
¿¿ 
==
¿¿ 
$num
¿¿ 
)
¿¿ 
{
¡¡ 
if
¬¬ 
(
¬¬ 
animDeltaTime
¬¬ 
<=
¬¬ 
animationDuration
¬¬ *
)
¬¬* +
{
√√ 
dotRectTransform
ƒƒ 
.
ƒƒ 

localScale
ƒƒ  
=
ƒƒ! "
Anim
ƒƒ# '
.
ƒƒ' (
	Overshoot
ƒƒ( 1
(
ƒƒ1 2
new
ƒƒ2 5
Vector3
ƒƒ6 =
(
ƒƒ= >
currentDotSize
ƒƒ> L
,
ƒƒL M
currentDotSize
ƒƒN \
,
ƒƒ\ ]
$num
ƒƒ^ `
)
ƒƒ` a
,
ƒƒa b
new
ƒƒc f
Vector3
ƒƒg n
(
ƒƒn o
$num
ƒƒo q
,
ƒƒq r
$num
ƒƒs u
,
ƒƒu v
$num
ƒƒw y
)
ƒƒy z
,
ƒƒz {
animDeltaTimeƒƒ| â
,ƒƒâ ä!
animationDurationƒƒã ú
)ƒƒú ù
;ƒƒù û
	ringImage
≈≈ 
.
≈≈ 
color
≈≈ 
=
≈≈ 
Anim
≈≈ 
.
≈≈ 
Quint
≈≈ !
.
≈≈! "
SoftOut
≈≈" )
(
≈≈) *
currentColor
≈≈* 6
,
≈≈6 7
onColor
≈≈8 ?
,
≈≈? @
animDeltaTime
≈≈A N
,
≈≈N O
animationDuration
≈≈P a
)
≈≈a b
;
≈≈b c
if
«« 
(
«« 	
changeTextColor
««	 
)
«« 
text
»» 

.
»»
 
color
»» 
=
»» 
Anim
»» 
.
»» 
Quint
»» 
.
»» 
SoftOut
»» %
(
»»% &
currentTextColor
»»& 6
,
»»6 7
onColor
»»8 ?
,
»»? @
animDeltaTime
»»A N
,
»»N O
animationDuration
»»P a
)
»»a b
;
»»b c
if
   
(
   	
changeRippleColor
  	 
)
   
rippleConfig
ÀÀ 
.
ÀÀ 
rippleColor
ÀÀ 
=
ÀÀ  
	ringImage
ÀÀ! *
.
ÀÀ* +
color
ÀÀ+ 0
;
ÀÀ0 1
}
ÃÃ 
else
ÕÕ 
{
ŒŒ 
dotRectTransform
œœ 
.
œœ 

localScale
œœ  
=
œœ! "
new
œœ# &
Vector3
œœ' .
(
œœ. /
$num
œœ/ 1
,
œœ1 2
$num
œœ3 5
,
œœ5 6
$num
œœ7 9
)
œœ9 :
;
œœ: ;
	ringImage
–– 
.
–– 
color
–– 
=
–– 
onColor
–– 
;
–– 
if
““ 
(
““ 	
changeTextColor
““	 
)
““ 
text
”” 

.
””
 
color
”” 
=
”” 
onColor
”” 
;
”” 
if
’’ 
(
’’ 	
changeRippleColor
’’	 
)
’’ 
rippleConfig
÷÷ 
.
÷÷ 
rippleColor
÷÷ 
=
÷÷  
onColor
÷÷! (
;
÷÷( )
state
ÿÿ 

=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
}
ŸŸ 
}
⁄⁄ 
else
€€ 
if
€€ 

(
€€ 
state
€€ 
==
€€ 
$num
€€ 
)
€€ 
{
‹‹ 
if
›› 
(
›› 
animDeltaTime
›› 
<=
›› 
animationDuration
›› *
)
››* +
{
ﬁﬁ 
dotRectTransform
ﬂﬂ 
.
ﬂﬂ 

localScale
ﬂﬂ  
=
ﬂﬂ! "
Anim
ﬂﬂ# '
.
ﬂﬂ' (
Sept
ﬂﬂ( ,
.
ﬂﬂ, -
InOut
ﬂﬂ- 2
(
ﬂﬂ2 3
new
ﬂﬂ3 6
Vector3
ﬂﬂ7 >
(
ﬂﬂ> ?
currentDotSize
ﬂﬂ? M
,
ﬂﬂM N
currentDotSize
ﬂﬂO ]
,
ﬂﬂ] ^
$num
ﬂﬂ_ a
)
ﬂﬂa b
,
ﬂﬂb c
new
ﬂﬂd g
Vector3
ﬂﬂh o
(
ﬂﬂo p
$num
ﬂﬂp r
,
ﬂﬂr s
$num
ﬂﬂt v
,
ﬂﬂv w
$num
ﬂﬂx z
)
ﬂﬂz {
,
ﬂﬂ{ |
animDeltaTimeﬂﬂ} ä
,ﬂﬂä ã!
animationDurationﬂﬂå ù
*ﬂﬂû ü
$numﬂﬂ† •
)ﬂﬂ• ¶
;ﬂﬂ¶ ß
	ringImage
‡‡ 
.
‡‡ 
color
‡‡ 
=
‡‡ 
Anim
‡‡ 
.
‡‡ 
Sept
‡‡  
.
‡‡  !
InOut
‡‡! &
(
‡‡& '
currentColor
‡‡' 3
,
‡‡3 4
offColor
‡‡5 =
,
‡‡= >
animDeltaTime
‡‡? L
,
‡‡L M
animationDuration
‡‡N _
*
‡‡` a
$num
‡‡b g
)
‡‡g h
;
‡‡h i
if
‚‚ 
(
‚‚ 	
changeTextColor
‚‚	 
)
‚‚ 
text
„„ 

.
„„
 
color
„„ 
=
„„ 
Anim
„„ 
.
„„ 
Quint
„„ 
.
„„ 
SoftOut
„„ %
(
„„% &
currentTextColor
„„& 6
,
„„6 7
textNormalColor
„„8 G
,
„„G H
animDeltaTime
„„I V
,
„„V W
animationDuration
„„X i
*
„„j k
$num
„„l q
)
„„q r
;
„„r s
if
ÂÂ 
(
ÂÂ 	
changeRippleColor
ÂÂ	 
)
ÂÂ 
rippleConfig
ÊÊ 
.
ÊÊ 
rippleColor
ÊÊ 
=
ÊÊ  
	ringImage
ÊÊ! *
.
ÊÊ* +
color
ÊÊ+ 0
;
ÊÊ0 1
}
ÁÁ 
else
ËË 
{
ÈÈ 
dotRectTransform
ÍÍ 
.
ÍÍ 

localScale
ÍÍ  
=
ÍÍ! "
new
ÍÍ# &
Vector3
ÍÍ' .
(
ÍÍ. /
$num
ÍÍ/ 1
,
ÍÍ1 2
$num
ÍÍ3 5
,
ÍÍ5 6
$num
ÍÍ7 9
)
ÍÍ9 :
;
ÍÍ: ;
	ringImage
ÎÎ 
.
ÎÎ 
color
ÎÎ 
=
ÎÎ 
offColor
ÎÎ 
;
ÎÎ  
if
ÌÌ 
(
ÌÌ 	
changeTextColor
ÌÌ	 
)
ÌÌ 
text
ÓÓ 

.
ÓÓ
 
color
ÓÓ 
=
ÓÓ 
textNormalColor
ÓÓ "
;
ÓÓ" #
if
 
(
 	
changeRippleColor
	 
)
 
rippleConfig
ÒÒ 
.
ÒÒ 
rippleColor
ÒÒ 
=
ÒÒ  
offColor
ÒÒ! )
;
ÒÒ) *
dotImage
ÛÛ 
.
ÛÛ 
enabled
ÛÛ 
=
ÛÛ 
false
ÛÛ 
;
ÛÛ 
state
ÙÙ 

=
ÙÙ 
$num
ÙÙ 
;
ÙÙ 
}
ıı 
}
ˆˆ 
if
˘˘ 
(
˘˘ )
lastToggleInteractableState
˘˘ "
!=
˘˘# %
toggle
˘˘& ,
.
˘˘, -
interactable
˘˘- 9
)
˘˘9 :
{
˙˙ )
lastToggleInteractableState
˚˚ 
=
˚˚  !
toggle
˚˚" (
.
˚˚( )
interactable
˚˚) 5
;
˚˚5 6
if
˝˝ 
(
˝˝ )
lastToggleInteractableState
˝˝ #
)
˝˝# $
EnableRadioButton
˛˛ 
(
˛˛ 
)
˛˛ 
;
˛˛ 
else
ˇˇ  
DisableRadioButton
ÄÄ 
(
ÄÄ 
)
ÄÄ 
;
ÄÄ 
}
ÅÅ 
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 
Application
ÉÉ 
.
ÉÉ 
	isPlaying
ÉÉ 
)
ÉÉ 
{
ÑÑ 
if
ÖÖ 
(
ÖÖ 
lastToggleState
ÖÖ 
!=
ÖÖ 
toggle
ÖÖ !
.
ÖÖ! "
isOn
ÖÖ" &
)
ÖÖ& '
{
ÜÜ 
lastToggleState
áá 
=
áá 
toggle
áá 
.
áá 
isOn
áá "
;
áá" #
if
ââ 
(
ââ 	
lastToggleState
ââ	 
)
ââ 
TurnOnSilent
ää 
(
ää 
)
ää 
;
ää 
else
ãã 	
TurnOffSilent
åå 
(
åå 
)
åå 
;
åå 
}
çç 
if
èè 
(
èè 
changeRippleColor
èè 
)
èè 
rippleConfig
êê 
.
êê 
rippleColor
êê 
=
êê 
	ringImage
êê  )
.
êê) *
color
êê* /
;
êê/ 0
}
ëë 
}
íí 
}
ìì 
}îî ™'
]F:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\VertexColorCycler.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
VertexColorCycler "
:# $
MonoBehaviour% 2
{		 
private 
TMP_Text 
m_TextComponent (
;( )
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 
GetComponent *
<* +
TMP_Text+ 3
>3 4
(4 5
)5 6
;6 7
} 	
void 
Start 
( 
) 
{ 	
StartCoroutine 
( 
AnimateVertexColors .
(. /
)/ 0
)0 1
;1 2
} 	
IEnumerator 
AnimateVertexColors '
(' (
)( )
{ 	
m_TextComponent   
.   
ForceMeshUpdate   +
(  + ,
)  , -
;  - .
TMP_TextInfo"" 
textInfo"" !
=""" #
m_TextComponent""$ 3
.""3 4
textInfo""4 <
;""< =
int## 
currentCharacter##  
=##! "
$num### $
;##$ %
Color32%% 
[%% 
]%% 
newVertexColors%% %
;%%% &
Color32&& 
c0&& 
=&& 
m_TextComponent&& (
.&&( )
color&&) .
;&&. /
while(( 
((( 
true(( 
)(( 
{)) 
int** 
characterCount** "
=**# $
textInfo**% -
.**- .
characterCount**. <
;**< =
if-- 
(-- 
characterCount-- "
==--# %
$num--& '
)--' (
{.. 
yield// 
return//  
new//! $
WaitForSeconds//% 3
(//3 4
$num//4 9
)//9 :
;//: ;
continue00 
;00 
}11 
int44 
materialIndex44 !
=44" #
textInfo44$ ,
.44, -
characterInfo44- :
[44: ;
currentCharacter44; K
]44K L
.44L M"
materialReferenceIndex44M c
;44c d
newVertexColors77 
=77  !
textInfo77" *
.77* +
meshInfo77+ 3
[773 4
materialIndex774 A
]77A B
.77B C
colors3277C K
;77K L
int:: 
vertexIndex:: 
=::  !
textInfo::" *
.::* +
characterInfo::+ 8
[::8 9
currentCharacter::9 I
]::I J
.::J K
vertexIndex::K V
;::V W
if== 
(== 
textInfo== 
.== 
characterInfo== *
[==* +
currentCharacter==+ ;
]==; <
.==< =
	isVisible=== F
)==F G
{>> 
c0?? 
=?? 
new?? 
Color32?? $
(??$ %
(??% &
byte??& *
)??* +
Random??+ 1
.??1 2
Range??2 7
(??7 8
$num??8 9
,??9 :
$num??; >
)??> ?
,??? @
(??A B
byte??B F
)??F G
Random??G M
.??M N
Range??N S
(??S T
$num??T U
,??U V
$num??W Z
)??Z [
,??[ \
(??] ^
byte??^ b
)??b c
Random??c i
.??i j
Range??j o
(??o p
$num??p q
,??q r
$num??s v
)??v w
,??w x
$num??y |
)??| }
;??} ~
newVertexColorsAA #
[AA# $
vertexIndexAA$ /
+AA0 1
$numAA2 3
]AA3 4
=AA5 6
c0AA7 9
;AA9 :
newVertexColorsBB #
[BB# $
vertexIndexBB$ /
+BB0 1
$numBB2 3
]BB3 4
=BB5 6
c0BB7 9
;BB9 :
newVertexColorsCC #
[CC# $
vertexIndexCC$ /
+CC0 1
$numCC2 3
]CC3 4
=CC5 6
c0CC7 9
;CC9 :
newVertexColorsDD #
[DD# $
vertexIndexDD$ /
+DD0 1
$numDD2 3
]DD3 4
=DD5 6
c0DD7 9
;DD9 :
m_TextComponentGG #
.GG# $
UpdateVertexDataGG$ 4
(GG4 5%
TMP_VertexDataUpdateFlagsGG5 N
.GGN O
Colors32GGO W
)GGW X
;GGX Y
}KK 
currentCharacterMM  
=MM! "
(MM# $
currentCharacterMM$ 4
+MM5 6
$numMM7 8
)MM8 9
%MM: ;
characterCountMM< J
;MMJ K
yieldOO 
returnOO 
newOO  
WaitForSecondsOO! /
(OO/ 0
$numOO0 5
)OO5 6
;OO6 7
}PP 
}QQ 	
}SS 
}TT Ç
TF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\TeleType.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
TeleType 
: 
MonoBehaviour )
{		 
private 
string 
label01 
=  
$str	! Å
;
Å Ç
private 
string 
label02 
=  
$str	! Å
;
Å Ç
private 
TMP_Text 
m_textMeshPro &
;& '
void 
Awake 
( 
) 
{ 	
m_textMeshPro 
= 
GetComponent (
<( )
TMP_Text) 1
>1 2
(2 3
)3 4
;4 5
m_textMeshPro 
. 
text 
=  
label01! (
;( )
m_textMeshPro 
. 
enableWordWrapping ,
=- .
true/ 3
;3 4
m_textMeshPro 
. 
	alignment #
=$ % 
TextAlignmentOptions& :
.: ;
Top; >
;> ?
},, 	
IEnumerator// 
Start// 
(// 
)// 
{00 	
m_textMeshPro33 
.33 
ForceMeshUpdate33 )
(33) *
)33* +
;33+ ,
int66 "
totalVisibleCharacters66 &
=66' (
m_textMeshPro66) 6
.666 7
textInfo667 ?
.66? @
characterCount66@ N
;66N O
int77 
counter77 
=77 
$num77 
;77 
int88 
visibleCount88 
=88 
$num88  
;88  !
while:: 
(:: 
true:: 
):: 
{;; 
visibleCount<< 
=<< 
counter<< &
%<<' (
(<<) *"
totalVisibleCharacters<<* @
+<<A B
$num<<C D
)<<D E
;<<E F
m_textMeshPro>> 
.>>  
maxVisibleCharacters>> 2
=>>3 4
visibleCount>>5 A
;>>A B
ifAA 
(AA 
visibleCountAA  
>=AA! #"
totalVisibleCharactersAA$ :
)AA: ;
{BB 
yieldCC 
returnCC  
newCC! $
WaitForSecondsCC% 3
(CC3 4
$numCC4 8
)CC8 9
;CC9 :
m_textMeshProDD !
.DD! "
textDD" &
=DD' (
label02DD) 0
;DD0 1
yieldEE 
returnEE  
newEE! $
WaitForSecondsEE% 3
(EE3 4
$numEE4 8
)EE8 9
;EE9 :
m_textMeshProFF !
.FF! "
textFF" &
=FF' (
label01FF) 0
;FF0 1
yieldGG 
returnGG  
newGG! $
WaitForSecondsGG% 3
(GG3 4
$numGG4 8
)GG8 9
;GG9 :
}HH 
counterJJ 
+=JJ 
$numJJ 
;JJ 
yieldLL 
returnLL 
newLL  
WaitForSecondsLL! /
(LL/ 0
$numLL0 5
)LL5 6
;LL6 7
}MM 
}PP 	
}RR 
}SS ∂;
[F:\Github\CS 230\unityProj\Assets\MaterialUI\Examples\Scripts\04 - RadioButton\Example04.cs
public 
class 
	Example04 
: 
MonoBehaviour &
{ 
[ 
SerializeField 
] 
private 
Text  
m_selectedValue1Text 3
;3 4
public

 
void

 '
onRadioButton1ToggleChanged

 (
(

( )
bool

) -
isOn

. 2
)

2 3
{ 
if 
( 
isOn 

)
 
{  
m_selectedValue1Text 
. 
text 
= 
$str 6
;6 7
} 
} 
public 
void '
onRadioButton2ToggleChanged (
(( )
bool) -
isOn. 2
)2 3
{ 
if 
( 
isOn 

)
 
{  
m_selectedValue1Text 
. 
text 
= 
$str 7
;7 8
} 
} 
public 
void '
onRadioButton3ToggleChanged (
(( )
bool) -
isOn. 2
)2 3
{ 
if 
( 
isOn 

)
 
{  
m_selectedValue1Text 
. 
text 
= 
$str 6
;6 7
} 
}   
[$$ 
SerializeField$$ 
]$$ 
private$$ 
Text$$  
m_selectedValue2Text$$ 3
;$$3 4
[%% 
SerializeField%% 
]%% 
private%% 

GameObject%% $ 
m_radioButtonsParent%%% 9
;%%9 :
[&& 
SerializeField&& 
]&& 
private&& 

GameObject&& $$
m_radioButtonDraftPrefab&&% =
;&&= >
void(( 
Start(( 
((( 
)(( 
{)) 
foreach** 	
(**
 
Toggle** 
toggle** 
in**  
m_radioButtonsParent** 0
.**0 1#
GetComponentsInChildren**1 H
<**H I
Toggle**I O
>**O P
(**P Q
)**Q R
)**R S
{++ 
addToggleListener,, 
(,, 
toggle,, 
),, 
;,, 
}-- 
}.. 
public00 
void00 
onAddButtonClicked00 
(00  
)00  !
{11 
if22 
(22  
m_radioButtonsParent22 
.22 
	transform22 $
.22$ %

childCount22% /
>=220 2
$num223 4
)224 5
{33 
return44 	
;44	 

}55 

GameObject77 
instance77 
=77 

GameObject77 "
.77" #
Instantiate77# .
(77. /$
m_radioButtonDraftPrefab77/ G
)77G H
as77I K

GameObject77L V
;77V W
instance88 

.88
 
	transform88 
.88 
	SetParent88 
(88  
m_radioButtonsParent88 3
.883 4
	transform884 =
)88= >
;88> ?
instance99 

.99
 
	SetActive99 
(99 
true99 
)99 
;99 
instance:: 

.::
 "
GetComponentInChildren:: !
<::! "
Text::" &
>::& '
(::' (
)::( )
.::) *
text::* .
=::/ 0
Random::1 7
.::7 8
Range::8 =
(::= >
$num::> ?
,::? @
$num::A E
)::E F
.::F G
ToString::G O
(::O P
)::P Q
;::Q R
addToggleListener<< 
(<< 
instance<< 
.<< "
GetComponentInChildren<< 3
<<<3 4
Toggle<<4 :
><<: ;
(<<; <
)<<< =
)<<= >
;<<> ?
}== 
public?? 
void?? !
onRemoveButtonClicked?? "
(??" #
)??# $
{@@ 
ifAA 
(AA  
m_radioButtonsParentAA 
.AA 
	transformAA $
.AA$ %

childCountAA% /
<=AA0 2
$numAA3 4
)AA4 5
{BB 
returnCC 	
;CC	 

}DD 
	TransformFF 
	lastChildFF 
=FF  
m_radioButtonsParentFF ,
.FF, -
	transformFF- 6
.FF6 7
GetChildFF7 ?
(FF? @ 
m_radioButtonsParentFF@ T
.FFT U
	transformFFU ^
.FF^ _

childCountFF_ i
-FFj k
$numFFl m
)FFm n
;FFn o

GameObjectGG 
.GG 
DestroyGG 
(GG 
	lastChildGG 
.GG 

gameObjectGG )
)GG) *
;GG* +
}HH 
privateJJ 
voidJJ	 
addToggleListenerJJ 
(JJ  
ToggleJJ  &
toggleJJ' -
)JJ- .
{KK 
toggleLL 
.LL 	
onValueChangedLL	 
.LL 
AddListenerLL #
(LL# $
delegateLL$ ,
(LL, -
boolLL- 1
isOnLL2 6
)LL6 7
{MM 
TextNN 

textToggleNN 
=NN 
toggleNN 
.NN 
	transformNN %
.NN% &
parentNN& ,
.NN, -"
GetComponentInChildrenNN- C
<NNC D
TextNND H
>NNH I
(NNI J
)NNJ K
;NNK L.
"onRadioButtonExample2ToggleChangedOO %
(OO% &

textToggleOO& 0
,OO0 1
isOnOO2 6
)OO6 7
;OO7 8
}PP 
)PP 
;PP 
}QQ 
privateSS 
voidSS	 .
"onRadioButtonExample2ToggleChangedSS 0
(SS0 1
TextSS1 5

textToggleSS6 @
,SS@ A
boolSSB F
isOnSSG K
)SSK L
{TT  
m_selectedValue2TextUU 
.UU 
textUU 
=UU 
$strUU 0
+UU1 2

textToggleUU3 =
.UU= >
textUU> B
;UUB C
}VV 
[ZZ 
SerializeFieldZZ 
]ZZ 
privateZZ 
TextZZ  
m_selectedValue3TextZZ 3
;ZZ3 4
public\\ 
void\\ '
onRadioButton4ToggleChanged\\ (
(\\( )
bool\\) -
isOn\\. 2
)\\2 3
{]] 
if^^ 
(^^ 
isOn^^ 

)^^
 
{__  
m_selectedValue3Text`` 
.`` 
text`` 
=`` 
$str`` 4
;``4 5
}aa 
}bb 
publicdd 
voiddd '
onRadioButton5ToggleChangeddd (
(dd( )
booldd) -
isOndd. 2
)dd2 3
{ee 
ifff 
(ff 
isOnff 

)ff
 
{gg  
m_selectedValue3Texthh 
.hh 
texthh 
=hh 
$strhh 6
;hh6 7
}ii 
}jj 
publicll 
voidll '
onRadioButton6ToggleChangedll (
(ll( )
boolll) -
isOnll. 2
)ll2 3
{mm 
ifnn 
(nn 
isOnnn 

)nn
 
{oo  
m_selectedValue3Textpp 
.pp 
textpp 
=pp 
$strpp 5
;pp5 6
}qq 
}rr 
}tt Óà
VF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\VertexZoom.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public

 

class

 

VertexZoom

 
:

 
MonoBehaviour

 +
{ 
public 
float 
AngleMultiplier $
=% &
$num' +
;+ ,
public 
float 
SpeedMultiplier $
=% &
$num' +
;+ ,
public 
float 

CurveScale 
=  !
$num" &
;& '
private 
TMP_Text 
m_TextComponent (
;( )
private 
bool 
hasTextChanged #
;# $
void 
Awake 
( 
) 
{ 	
m_TextComponent 
= 
GetComponent *
<* +
TMP_Text+ 3
>3 4
(4 5
)5 6
;6 7
} 	
void 
OnEnable 
( 
) 
{ 	
TMPro_EventManager 
. 
TEXT_CHANGED_EVENT 1
.1 2
Add2 5
(5 6
ON_TEXT_CHANGED6 E
)E F
;F G
} 	
void 
	OnDisable 
( 
) 
{   	
TMPro_EventManager"" 
."" 
TEXT_CHANGED_EVENT"" 1
.""1 2
Remove""2 8
(""8 9
ON_TEXT_CHANGED""9 H
)""H I
;""I J
}## 	
void&& 
Start&& 
(&& 
)&& 
{'' 	
StartCoroutine(( 
((( 
AnimateVertexColors(( .
(((. /
)((/ 0
)((0 1
;((1 2
})) 	
void,, 
ON_TEXT_CHANGED,, 
(,, 
Object,, #
obj,,$ '
),,' (
{-- 	
if.. 
(.. 
obj.. 
==.. 
m_TextComponent.. &
)..& '
hasTextChanged// 
=//  
true//! %
;//% &
}00 	
IEnumerator66 
AnimateVertexColors66 '
(66' (
)66( )
{77 	
m_TextComponent;; 
.;; 
ForceMeshUpdate;; +
(;;+ ,
);;, -
;;;- .
TMP_TextInfo== 
textInfo== !
===" #
m_TextComponent==$ 3
.==3 4
textInfo==4 <
;==< =
	Matrix4x4?? 
matrix?? 
;?? 
TMP_MeshInfo@@ 
[@@ 
]@@ $
cachedMeshInfoVertexData@@ 3
=@@4 5
textInfo@@6 >
.@@> ?"
CopyMeshInfoVertexData@@? U
(@@U V
)@@V W
;@@W X
ListCC 
<CC 
floatCC 
>CC 
modifiedCharScaleCC )
=CC* +
newCC, /
ListCC0 4
<CC4 5
floatCC5 :
>CC: ;
(CC; <
)CC< =
;CC= >
ListDD 
<DD 
intDD 
>DD 
scaleSortingOrderDD '
=DD( )
newDD* -
ListDD. 2
<DD2 3
intDD3 6
>DD6 7
(DD7 8
)DD8 9
;DD9 :
hasTextChangedFF 
=FF 
trueFF !
;FF! "
whileHH 
(HH 
trueHH 
)HH 
{II 
ifKK 
(KK 
hasTextChangedKK "
)KK" #
{LL $
cachedMeshInfoVertexDataNN ,
=NN- .
textInfoNN/ 7
.NN7 8"
CopyMeshInfoVertexDataNN8 N
(NNN O
)NNO P
;NNP Q
hasTextChangedPP "
=PP# $
falsePP% *
;PP* +
}QQ 
intSS 
characterCountSS "
=SS# $
textInfoSS% -
.SS- .
characterCountSS. <
;SS< =
ifVV 
(VV 
characterCountVV "
==VV# %
$numVV& '
)VV' (
{WW 
yieldXX 
returnXX  
newXX! $
WaitForSecondsXX% 3
(XX3 4
$numXX4 9
)XX9 :
;XX: ;
continueYY 
;YY 
}ZZ 
modifiedCharScale]] !
.]]! "
Clear]]" '
(]]' (
)]]( )
;]]) *
scaleSortingOrder^^ !
.^^! "
Clear^^" '
(^^' (
)^^( )
;^^) *
for`` 
(`` 
int`` 
i`` 
=`` 
$num`` 
;`` 
i``  !
<``" #
characterCount``$ 2
;``2 3
i``4 5
++``5 7
)``7 8
{aa 
TMP_CharacterInfobb %
charInfobb& .
=bb/ 0
textInfobb1 9
.bb9 :
characterInfobb: G
[bbG H
ibbH I
]bbI J
;bbJ K
ifee 
(ee 
!ee 
charInfoee !
.ee! "
	isVisibleee" +
)ee+ ,
continueff  
;ff  !
intii 
materialIndexii %
=ii& '
textInfoii( 0
.ii0 1
characterInfoii1 >
[ii> ?
iii? @
]ii@ A
.iiA B"
materialReferenceIndexiiB X
;iiX Y
intll 
vertexIndexll #
=ll$ %
textInfoll& .
.ll. /
characterInfoll/ <
[ll< =
ill= >
]ll> ?
.ll? @
vertexIndexll@ K
;llK L
Vector3oo 
[oo 
]oo 
sourceVerticesoo ,
=oo- .$
cachedMeshInfoVertexDataoo/ G
[ooG H
materialIndexooH U
]ooU V
.ooV W
verticesooW _
;oo_ `
Vector2tt 
charMidBaslinett *
=tt+ ,
(tt- .
sourceVerticestt. <
[tt< =
vertexIndextt= H
+ttI J
$numttK L
]ttL M
+ttN O
sourceVerticesttP ^
[tt^ _
vertexIndextt_ j
+ttk l
$numttm n
]ttn o
)tto p
/ttq r
$numtts t
;ttt u
Vector3xx 
offsetxx "
=xx# $
charMidBaslinexx% 3
;xx3 4
Vector3zz 
[zz 
]zz 
destinationVerticeszz 1
=zz2 3
textInfozz4 <
.zz< =
meshInfozz= E
[zzE F
materialIndexzzF S
]zzS T
.zzT U
verticeszzU ]
;zz] ^
destinationVertices|| '
[||' (
vertexIndex||( 3
+||4 5
$num||6 7
]||7 8
=||9 :
sourceVertices||; I
[||I J
vertexIndex||J U
+||V W
$num||X Y
]||Y Z
-||[ \
offset||] c
;||c d
destinationVertices}} '
[}}' (
vertexIndex}}( 3
+}}4 5
$num}}6 7
]}}7 8
=}}9 :
sourceVertices}}; I
[}}I J
vertexIndex}}J U
+}}V W
$num}}X Y
]}}Y Z
-}}[ \
offset}}] c
;}}c d
destinationVertices~~ '
[~~' (
vertexIndex~~( 3
+~~4 5
$num~~6 7
]~~7 8
=~~9 :
sourceVertices~~; I
[~~I J
vertexIndex~~J U
+~~V W
$num~~X Y
]~~Y Z
-~~[ \
offset~~] c
;~~c d
destinationVertices '
[' (
vertexIndex( 3
+4 5
$num6 7
]7 8
=9 :
sourceVertices; I
[I J
vertexIndexJ U
+V W
$numX Y
]Y Z
-[ \
offset] c
;c d
float
ÑÑ 
randomScale
ÑÑ %
=
ÑÑ& '
Random
ÑÑ( .
.
ÑÑ. /
Range
ÑÑ/ 4
(
ÑÑ4 5
$num
ÑÑ5 7
,
ÑÑ7 8
$num
ÑÑ9 =
)
ÑÑ= >
;
ÑÑ> ?
modifiedCharScale
áá %
.
áá% &
Add
áá& )
(
áá) *
randomScale
áá* 5
)
áá5 6
;
áá6 7
scaleSortingOrder
àà %
.
àà% &
Add
àà& )
(
àà) *
modifiedCharScale
àà* ;
.
àà; <
Count
àà< A
-
ààB C
$num
ààD E
)
ààE F
;
ààF G
matrix
åå 
=
åå 
	Matrix4x4
åå &
.
åå& '
TRS
åå' *
(
åå* +
new
åå+ .
Vector3
åå/ 6
(
åå6 7
$num
åå7 8
,
åå8 9
$num
åå: ;
,
åå; <
$num
åå= >
)
åå> ?
,
åå? @

Quaternion
ååA K
.
ååK L
identity
ååL T
,
ååT U
Vector3
ååV ]
.
åå] ^
one
åå^ a
*
ååb c
randomScale
ååd o
)
ååo p
;
ååp q!
destinationVertices
éé '
[
éé' (
vertexIndex
éé( 3
+
éé4 5
$num
éé6 7
]
éé7 8
=
éé9 :
matrix
éé; A
.
ééA B
MultiplyPoint3x4
ééB R
(
ééR S!
destinationVertices
ééS f
[
ééf g
vertexIndex
éég r
+
éés t
$num
ééu v
]
éév w
)
ééw x
;
ééx y!
destinationVertices
èè '
[
èè' (
vertexIndex
èè( 3
+
èè4 5
$num
èè6 7
]
èè7 8
=
èè9 :
matrix
èè; A
.
èèA B
MultiplyPoint3x4
èèB R
(
èèR S!
destinationVertices
èèS f
[
èèf g
vertexIndex
èèg r
+
èès t
$num
èèu v
]
èèv w
)
èèw x
;
èèx y!
destinationVertices
êê '
[
êê' (
vertexIndex
êê( 3
+
êê4 5
$num
êê6 7
]
êê7 8
=
êê9 :
matrix
êê; A
.
êêA B
MultiplyPoint3x4
êêB R
(
êêR S!
destinationVertices
êêS f
[
êêf g
vertexIndex
êêg r
+
êês t
$num
êêu v
]
êêv w
)
êêw x
;
êêx y!
destinationVertices
ëë '
[
ëë' (
vertexIndex
ëë( 3
+
ëë4 5
$num
ëë6 7
]
ëë7 8
=
ëë9 :
matrix
ëë; A
.
ëëA B
MultiplyPoint3x4
ëëB R
(
ëëR S!
destinationVertices
ëëS f
[
ëëf g
vertexIndex
ëëg r
+
ëës t
$num
ëëu v
]
ëëv w
)
ëëw x
;
ëëx y!
destinationVertices
ìì '
[
ìì' (
vertexIndex
ìì( 3
+
ìì4 5
$num
ìì6 7
]
ìì7 8
+=
ìì9 ;
offset
ìì< B
;
ììB C!
destinationVertices
îî '
[
îî' (
vertexIndex
îî( 3
+
îî4 5
$num
îî6 7
]
îî7 8
+=
îî9 ;
offset
îî< B
;
îîB C!
destinationVertices
ïï '
[
ïï' (
vertexIndex
ïï( 3
+
ïï4 5
$num
ïï6 7
]
ïï7 8
+=
ïï9 ;
offset
ïï< B
;
ïïB C!
destinationVertices
ññ '
[
ññ' (
vertexIndex
ññ( 3
+
ññ4 5
$num
ññ6 7
]
ññ7 8
+=
ññ9 ;
offset
ññ< B
;
ññB C
Vector2
ôô 
[
ôô 
]
ôô 

sourceUVs0
ôô (
=
ôô) *&
cachedMeshInfoVertexData
ôô+ C
[
ôôC D
materialIndex
ôôD Q
]
ôôQ R
.
ôôR S
uvs0
ôôS W
;
ôôW X
Vector2
öö 
[
öö 
]
öö 
destinationUVs0
öö -
=
öö. /
textInfo
öö0 8
.
öö8 9
meshInfo
öö9 A
[
ööA B
materialIndex
ööB O
]
ööO P
.
ööP Q
uvs0
ööQ U
;
ööU V
destinationUVs0
úú #
[
úú# $
vertexIndex
úú$ /
+
úú0 1
$num
úú2 3
]
úú3 4
=
úú5 6

sourceUVs0
úú7 A
[
úúA B
vertexIndex
úúB M
+
úúN O
$num
úúP Q
]
úúQ R
;
úúR S
destinationUVs0
ùù #
[
ùù# $
vertexIndex
ùù$ /
+
ùù0 1
$num
ùù2 3
]
ùù3 4
=
ùù5 6

sourceUVs0
ùù7 A
[
ùùA B
vertexIndex
ùùB M
+
ùùN O
$num
ùùP Q
]
ùùQ R
;
ùùR S
destinationUVs0
ûû #
[
ûû# $
vertexIndex
ûû$ /
+
ûû0 1
$num
ûû2 3
]
ûû3 4
=
ûû5 6

sourceUVs0
ûû7 A
[
ûûA B
vertexIndex
ûûB M
+
ûûN O
$num
ûûP Q
]
ûûQ R
;
ûûR S
destinationUVs0
üü #
[
üü# $
vertexIndex
üü$ /
+
üü0 1
$num
üü2 3
]
üü3 4
=
üü5 6

sourceUVs0
üü7 A
[
üüA B
vertexIndex
üüB M
+
üüN O
$num
üüP Q
]
üüQ R
;
üüR S
Color32
¢¢ 
[
¢¢ 
]
¢¢ 
sourceColors32
¢¢ ,
=
¢¢- .&
cachedMeshInfoVertexData
¢¢/ G
[
¢¢G H
materialIndex
¢¢H U
]
¢¢U V
.
¢¢V W
colors32
¢¢W _
;
¢¢_ `
Color32
££ 
[
££ 
]
££ !
destinationColors32
££ 1
=
££2 3
textInfo
££4 <
.
££< =
meshInfo
££= E
[
££E F
materialIndex
££F S
]
££S T
.
££T U
colors32
££U ]
;
££] ^!
destinationColors32
•• '
[
••' (
vertexIndex
••( 3
+
••4 5
$num
••6 7
]
••7 8
=
••9 :
sourceColors32
••; I
[
••I J
vertexIndex
••J U
+
••V W
$num
••X Y
]
••Y Z
;
••Z [!
destinationColors32
¶¶ '
[
¶¶' (
vertexIndex
¶¶( 3
+
¶¶4 5
$num
¶¶6 7
]
¶¶7 8
=
¶¶9 :
sourceColors32
¶¶; I
[
¶¶I J
vertexIndex
¶¶J U
+
¶¶V W
$num
¶¶X Y
]
¶¶Y Z
;
¶¶Z [!
destinationColors32
ßß '
[
ßß' (
vertexIndex
ßß( 3
+
ßß4 5
$num
ßß6 7
]
ßß7 8
=
ßß9 :
sourceColors32
ßß; I
[
ßßI J
vertexIndex
ßßJ U
+
ßßV W
$num
ßßX Y
]
ßßY Z
;
ßßZ [!
destinationColors32
®® '
[
®®' (
vertexIndex
®®( 3
+
®®4 5
$num
®®6 7
]
®®7 8
=
®®9 :
sourceColors32
®®; I
[
®®I J
vertexIndex
®®J U
+
®®V W
$num
®®X Y
]
®®Y Z
;
®®Z [
}
©© 
for
¨¨ 
(
¨¨ 
int
¨¨ 
i
¨¨ 
=
¨¨ 
$num
¨¨ 
;
¨¨ 
i
¨¨  !
<
¨¨" #
textInfo
¨¨$ ,
.
¨¨, -
meshInfo
¨¨- 5
.
¨¨5 6
Length
¨¨6 <
;
¨¨< =
i
¨¨> ?
++
¨¨? A
)
¨¨A B
{
≠≠ 
scaleSortingOrder
ØØ %
.
ØØ% &
Sort
ØØ& *
(
ØØ* +
(
ØØ+ ,
a
ØØ, -
,
ØØ- .
b
ØØ/ 0
)
ØØ0 1
=>
ØØ2 4
modifiedCharScale
ØØ5 F
[
ØØF G
a
ØØG H
]
ØØH I
.
ØØI J
	CompareTo
ØØJ S
(
ØØS T
modifiedCharScale
ØØT e
[
ØØe f
b
ØØf g
]
ØØg h
)
ØØh i
)
ØØi j
;
ØØj k
textInfo
±± 
.
±± 
meshInfo
±± %
[
±±% &
i
±±& '
]
±±' (
.
±±( )
SortGeometry
±±) 5
(
±±5 6
scaleSortingOrder
±±6 G
)
±±G H
;
±±H I
textInfo
¥¥ 
.
¥¥ 
meshInfo
¥¥ %
[
¥¥% &
i
¥¥& '
]
¥¥' (
.
¥¥( )
mesh
¥¥) -
.
¥¥- .
vertices
¥¥. 6
=
¥¥7 8
textInfo
¥¥9 A
.
¥¥A B
meshInfo
¥¥B J
[
¥¥J K
i
¥¥K L
]
¥¥L M
.
¥¥M N
vertices
¥¥N V
;
¥¥V W
textInfo
µµ 
.
µµ 
meshInfo
µµ %
[
µµ% &
i
µµ& '
]
µµ' (
.
µµ( )
mesh
µµ) -
.
µµ- .
uv
µµ. 0
=
µµ1 2
textInfo
µµ3 ;
.
µµ; <
meshInfo
µµ< D
[
µµD E
i
µµE F
]
µµF G
.
µµG H
uvs0
µµH L
;
µµL M
textInfo
∂∂ 
.
∂∂ 
meshInfo
∂∂ %
[
∂∂% &
i
∂∂& '
]
∂∂' (
.
∂∂( )
mesh
∂∂) -
.
∂∂- .
colors32
∂∂. 6
=
∂∂7 8
textInfo
∂∂9 A
.
∂∂A B
meshInfo
∂∂B J
[
∂∂J K
i
∂∂K L
]
∂∂L M
.
∂∂M N
colors32
∂∂N V
;
∂∂V W
m_TextComponent
∏∏ #
.
∏∏# $
UpdateGeometry
∏∏$ 2
(
∏∏2 3
textInfo
∏∏3 ;
.
∏∏; <
meshInfo
∏∏< D
[
∏∏D E
i
∏∏E F
]
∏∏F G
.
∏∏G H
mesh
∏∏H L
,
∏∏L M
i
∏∏N O
)
∏∏O P
;
∏∏P Q
}
ππ 
yield
ªª 
return
ªª 
new
ªª  
WaitForSeconds
ªª! /
(
ªª/ 0
$num
ªª0 4
)
ªª4 5
;
ªª5 6
}
ºº 
}
ΩΩ 	
}
øø 
}¿¿ ˝
DF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ToastControl.cs
	namespace 	

MaterialUI
 
{ 
public 
static 
class 
ToastControl !
{ 
static 

GameObject	 
theToast 
; 
public 
static	 
string 
	toastText  
;  !
public 
static	 
float 
toastDuration #
;# $
public 
static	 
Color 
toastPanelColor %
;% &
public 
static	 
Color 
toastTextColor $
;$ %
public 
static	 
int 
toastFontSize !
;! "
public 
static	 
Canvas 
parentCanvas #
;# $
public 
static	 
void 
InitToastSystem $
(% &
Canvas& ,
	theCanvas- 6
)6 7
{ 
theToast 
= 
	Resources 
. 
Load 
( 
$str %
,% &
typeof' -
(- .

GameObject. 8
)8 9
)9 :
as; =

GameObject> H
;H I
parentCanvas 
= 
	theCanvas 
; 
} 
public!! 
static!!	 
void!! 
	MakeToast!! 
(!!  
string!!  &
content!!' .
,!!. /
float!!0 5
duration!!6 >
,!!> ?
Color!!@ E

panelColor!!F P
,!!P Q
Color!!R W
	textColor!!X a
,!!a b
int!!c f
fontSize!!g o
)!!o p
{"" 
	toastText## 
=## 
content## 
;## 
toastDuration$$ 
=$$ 
duration$$ 
;$$ 
toastPanelColor%% 
=%% 

panelColor%% 
;%%  
toastTextColor&& 
=&& 
	textColor&& 
;&& 
toastFontSize'' 
='' 
fontSize'' 
;'' 

GameObject(( 
.(( 
Instantiate(( 
((( 
theToast(( #
)((# $
;(($ %
})) 
}** 
}++ †3
WF:\Github\CS 230\unityProj\Assets\TextMesh Pro\Examples & Extras\Scripts\Benchmark01.cs
	namespace 	
TMPro
 
. 
Examples 
{ 
public 

class 
Benchmark01 
: 
MonoBehaviour ,
{		 
public 
int 
BenchmarkType  
=! "
$num# $
;$ %
public 
TMP_FontAsset 
	TMProFont &
;& '
public 
Font 
TextMeshFont  
;  !
private 
TextMeshPro 
m_textMeshPro )
;) *
private 
TextContainer 
m_textContainer -
;- .
private 
TextMesh 

m_textMesh #
;# $
private 
const 
string 
label01 $
=% &
$str' K
;K L
private 
const 
string 
label02 $
=% &
$str' N
;N O
private 
Material 
m_material01 %
;% &
private 
Material 
m_material02 %
;% &
IEnumerator 
Start 
( 
) 
{   	
if$$ 
($$ 
BenchmarkType$$ 
==$$  
$num$$! "
)$$" #
{%% 
m_textMeshPro&& 
=&& 

gameObject&&  *
.&&* +
AddComponent&&+ 7
<&&7 8
TextMeshPro&&8 C
>&&C D
(&&D E
)&&E F
;&&F G
m_textMeshPro'' 
.'' !
autoSizeTextContainer'' 3
=''4 5
true''6 :
;'': ;
if++ 
(++ 
	TMProFont++ 
!=++  
null++! %
)++% &
m_textMeshPro,, !
.,,! "
font,," &
=,,' (
	TMProFont,,) 2
;,,2 3
m_textMeshPro11 
.11 
fontSize11 &
=11' (
$num11) +
;11+ ,
m_textMeshPro22 
.22 
	alignment22 '
=22( ) 
TextAlignmentOptions22* >
.22> ?
Center22? E
;22E F
m_textMeshPro44 
.44 
extraPadding44 *
=44+ ,
true44- 1
;441 2
m_textMeshPro99 
.99 
enableWordWrapping99 0
=991 2
false993 8
;998 9
m_material01>> 
=>> 
m_textMeshPro>> ,
.>>, -
font>>- 1
.>>1 2
material>>2 :
;>>: ;
m_material02?? 
=?? 
	Resources?? (
.??( )
Load??) -
<??- .
Material??. 6
>??6 7
(??7 8
$str??8 l
)??l m
;??m n
}BB 
elseCC 
ifCC 
(CC 
BenchmarkTypeCC "
==CC# %
$numCC& '
)CC' (
{DD 

m_textMeshEE 
=EE 

gameObjectEE '
.EE' (
AddComponentEE( 4
<EE4 5
TextMeshEE5 =
>EE= >
(EE> ?
)EE? @
;EE@ A
ifGG 
(GG 
TextMeshFontGG  
!=GG! #
nullGG$ (
)GG( )
{HH 

m_textMeshII 
.II 
fontII #
=II$ %
TextMeshFontII& 2
;II2 3

m_textMeshJJ 
.JJ 
GetComponentJJ +
<JJ+ ,
RendererJJ, 4
>JJ4 5
(JJ5 6
)JJ6 7
.JJ7 8
sharedMaterialJJ8 F
=JJG H

m_textMeshJJI S
.JJS T
fontJJT X
.JJX Y
materialJJY a
;JJa b
}KK 
elseLL 
{MM 

m_textMeshNN 
.NN 
fontNN #
=NN$ %
	ResourcesNN& /
.NN/ 0
LoadNN0 4
(NN4 5
$strNN5 B
,NNB C
typeofNND J
(NNJ K
FontNNK O
)NNO P
)NNP Q
asNNR T
FontNNU Y
;NNY Z

m_textMeshOO 
.OO 
GetComponentOO +
<OO+ ,
RendererOO, 4
>OO4 5
(OO5 6
)OO6 7
.OO7 8
sharedMaterialOO8 F
=OOG H

m_textMeshOOI S
.OOS T
fontOOT X
.OOX Y
materialOOY a
;OOa b
}PP 

m_textMeshRR 
.RR 
fontSizeRR #
=RR$ %
$numRR& (
;RR( )

m_textMeshSS 
.SS 
anchorSS !
=SS" #

TextAnchorSS$ .
.SS. /
MiddleCenterSS/ ;
;SS; <
}VV 
forZZ 
(ZZ 
intZZ 
iZZ 
=ZZ 
$numZZ 
;ZZ 
iZZ 
<=ZZ  
$numZZ! (
;ZZ( )
iZZ* +
++ZZ+ -
)ZZ- .
{[[ 
if\\ 
(\\ 
BenchmarkType\\ !
==\\" $
$num\\% &
)\\& '
{]] 
m_textMeshPro^^ !
.^^! "
SetText^^" )
(^^) *
label01^^* 1
,^^1 2
i^^3 4
%^^5 6
$num^^7 ;
)^^; <
;^^< =
if__ 
(__ 
i__ 
%__ 
$num__  
==__! #
$num__$ '
)__' (
m_textMeshPro`` %
.``% &
fontSharedMaterial``& 8
=``9 :
m_textMeshPro``; H
.``H I
fontSharedMaterial``I [
==``\ ^
m_material01``_ k
?``l m
m_textMeshPro``n {
.``{ |
fontSharedMaterial	``| é
=
``è ê
m_material02
``ë ù
:
``û ü
m_textMeshPro
``† ≠
.
``≠ Æ 
fontSharedMaterial
``Æ ¿
=
``¡ ¬
m_material01
``√ œ
;
``œ –
}dd 
elseee 
ifee 
(ee 
BenchmarkTypeee &
==ee' )
$numee* +
)ee+ ,

m_textMeshff 
.ff 
textff #
=ff$ %
label02ff& -
+ff. /
(ff0 1
iff1 2
%ff3 4
$numff5 9
)ff9 :
.ff: ;
ToStringff; C
(ffC D
)ffD E
;ffE F
yieldhh 
returnhh 
nullhh !
;hh! "
}ii 
yieldll 
returnll 
nullll 
;ll 
}mm 	
} 
}ÄÄ ƒ
IF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\MaterialUIVersion.cs
public 
static 
class 
MaterialUIVersion %
{ 
public 
const 
string 
currentVersion #
=$ %
$str& .
;. /
} í
BF:\Github\CS 230\unityProj\Assets\MaterialUI\Scripts\ShadowSnap.cs
	namespace 	

MaterialUI
 
{ 
[ 
ExecuteInEditMode 
( 
) 
] 
public 
class 

ShadowSnap 
: 
MonoBehaviour (
{ 
public 
RectTransform	 

targetRect !
;! "
private 	
RectTransform
 
thisRect  
;  !
public 
float	 
xPadding 
= 
$num 
; 
public 
float	 
yPadding 
= 
$num 
; 
public 
bool	 

percentage 
; 
public 
float	 
xPercent 
; 
public 
float	 
yPercent 
; 
private!! 	
Rect!!
 
lastRect!! 
;!! 
private"" 	
Vector3""
 
lastPos"" 
;"" 
private$$ 	
void$$
 
Start$$ 
($$ 
)$$ 
{%% 
if&& 
(&& 
!&& 
thisRect&& 
)&& 
{'' 
thisRect(( 
=(( 

gameObject(( 
.(( 
GetComponent(( &
<((& '
RectTransform((' 4
>((4 5
(((5 6
)((6 7
;((7 8
})) 
}** 
private,, 	
void,,
 

LateUpdate,, 
(,, 
),, 
{-- 
if.. 
(.. 

targetRect.. 
).. 
{// 
if00 
(00 
!00 	
thisRect00	 
)00 
{11 
thisRect22 
=22 

gameObject22 
.22 
GetComponent22 '
<22' (
RectTransform22( 5
>225 6
(226 7
)227 8
;228 9
}33 
Vector255 
	tempVect255 
;55 
if77 
(77 

percentage77 
)77 
{88 
	tempVect299 
.99 
x99 
=99 

targetRect99 
.99 
	sizeDelta99 '
.99' (
x99( )
*99) *
xPercent99* 2
*993 4
$num995 :
;99: ;
	tempVect2:: 
.:: 
y:: 
=:: 

targetRect:: 
.:: 
	sizeDelta:: '
.::' (
y::( )
*::) *
yPercent::* 2
*::3 4
$num::5 :
;::: ;
};; 
else<< 
{== 
	tempVect2>> 
.>> 
x>> 
=>> 

targetRect>> 
.>> 
	sizeDelta>> '
.>>' (
x>>( )
+>>* +
xPadding>>, 4
;>>4 5
	tempVect2?? 
.?? 
y?? 
=?? 

targetRect?? 
.?? 
	sizeDelta?? '
.??' (
y??( )
+??* +
yPadding??, 4
;??4 5
}@@ 
thisRectBB 
.BB 
	sizeDeltaBB 
=BB 
	tempVect2BB "
;BB" #
}CC 
}DD 
}EE 
}FF 